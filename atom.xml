<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en">
	<title>个人学习总结</title>
	<subtitle>输出是最好的学习方式</subtitle>
	<link href="https://jimluo.github.io/atom.xml" rel="self" type="application/atom+xml"/>
  <link href="https://jimluo.github.io/"/>
	<generator uri="https://www.getzola.org/">Zola</generator>
	<updated>2022-06-18T00:00:00+00:00</updated>
	<id>https://jimluo.github.io/atom.xml</id>
	<entry xml:lang="en">
		<title>IPFS与web2.0的简单比较</title>
		<published>2022-06-18T00:00:00+00:00</published>
		<updated>2022-06-18T00:00:00+00:00</updated>
		<link href="https://jimluo.github.io/ipfs/" type="text/html"/>
		<id>https://jimluo.github.io/ipfs/</id>
		<content type="html">&lt;p&gt;对IPFS技术的好奇，源于2点&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;已有经验，原来做视频会议时有p2p的通话，多人会议就是多p2多p(基于WebRTC的SFU)。&lt;&#x2F;li&gt;
&lt;li&gt;web3.0的好奇，通过IPFS检验订正下自己设计一套网络系统的能力&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;历史成因&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;2008年中本聪对英国政府增发货币不满，认为国家不发币也可以规避通货膨胀带来的恶果，就开发了&lt;a href=&quot;https:&#x2F;&#x2F;bitcoin.org&quot;&gt;比特币&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;2010年&lt;a href=&quot;https:&#x2F;&#x2F;vitalik.ca&quot;&gt;Vitalik&lt;&#x2F;a&gt;对暴雪擅自削弱魔兽世界里术士的魔法，担心中心化服务的问题，2013年开发了&lt;a href=&quot;https:&#x2F;&#x2F;ethereum.org&quot;&gt;以太坊&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;2014年以太坊的&lt;a href=&quot;https:&#x2F;&#x2F;gavwood.com&quot;&gt;Gavin Wood&lt;&#x2F;a&gt;提出web3.0(去中心化、互通增强、所有权)&lt;&#x2F;li&gt;
&lt;li&gt;2014年开始由Juan Benet设计IPFS，后由&lt;a href=&quot;https:&#x2F;&#x2F;protocol.ai&#x2F;&quot;&gt;Protocol Labs&lt;&#x2F;a&gt;在开源社区的帮助下发展起来&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;本篇文章思考和写作是基于&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;与web2.0的比较（将中心化的功能拆装到每个peer中）&lt;&#x2F;li&gt;
&lt;li&gt;参考通俗畅达的&lt;a href=&quot;https:&#x2F;&#x2F;research.protocol.ai&#x2F;tutorials&#x2F;resnetlab-on-tour&#x2F;&quot;&gt;IPFS的教程&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;zi-shang-er-xia-de-wang-luo-liu-cheng&quot;&gt;自上而下的网络流程&lt;&#x2F;h2&gt;
&lt;pre style=&quot;background-color:#f9f9f9;color:#111111;&quot;&gt;&lt;code&gt;&lt;span&gt;网上有一道高频面试题：浏览器从输入网址到页面展示的过程？&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;网上的讨论结果和详细解答很多，很多人正是基于此题把还给老师的网络原理课又借了回来不准备还了。&lt;&#x2F;p&gt;
&lt;p&gt;我想究其原因，网络原理细节丛生，多课程交叉，多数内容不易于用语言(老师和书)描述，所以很多图解xxx的书收视率一直居高不下，也确实是很适合人脑。&lt;&#x2F;p&gt;
&lt;p&gt;说到IPFS原理，提供了很多文档和宣传，但都没有整合如网络课本的系统，初看时被其宣传放大的优点牵引，细节蔓延。遇到向别人解释时，就变成讲故事讲案例了。&lt;&#x2F;p&gt;
&lt;p&gt;我想顺着自上而下的网络流程和基于中心化网络的比较，能更适合人脑理解吸收。&lt;&#x2F;p&gt;
&lt;p&gt;这道题的答案是&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;URL输入&lt;&#x2F;li&gt;
&lt;li&gt;DNS解析寻址&lt;&#x2F;li&gt;
&lt;li&gt;建立TCP连接&lt;&#x2F;li&gt;
&lt;li&gt;发送HTTPS请求&lt;&#x2F;li&gt;
&lt;li&gt;服务器响应请求&lt;&#x2F;li&gt;
&lt;li&gt;浏览器解析渲染页面&lt;&#x2F;li&gt;
&lt;li&gt;HTTPS请求结束，断开TCP连接&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;重点要解释URL、DNS、HTTP、TLS、TCP和渲染的细节，这些技术的产生的背景和约束，回过头来再系统概括之间的关系，其他非功能因素(效率、成本、安全、兼容)对系统的塑造，应该就能回答的比较完善了。&lt;&#x2F;p&gt;
&lt;p&gt;IPFS去中心化时这道题的答案与中心化时对比差异&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;cid输入&lt;&#x2F;li&gt;
&lt;li&gt;DHT寻址路由&lt;&#x2F;li&gt;
&lt;li&gt;libp2p建立多个p2p连接&lt;&#x2F;li&gt;
&lt;li&gt;发送bitswap请求&lt;&#x2F;li&gt;
&lt;li&gt;peers响应请求&lt;&#x2F;li&gt;
&lt;li&gt;IPLD内容组合&lt;&#x2F;li&gt;
&lt;li&gt;浏览器解析渲染页面&lt;&#x2F;li&gt;
&lt;li&gt;libp2p请求结束，断开连接&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;重点是内容寻址、内容路由、内容交换&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;寻址内容，内容间互转换寻址，通过IPLD。不依赖底层协议&lt;&#x2F;li&gt;
&lt;li&gt;链接内容，将内容之间的链接嵌入到该内容地址，通过Merkle DAG&lt;&#x2F;li&gt;
&lt;li&gt;发现内容：分布式哈希表,Bitswap&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;&lt;img src=&quot;..&#x2F;images&#x2F;ipfs&#x2F;layer.png&quot; alt=&quot;layer&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;h2 id=&quot;shu-ru-di-zhi-urlji-yu-wei-zhi-yu-cidji-yu-nei-rong&quot;&gt;输入地址 url基于位置与cid基于内容&lt;&#x2F;h2&gt;
&lt;pre style=&quot;background-color:#f9f9f9;color:#111111;&quot;&gt;&lt;code&gt;&lt;span&gt;http url: scheme:&#x2F;&#x2F;host.domain:port&#x2F;path&#x2F;filename&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;IPFS cidv1: &amp;lt;multibase-prefix&amp;gt;&amp;lt;multicodec-cidv1&amp;gt;&amp;lt;multicodec-content-type&amp;gt;&amp;lt;multihash-content-address&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;cid（ContentID）
&lt;img src=&quot;..&#x2F;images&#x2F;ipfs&#x2F;cid.png&quot; alt=&quot;cid&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rs&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-rs &quot;&gt;&lt;code class=&quot;language-rs&quot; data-lang=&quot;rs&quot;&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; create cid by codec, raw:0x55, dag_pb:0x70, sha2_256:0x12&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; cid &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;Cid::new_v1(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;0x55&lt;&#x2F;span&gt;&lt;span&gt;, Code::Sha2_256.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;digest&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;b&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;beep boop&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;));&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; data &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; cid.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;to_bytes&lt;&#x2F;span&gt;&lt;span&gt;();&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;assert_eq!(cid, Cid::try_from(data).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;unwrap&lt;&#x2F;span&gt;&lt;span&gt;());&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;assert_eq!(&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    cid.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;to_string&lt;&#x2F;span&gt;&lt;span&gt;(),&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;bafkreieq5jui4j25lacwomsqgjeswwl3y5zcdrresptwgmfylxo2depppq&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;);&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; create 2 multiaddr&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; addr1 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;&#x2F;ip4&#x2F;127.0.0.1&#x2F;tcp&#x2F;1234&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;.parse::&amp;lt;Multiaddr&amp;gt;().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;unwrap&lt;&#x2F;span&gt;&lt;span&gt;();&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; addr2 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;multiaddr!(Ip4([&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;127&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;]), Udp(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;10500&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;u16&lt;&#x2F;span&gt;&lt;span&gt;), Quic);&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;assert_eq!(addr1.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;to_string&lt;&#x2F;span&gt;&lt;span&gt;(), &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;&#x2F;ip4&#x2F;127.0.0.1&#x2F;tcp&#x2F;1234&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;);&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;assert_eq!(addr2.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;to_string&lt;&#x2F;span&gt;&lt;span&gt;(), &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;&#x2F;ip4&#x2F;127.0.0.1&#x2F;udp&#x2F;10500&#x2F;quic&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;);&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;还记得初学url定义时，对&amp;quot;:&#x2F;&#x2F; : ? =&amp;quot;符号的盲茫，比操作系统里的路径地址(c:\Windows\System32\Drivers\etc\hosts)多的这些有啥用，不都是要定位资源吗？有了分布式资源的描述和查询的经验后，现在都习以为常了。&lt;&#x2F;p&gt;
&lt;p&gt;这还不够，去中心化下要加入更多描述信息，有一种要把http协议head里的内容搬进来的感觉。还是因为没有了中心后，cid得独立描述自己了，回到哲学就是&amp;quot;自由的选择要承担什么样的责任?&amp;quot;
以前要与中心服务器协商的编码、通讯格式等信息，要CID独自承担了。&lt;&#x2F;p&gt;
&lt;p&gt;最后还要以对人类不友好，对机器友好的方式hash表现出来。&lt;&#x2F;p&gt;
&lt;p&gt;具体细节见 &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;multiformats&#x2F;cid&quot;&gt;cid&lt;&#x2F;a&gt;, &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;multiformats&#x2F;multiformats&quot;&gt;multiformats&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;h2 id=&quot;xun-zhi-lu-you-dnsji-yu-quan-wei-he-dhtji-yu-ge-ren&quot;&gt;寻址路由 DNS基于权威和DHT基于个人&lt;&#x2F;h2&gt;
&lt;p&gt;&lt;img src=&quot;..&#x2F;images&#x2F;ipfs&#x2F;dns-request.png&quot; alt=&quot;DNS&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;h3 id=&quot;dnsde-lu-you-bao-gua&quot;&gt;DNS的路由包括&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;找自己的缓存hosts&lt;&#x2F;li&gt;
&lt;li&gt;找DNS的缓存&lt;&#x2F;li&gt;
&lt;li&gt;找Root DNS&lt;&#x2F;li&gt;
&lt;li&gt;找Top layer DNS&lt;&#x2F;li&gt;
&lt;li&gt;找权威的DNS&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;同法院申诉流程(方便记忆)&lt;&#x2F;p&gt;
&lt;p&gt;具体细节参见&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;EmilHernvall&#x2F;dnsguide&#x2F;blob&#x2F;master&#x2F;chapter1.md&quot;&gt;自己实现一个DNS&lt;&#x2F;a&gt; rust版&lt;&#x2F;p&gt;
&lt;p&gt;DNS还有一种HttpDNS的实现，为了及时更新路由表&lt;&#x2F;p&gt;
&lt;p&gt;DNS中心化后就有了被污染、被钓鱼和缓存中毒的安全问题&lt;&#x2F;p&gt;
&lt;h3 id=&quot;dht-distributed-hash-table-de-lu-you&quot;&gt;DHT(Distributed Hash Table)的路由&lt;&#x2F;h3&gt;
&lt;p&gt;&lt;img src=&quot;..&#x2F;images&#x2F;ipfs&#x2F;dht.png&quot; alt=&quot;DNS&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;结构：DHT的路由表是前缀树组成，基于位置的分组&lt;&#x2F;li&gt;
&lt;li&gt;行为：4种消息来定位和加入网络，PING、STORE、FIND_NODE和FIND_VALUE&lt;&#x2F;li&gt;
&lt;li&gt;启动：本地DHT启动时会建立路由表&amp;lt;peerid,multiaddr&amp;gt;，按距离构造成树结构&lt;&#x2F;li&gt;
&lt;li&gt;更新：此后DHT会通过熟人peers找到更近的peeers更新路由，&lt;&#x2F;li&gt;
&lt;li&gt;提供发现：同时将自己也作为服务公开出去，方便别人能找到，使用MDNS实现&lt;&#x2F;li&gt;
&lt;li&gt;路由：并行从近到远找，基于树的路由,节点k个桶（带有该前缀的节点列表）&lt;&#x2F;li&gt;
&lt;li&gt;内容发现：联系与CID最近的对等点。如果有对象就发送回，如果没有就响应提供者记录。
&lt;ul&gt;
&lt;li&gt;对等点发现：对等点可能不知道提供者记录中对等点的多地址，因此它需要执行一个新的DHT查询来查找对等点的网络地址。&lt;&#x2F;li&gt;
&lt;li&gt;路由表每10分钟刷新一次。这通常决定了是否需要一次新的步行来获得对等人的联系信息。&lt;&#x2F;li&gt;
&lt;li&gt;对等点路由：使用提供者的多地址与它联系&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;参考&lt;a href=&quot;http:&#x2F;&#x2F;bittorrent.org&#x2F;beps&#x2F;bep_0005.html&quot;&gt;协议细节&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;DHT也有另一种实现，Gossip路由，基于热点聚合，路由更快但就不稳定。libp2p可以动态选择这些协议算法。&lt;&#x2F;p&gt;
&lt;p&gt;DHT也有DNS的安全问题，只是多个中心peers后，攻击的成本变大了。&lt;&#x2F;p&gt;
&lt;p&gt;与DNS相比，IPFS不只是找到IP&#x2F;peerID，还要增加找ContentID和同步Content，这些不属于DHT，后面会提到。&lt;&#x2F;p&gt;
&lt;h4 id=&quot;ipfsyu-web2-0jian-de-wang-guan&quot;&gt;IPFS与Web2.0间的网关&lt;&#x2F;h4&gt;
&lt;ul&gt;
&lt;li&gt;_dnslink用来在web2.0下访问web3.0&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;pre data-lang=&quot;sh&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-sh &quot;&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;❯&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; dig +noall +answer TXT &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;\_&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;dnslink.docs.ipfs.tech&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;_dnslink.docs.ipfs.tech.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; 0      IN      CNAME   _dnslink.ipfs-docs.on.fleek.co.&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;_dnslink.ipfs-docs.on.fleek.co.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; 0 IN    TXT     &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;dnslink=&#x2F;ipfs&#x2F;QmTcCaXT7drCnfJhQmt7HAvT9PwT1XMsXVcHL7nyRqgvbc&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ul&gt;
&lt;li&gt;IPNS subdomain&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;pre data-lang=&quot;sh&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-sh &quot;&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt; echo &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;Hello again IPFS&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; hello.txt&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt; ipfs &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;add&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; hello.txt&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt; added &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;QmaVfeg2GM17RLjBs9C4fhpku6uDgrEGUYCTC183VrZaVW&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; hello.txt&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;17 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;B&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; &#x2F; 17 B &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;=====================================================&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; 100.00%&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt; ipfs &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; publish QmaVfeg2GM17RLjBs9C4fhpku6uDgrEGUYCTC183VrZaVW&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt; Published &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;to&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; k51qzi5uqu5dkkciu33khkzbcmxtyhn376i1e83tya8kuy7z9euedzyr5nhoew: &#x2F;ipfs&#x2F;QmaVfeg2GM17RLjBs9C4fhpku6uDgrEGUYCTC183VrZaVW&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt; curl &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;https:&#x2F;&#x2F;gateway.ipfs.io&#x2F;ipns&#x2F;k51qzi5uqu5dkkciu33khkzbcmxtyhn376i1e83tya8kuy7z9euedzyr5nhoew&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt; Hello &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;again&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; IPFS&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;img src=&quot;..&#x2F;images&#x2F;ipfs&#x2F;ipns.png&quot; alt=&quot;ipns&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;h3 id=&quot;nei-rong-lu-you-liu-cheng&quot;&gt;内容路由流程&lt;&#x2F;h3&gt;
&lt;p&gt;IPFS特有的基于内容的路由&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;内容不会被复制到其他peer，这些内容保存在用户的设备上&lt;&#x2F;li&gt;
&lt;li&gt;保存方式：CID作为指针指向其他peer的内容&lt;&#x2F;li&gt;
&lt;li&gt;保存地点：这个指针添加到20个peer保存&lt;&#x2F;li&gt;
&lt;li&gt;保存时间：24小时后过期失效&lt;&#x2F;li&gt;
&lt;li&gt;保存延续：12小时后由提供者重新发布，确保近20个对等者接收到内容，成为临时提供者&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;基于IPLD原理&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;multihash：指向文件的Merkle-DAG&lt;&#x2F;li&gt;
&lt;li&gt;文件分块：文件被分割成块，每个Chunk可独立寻址独立hash。去重，也可减小体积，分段传输&lt;&#x2F;li&gt;
&lt;li&gt;文件连接：每个块都表示为一个节点连接到Merkle DAG，块的哈希是节点的地址，地址都嵌在父节点中，作为链接。merkle-link&lt;&#x2F;li&gt;
&lt;li&gt;文件结构生成：IPLD Graph基于Merkle-DAG构建结构的标准和格式，从根开始并拆分为目录和文件。&lt;&#x2F;li&gt;
&lt;li&gt;抗内容重复：文件被分割成块，每个Chunk可独立寻址独立hash。去重，也可减小体积，分段传输&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;jian-li-lian-jie-tcphe-p2p&quot;&gt;建立连接 TCP和p2p&lt;&#x2F;h2&gt;
&lt;p&gt;相同点：&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;通讯：基于应答确认方式&lt;&#x2F;li&gt;
&lt;li&gt;安全：基于附加加密通道，TLS等&lt;&#x2F;li&gt;
&lt;li&gt;复用：可以复用连接，用完后不关闭，其他CID会话继续使用&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;p2p不同点：&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;组合获取，同时从多个peers服务中获取不同的cid资源组合在一起&lt;&#x2F;li&gt;
&lt;li&gt;NAT穿越，多个内网设备独立与外网设备连接&lt;&#x2F;li&gt;
&lt;li&gt;Pubsub，peer间双工通信&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;libp2p作为独立成熟库，以及为多个应用服务了，功能繁多，有多种语言绑定，先不用细究&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Transport&lt;&#x2F;li&gt;
&lt;li&gt;NAT Traversal&lt;&#x2F;li&gt;
&lt;li&gt;Secure Communication&lt;&#x2F;li&gt;
&lt;li&gt;Circuit Relay&lt;&#x2F;li&gt;
&lt;li&gt;Protocols&lt;&#x2F;li&gt;
&lt;li&gt;Peer Identity&lt;&#x2F;li&gt;
&lt;li&gt;Content Routing&lt;&#x2F;li&gt;
&lt;li&gt;Peer Routing&lt;&#x2F;li&gt;
&lt;li&gt;Addressing&lt;&#x2F;li&gt;
&lt;li&gt;Security Considerations&lt;&#x2F;li&gt;
&lt;li&gt;Publish&#x2F;Subscribe&lt;&#x2F;li&gt;
&lt;li&gt;Stream Multiplexing&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;fa-song-bitswapqing-qiu&quot;&gt;发送bitswap请求&lt;&#x2F;h2&gt;
&lt;p&gt;&lt;img src=&quot;..&#x2F;images&#x2F;ipfs&#x2F;bitswap.png&quot; alt=&quot;bitswap&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;协议&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Requests: WANT-HAVE &#x2F; WANT-BLOCK &#x2F; CANCEL&lt;&#x2F;li&gt;
&lt;li&gt;Responses: HAVE &#x2F; BLOCK &#x2F; DONT_HAVE&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;基于内容的交换，是IPFS特有。
目的是在多个peer间同步内容资源，依赖的还是IPLD结构化&lt;&#x2F;p&gt;
&lt;p&gt;为了找到有文件的节点，运行 Bitswap 协议的节点首先向它连接的所有节点发送一个名为 want-have 的请求。这个需要的请求包含文件根块的 CID（根块位于组成文件的块的 DAG 的顶部）。具有根块的对等方发送有响应并被添加到会话中。没有阻止的对等方发送没有响应。 Bitswap 构建了一个DAG图，显示哪些节点拥有和不拥有每个区块。&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;..&#x2F;images&#x2F;ipfs&#x2F;ipfs-bitswap.png&quot; alt=&quot;ipfs-bitswap&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;基于内容的发现&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;bitswap问数据列表中的所有“邻居”：找积极响应者&lt;&#x2F;li&gt;
&lt;li&gt;迭代DHT找到更接近目标。提供者记录包括提供者的PeerID和MultiAddr&lt;&#x2F;li&gt;
&lt;li&gt;如果提供者记录指向其他提供者的多addrs，请启动一个位交换会话 &lt;&#x2F;li&gt;
&lt;li&gt;DHT再次映射：PeerID-&amp;gt;多Addr。重复：1&lt;&#x2F;li&gt;
&lt;li&gt;缓存内容，发布提供程序记录，在被要求时提供内容&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;graphsyncfang-shi-de-jiao-huan-dui-bi&quot;&gt;Graphsync方式的交换对比&lt;&#x2F;h3&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;功能&lt;&#x2F;th&gt;&lt;th&gt;Bitswap&lt;&#x2F;th&gt;&lt;th&gt;Graphsync&lt;&#x2F;th&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;thead&gt;&lt;tbody&gt;
&lt;tr&gt;&lt;td&gt;Protocol type&lt;&#x2F;td&gt;&lt;td&gt;Message-oriented&lt;&#x2F;td&gt;&lt;td&gt;Request-Response&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;Content exchange&lt;&#x2F;td&gt;&lt;td&gt;Block by block&lt;&#x2F;td&gt;&lt;td&gt;Stream&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;Request patterns&lt;&#x2F;td&gt;&lt;td&gt;CID Path&lt;&#x2F;td&gt;&lt;td&gt;IPLD Selector&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;Multi-path download&lt;&#x2F;td&gt;&lt;td&gt;Yes&lt;&#x2F;td&gt;&lt;td&gt;No, 1:1 exchange&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;Use cases&lt;&#x2F;td&gt;&lt;td&gt;Block exchange,Accelerate content routing&lt;&#x2F;td&gt;&lt;td&gt;Blockchain sync,Large dataset sync&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;
&lt;p&gt;扩展功能&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;压缩&lt;&#x2F;li&gt;
&lt;li&gt;WANT等消息检查&lt;&#x2F;li&gt;
&lt;li&gt;多跳内容发现&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;ipldnei-rong-zu-he&quot;&gt;IPLD内容组合&lt;&#x2F;h2&gt;
&lt;p&gt;&lt;img src=&quot;..&#x2F;images&#x2F;ipfs&#x2F;ipld.png&quot; alt=&quot;IPLD&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;原理借鉴git&lt;&#x2F;p&gt;
&lt;p&gt;动手实验下，一个文件的&lt;a href=&quot;https:&#x2F;&#x2F;dag.ipfs.io&#x2F;&quot;&gt;IPLD DAG化&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>CWPP中Audit的升级换代</title>
		<published>2022-05-09T00:00:00+00:00</published>
		<updated>2022-05-09T00:00:00+00:00</updated>
		<link href="https://jimluo.github.io/audit-upgrade/" type="text/html"/>
		<id>https://jimluo.github.io/audit-upgrade/</id>
		<content type="html">&lt;p&gt;技术背景是CWPP(Cloud Workload Protection Platforms)云工作负载保护平台，通常基于代理在计算机中永久运行，收集与安全相关的数据和事件，并将其发送到基于云服务分析后通知用户相应的潜在安全威胁。&lt;&#x2F;p&gt;
&lt;p&gt;其中的一个子系统audit，是一个用于收集记录系统、内核、用户进程发生的行为事件的被动防御的安全审计系统。该系统可以可靠地收集有关上任何与安全相关事件的信息，如记录文件访问、网络访问、用户指令、系统调用和系统安全事件。&lt;&#x2F;p&gt;
&lt;p&gt;随着时间的推移，内核的发展，其存在问题日显突出&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;性能开销大：开启服务的支付卡安全标准，系统吞吐率下降30%，系统调用开销下降50%，上下文切换下降10%，其他下降%2-10%左右&lt;&#x2F;li&gt;
&lt;li&gt;不能灵活调节性能：只是开启服务但不执行，系统吞吐率下降20%，系统调用开销下降35%，其他下降%2-10%左右&lt;&#x2F;li&gt;
&lt;li&gt;对docker容器支持不够，且对docker及其服务的监测达不到安全发现的效果&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;h3 id=&quot;auditxi-tong-zi-xi-tong&quot;&gt;audit系统子系统&lt;&#x2F;h3&gt;
&lt;p&gt;&lt;img src=&quot;..&#x2F;images&#x2F;audit.png&quot; alt=&quot;audit&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;auditd：审计守护程序负责将通过审计内核接口生成并由应用程序和系统活动触发的审计消息写入磁盘。&lt;&#x2F;li&gt;
&lt;li&gt;auditctl：控制审计接口的日志生成参数和内核设置，以及用于确定要跟踪哪些事件的规则集&lt;&#x2F;li&gt;
&lt;li&gt;aureport：创建自定义报告&lt;&#x2F;li&gt;
&lt;li&gt;ausearch：搜索审计日志中的特定的事件&lt;&#x2F;li&gt;
&lt;li&gt;audispd：通知其他应用程序，而不是将其写入磁盘上的审计日志中&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;ke-ti-dai-de-5chong-ji-zhu-bi-jiao&quot;&gt;可替代的5种技术比较&lt;&#x2F;h3&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;发布年份&lt;&#x2F;th&gt;&lt;th&gt;采集框架&lt;&#x2F;th&gt;&lt;th&gt;性能&lt;&#x2F;th&gt;&lt;th&gt;可编程控制&lt;&#x2F;th&gt;&lt;th&gt;稳定性&lt;&#x2F;th&gt;&lt;th&gt;内置于内核&lt;&#x2F;th&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;thead&gt;&lt;tbody&gt;
&lt;tr&gt;&lt;td&gt;2004&lt;&#x2F;td&gt;&lt;td&gt;Linux Audit&lt;&#x2F;td&gt;&lt;td&gt;差&lt;&#x2F;td&gt;&lt;td&gt;否&lt;&#x2F;td&gt;&lt;td&gt;高&lt;&#x2F;td&gt;&lt;td&gt;是&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;2009&lt;&#x2F;td&gt;&lt;td&gt;SystemTap&lt;&#x2F;td&gt;&lt;td&gt;良&lt;&#x2F;td&gt;&lt;td&gt;是&lt;&#x2F;td&gt;&lt;td&gt;低&lt;&#x2F;td&gt;&lt;td&gt;否&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;2006&lt;&#x2F;td&gt;&lt;td&gt;LTTng&lt;&#x2F;td&gt;&lt;td&gt;良&lt;&#x2F;td&gt;&lt;td&gt;否&lt;&#x2F;td&gt;&lt;td&gt;低&lt;&#x2F;td&gt;&lt;td&gt;否&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;2009&lt;&#x2F;td&gt;&lt;td&gt;Perf&#x2F;ftrace&lt;&#x2F;td&gt;&lt;td&gt;优&lt;&#x2F;td&gt;&lt;td&gt;否&lt;&#x2F;td&gt;&lt;td&gt;高&lt;&#x2F;td&gt;&lt;td&gt;是&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;2014&lt;&#x2F;td&gt;&lt;td&gt;BPF&lt;&#x2F;td&gt;&lt;td&gt;优&lt;&#x2F;td&gt;&lt;td&gt;是&lt;&#x2F;td&gt;&lt;td&gt;高&lt;&#x2F;td&gt;&lt;td&gt;是&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;
&lt;h3 id=&quot;xing-neng-di-de-yuan-yin&quot;&gt;性能低的原因&lt;&#x2F;h3&gt;
&lt;p&gt;Audit独立于kprobe、tracepoint之外的数据源，通过syscall和文件操作等内核源码上插入自定义的钩子函数实现监控，于2004年加入内核，相比于其他技术性能差&lt;&#x2F;p&gt;
&lt;h3 id=&quot;bpfji-zhu-de-you-shi&quot;&gt;BPF技术的优势&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;稳定：通过验证器，可防止错误引起的内核崩溃&lt;&#x2F;li&gt;
&lt;li&gt;免安装：无需安装，可动态加载和卸载&lt;&#x2F;li&gt;
&lt;li&gt;可编程控制：支持开发者插入自定义的代码逻辑&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;bpfde-lie-shi&quot;&gt;BPF的劣势&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;需要高版本的Linux内核，V3.x版本功能不全，V2.x无BPF支持。&lt;&#x2F;li&gt;
&lt;li&gt;低版本Linux使用原有audit或perf等实现&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;yong-bpfti-dai-auditde-fang-an&quot;&gt;用BPF替代Audit的方案&lt;&#x2F;h3&gt;
&lt;ol&gt;
&lt;li&gt;使用BPF实现已有linux audit子系统功能。实现细节见下一节&lt;&#x2F;li&gt;
&lt;li&gt;根据系统版本选择安装，老系统使用原有audit或perf，V4.x及以上系统使用BPF&lt;&#x2F;li&gt;
&lt;li&gt;提供自监测系统，监控和配置性能指标，超过指标后，执行对应缓解措施&lt;&#x2F;li&gt;
&lt;li&gt;提供实时通知机制，遇到配置项，通知其他接入系统协同完成对应缓解措施&lt;&#x2F;li&gt;
&lt;li&gt;提供docker内监测和多docker间聚合事件能力，尤其是cgroup和网络等事件，增强docker的审计功能&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;h3 id=&quot;bpfdui-linux-auditzi-xi-tong-shi-xian-xi-jie&quot;&gt;BPF对linux audit子系统实现细节&lt;&#x2F;h3&gt;
&lt;pre style=&quot;background-color:#f9f9f9;color:#111111;&quot;&gt;&lt;code&gt;&lt;span&gt;                   Agent        &lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;策略下发  |  事件聚合 |   通知协同  |  性能监测 &lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;                    BPF        &lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    Ring Buffer ↑    |     ↓ BPF Map    &lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;         System call | syscall 系统调用    挂载点&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;     VFS&#x2F;File system | 文件操作    挂载点&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;                  硬件驱动        &lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ol&gt;
&lt;li&gt;针对audit的监控syscall和文件操作，BPF也增加相同接入监控&lt;&#x2F;li&gt;
&lt;li&gt;Agent通过BPF map设置配置策略到BPF驱动，动态管控监控行为&lt;&#x2F;li&gt;
&lt;li&gt;通过RingBuffer将BPF驱动实时发送事件到监控应用agent&lt;&#x2F;li&gt;
&lt;li&gt;Agent分成4部分策略下发、事件聚合、通知协同、性能监测&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;h3 id=&quot;zhu-ji-shen-ji-xi-tong-liu-cheng&quot;&gt;主机审计系统流程&lt;&#x2F;h3&gt;
&lt;pre style=&quot;background-color:#f9f9f9;color:#111111;&quot;&gt;&lt;code&gt;&lt;span&gt;                  ↓&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;                策略下发&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;在后台服务中，管理员配置设计策略并下发&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;                  ↓&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    主机agent接收策略，写入BPF map&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;                  ↓&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        主机BPF驱动执行策略&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;                  ↓&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;BPF驱动收集系统调用syscal和文件系统操作事件&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;pre style=&quot;background-color:#f9f9f9;color:#111111;&quot;&gt;&lt;code&gt;&lt;span&gt;                事件聚合&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;在后台服务中，聚合分类这些事件&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;                  ↑&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;在后台服务中，收集多台主机上报的审计事件&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;                  ↑&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        由agent上报发送给后台服务&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;                  ↑&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;            事件内容写入Ring Buffer&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;                  ↑&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;由BPF驱动收集系统调用syscal和文件系统操作事件&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;                  ↑&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        主机agent根据下发策略要求&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;pre style=&quot;background-color:#f9f9f9;color:#111111;&quot;&gt;&lt;code&gt;&lt;span&gt;                通知协同&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;将聚合分类安全事件通知其他安全服务，如威胁狩猎分析&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;                  ↓&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        其他安全服务生成对应的安全策略&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;                  ↓&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        将安全策略通知系统审计服务&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;                  ↓&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    优化更新主机审计系统自身的安全策略&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;pre style=&quot;background-color:#f9f9f9;color:#111111;&quot;&gt;&lt;code&gt;&lt;span&gt;                性能监测&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    主机agent采集主机自身性能指标&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;                  ↓&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    根据下发策略扩大或减小监测挂载点&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;                  ↓&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    动态控制审计系统的对系统的负荷&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;sheng-ji-ti-huan-hou-de-you-yi-xiao-guo&quot;&gt;升级替换后的有益效果&lt;&#x2F;h3&gt;
&lt;ol&gt;
&lt;li&gt;高性能的收集安全信息&lt;&#x2F;li&gt;
&lt;li&gt;可动态加载的探针，动态分配系统开销&lt;&#x2F;li&gt;
&lt;li&gt;可兼容新旧系统的技术栈，适应老系统(老系统不支持新的技术)&lt;&#x2F;li&gt;
&lt;li&gt;可实时发现安全威胁，及时上报或紧急处理&lt;&#x2F;li&gt;
&lt;li&gt;可以与系统其他安全服务协同&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>终端资产的全面发现管理</title>
		<published>2022-04-13T00:00:00+00:00</published>
		<updated>2022-04-13T00:00:00+00:00</updated>
		<link href="https://jimluo.github.io/asset-discovery/" type="text/html"/>
		<id>https://jimluo.github.io/asset-discovery/</id>
		<content type="html">&lt;p&gt;终端资产的全面清理发现和管理是精细化管理也是安全办公生产的前提，&lt;&#x2F;p&gt;
&lt;p&gt;困难之处在于设备类型复杂(固定、移动、网络设备、摄像头、打印机等)，&lt;&#x2F;p&gt;
&lt;p&gt;人员角色多变赋予设备自身权限及可见度变化，&lt;&#x2F;p&gt;
&lt;p&gt;最后长时间使用，设备和人员的更替，再时间上追溯困难。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;wen-ti-zhong-dian-biao-xian-zai&quot;&gt;问题重点表现在&lt;&#x2F;h3&gt;
&lt;p&gt;主流资产发现及管理系统，使用的技术，主动扫描和被动流量发现各自都有缺陷&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;主动扫描发现不了未开机和休眠资产设备&lt;&#x2F;li&gt;
&lt;li&gt;被动流量分析发现不了数据未经过核心交换机的设备（因为被动流量分析的服务设备接在核心交换机上，见下图）&lt;&#x2F;li&gt;
&lt;li&gt;被动流量分析发现不了分析前接入的设备&lt;&#x2F;li&gt;
&lt;li&gt;设备资产间的在时间上的关系无法确定，也就不能评估出安全风险&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;常用技术名词概念&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;终端资产：用户单位的电脑。在安全业务上，用于对安全问题的物理定位，及时找到机器和操作人员&lt;&#x2F;li&gt;
&lt;li&gt;ARP地址解析协议：根据IP地址获取物理mac地址的协议&lt;&#x2F;li&gt;
&lt;li&gt;ARP表：交换机中IP与MAC地址对应关系缓存表&lt;&#x2F;li&gt;
&lt;li&gt;SNMP OIDS：交换机和路由器中缓存的设备信息表&lt;&#x2F;li&gt;
&lt;li&gt;NetFlow表：交换机和路由器中缓存的设备外联流量信息&lt;&#x2F;li&gt;
&lt;li&gt;DHCP服务：动态分配IP地址给刚入网的设备，保留了所有入网设备的信息。每台设备使用的IP过期后，再定期续租申请。&lt;&#x2F;li&gt;
&lt;li&gt;DNS服务：将域名解析为可以访问的IP，保留了终端设备的请求网络信息&lt;&#x2F;li&gt;
&lt;li&gt;网络设备：交换机和路由器。其存有ARP表、路由表、SNMP OIDS信息，NetFlow表&lt;&#x2F;li&gt;
&lt;li&gt;服务设备：DHCP服务和DNS服务等，其存有设备的网络和机器信息&lt;&#x2F;li&gt;
&lt;li&gt;终端设备：电脑的设备制造商、操作系厂商、常用软件和使用时间上的规律&lt;&#x2F;li&gt;
&lt;li&gt;主动扫描：轮询全网每一台终端，发起预制的网络请求，根据收到的响应判断终端的设备信息&lt;&#x2F;li&gt;
&lt;li&gt;被动流量分析：镜像连接在核心交换机上，根据网络所有设备的流量信息，分析访问关系和部分设备信息&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;h3 id=&quot;quan-mian-fa-xian-guan-li-de-gong-zuo-liu-cheng&quot;&gt;全面发现管理的工作流程&lt;&#x2F;h3&gt;
&lt;h4 id=&quot;fa-xian&quot;&gt;发现&lt;&#x2F;h4&gt;
&lt;p&gt;基于3种设备(网络设备、服务设备、终端设备)和2种行为(主动、被动)获取设备机器信息和网络连通信息。
尤其是发生的时间和外联关系。持续监控设备的连接断开，获取实时信息而不中断业务。&lt;&#x2F;p&gt;
&lt;p&gt;通过网络设备信息，整合主动与被动发现信息&lt;&#x2F;p&gt;
&lt;p&gt;通过服务信息，整合流量与设备信息&lt;&#x2F;p&gt;
&lt;p&gt;其特点是&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;发现未开机和休眠资产设备&lt;&#x2F;li&gt;
&lt;li&gt;发现网络流量未经过核心交换机的设备&lt;&#x2F;li&gt;
&lt;li&gt;发现分析前接入的设备&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;2种行为\3种设备&lt;&#x2F;th&gt;&lt;th&gt;网络设备&lt;&#x2F;th&gt;&lt;th&gt;服务设备&lt;&#x2F;th&gt;&lt;th&gt;终端设备&lt;&#x2F;th&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;thead&gt;&lt;tbody&gt;
&lt;tr&gt;&lt;td&gt;主动扫描和获取(范围大，信息多)&lt;&#x2F;td&gt;&lt;td&gt;设备外联时间和位置&lt;&#x2F;td&gt;&lt;td&gt;设备的网络和机器信息&lt;&#x2F;td&gt;&lt;td&gt;运行在设备的代理(如杀毒软件）&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;获取全面的机器信息，可选择不使用，不影响用户业务&lt;&#x2F;td&gt;&lt;td&gt;被动监控(实时性高)&lt;&#x2F;td&gt;&lt;td&gt;全网流量信息&lt;&#x2F;td&gt;&lt;td&gt;设备的连接和断开&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;
&lt;h4 id=&quot;fa-xian-yuan-li&quot;&gt;发现原理：&lt;&#x2F;h4&gt;
&lt;ol&gt;
&lt;li&gt;主动获取网络设备和服务设备中存在的IP设备及流量信息，并整合两者信息，全时间段的信息&lt;&#x2F;li&gt;
&lt;li&gt;被动获取全网流量信息，当前时间段的信息&lt;&#x2F;li&gt;
&lt;li&gt;比较找出存在于主动信息#1中而不存在于被动信息#2中的设备&lt;&#x2F;li&gt;
&lt;li&gt;分析这些设备流量的发生时间&lt;&#x2F;li&gt;
&lt;li&gt;判断发生时间暂时的，只是最近没有出现，是未开机和休眠&lt;&#x2F;li&gt;
&lt;li&gt;判断发生时间是曾经有过，现在一直没有出现，是以前接入，现在可能已不存在&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;h4 id=&quot;fen-lei&quot;&gt;分类&lt;&#x2F;h4&gt;
&lt;p&gt;按照设备类型、操作系统、时间分类，并在时间上聚合不同设备间的网络访问关系，丰富上下文&lt;&#x2F;p&gt;
&lt;h4 id=&quot;ping-gu&quot;&gt;评估&lt;&#x2F;h4&gt;
&lt;ul&gt;
&lt;li&gt;识别安全风险，评估合规达标程度&lt;&#x2F;li&gt;
&lt;li&gt;最终获得对网络操作风险的态势感知，使用全面的上下文评估策略遵从性和设备安全姿态&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;zong-jie-qi-te-dian&quot;&gt;总结其特点&lt;&#x2F;h3&gt;
&lt;ol&gt;
&lt;li&gt;更全面地发现资产
&lt;ul&gt;
&lt;li&gt;发现未开机和休眠资产设备&lt;&#x2F;li&gt;
&lt;li&gt;网络流量未经过核心交换机的设备&lt;&#x2F;li&gt;
&lt;li&gt;发现分析前接入的设备&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;更易于分类，基于空间和时间的上下文&lt;&#x2F;li&gt;
&lt;li&gt;更准确地评估合规的达标度，识别安全风险&lt;&#x2F;li&gt;
&lt;li&gt;不中断不影响用户业务&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>基于Rust和BPF技术的网络TCP水印</title>
		<published>2022-03-23T00:00:00+00:00</published>
		<updated>2022-03-23T00:00:00+00:00</updated>
		<link href="https://jimluo.github.io/net-token/" type="text/html"/>
		<id>https://jimluo.github.io/net-token/</id>
		<content type="html">&lt;p&gt;网络水印用于防DDoS攻击和网络流量等安全领域，原理是给报文增加特征信息，基于TCP options的增加字段不会被防火墙等修改去除，本文正是使用BPF和Rust来达到高效的实现的具体描述。&lt;sup class=&quot;footnote-reference&quot;&gt;&lt;a href=&quot;#1&quot;&gt;1&lt;&#x2F;a&gt;&lt;&#x2F;sup&gt; 源码参见[]
&lt;strong&gt;保护知识产权的图片水印不在此列&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;BPF驱动使用c开发&lt;&#x2F;li&gt;
&lt;li&gt;用户态的配置和加载器使用rust和libbpf-rs加速开发&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;yi-lai-feng-zhuang-guan-xi&quot;&gt;依赖封装关系&lt;&#x2F;h2&gt;
&lt;p&gt;&lt;img src=&quot;..&#x2F;images&#x2F;net-token&#x2F;libbpf-rs-dependency.png&quot; alt=&quot;用户态关系图&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;基于libbpf-rs开发, libbpf-rs提供用于开发的API抽象，包括驱动object和其静态程序、通讯、挂载上程序的资源抽象&lt;&#x2F;p&gt;
&lt;p&gt;同时libbpf-sys封装了unsafe的libbpf和libelf、zlib，其中核心是基于内核的一部分libbpf，c开发的静态链接库。细节稠密的api，也加载并解析驱动elf文件使用的动态链接的libelf和zlib&lt;&#x2F;p&gt;
&lt;p&gt;基于libbpf-cargo脚手架生成工程目录，build命令调用gen和make完成&lt;&#x2F;p&gt;
&lt;h2 id=&quot;gong-cheng-mu-lu-jie-gou&quot;&gt;工程目录结构&lt;&#x2F;h2&gt;
&lt;p&gt;由libbpf-cargo自动生成的骨架目录的代码&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;sh&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-sh &quot;&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;netoken\&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;src\&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;bpf&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;\ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;                 &#x2F;&#x2F;驱动&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;.output&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;\ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;           &#x2F;&#x2F;脚手架自动生成&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;netoken.skel.rs&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;  &#x2F;&#x2F;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;libbpf_rs&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;netoken.c&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;              ^&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;vmlinux.h               &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;|&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;main.rs&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;  &#x2F;&#x2F;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;libbpf_rs    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;|&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;build.rs&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;     &#x2F;&#x2F;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;libbpf_cargo-+&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;Cargo.toml&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;libbpf-rs\&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;.git&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;libbpf-rs\&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;libbpf-cargo\&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Cargo.toml中可配置依赖libbpf-xxx的具体位置&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;toml&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-toml &quot;&gt;&lt;code class=&quot;language-toml&quot; data-lang=&quot;toml&quot;&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;dependencies&lt;&#x2F;span&gt;&lt;span&gt;]&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;libbpf-rs &lt;&#x2F;span&gt;&lt;span&gt;= { &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;path &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;..&#x2F;libbpf-rs&#x2F;libbpf-rs&amp;quot; &lt;&#x2F;span&gt;&lt;span&gt;}&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;build-dependencies&lt;&#x2F;span&gt;&lt;span&gt;]&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;libbpf-cargo &lt;&#x2F;span&gt;&lt;span&gt;= { &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;path &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;..&#x2F;libbpf-rs&#x2F;libbpf-cargo&amp;quot; &lt;&#x2F;span&gt;&lt;span&gt;}&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;gu-jia-dai-ma-sheng-cheng-liu-cheng&quot;&gt;骨架代码生成流程&lt;&#x2F;h2&gt;
&lt;ol&gt;
&lt;li&gt;用户工程 build.rs-&amp;gt;libbpf-cargo.rs SkeletonBuilder() &lt;em&gt;.bpf.c =&amp;gt; .output&#x2F;&lt;&#x2F;em&gt;.skel.rs&lt;&#x2F;li&gt;
&lt;li&gt;用户工程生成的*.skel.rs流程: 
&lt;ol&gt;
&lt;li&gt;obj: DATA [u8]&lt;&#x2F;li&gt;
&lt;li&gt;&lt;em&gt;SkelBuilder()-&amp;gt;Open&lt;&#x2F;em&gt;Skel()-&amp;gt;*Skel(), progs&#x2F;maps&#x2F;links&lt;&#x2F;li&gt;
&lt;li&gt;build_skel_config()-&amp;gt;ObjectSkeletonConfigBuilder::new(DATA)&lt;&#x2F;li&gt;
&lt;li&gt;builder.name(&lt;em&gt;&lt;strong&gt;).map(&amp;quot;&amp;quot;).prog(&amp;quot;handle_&lt;&#x2F;strong&gt;&lt;&#x2F;em&gt;&amp;quot;).build()&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;libbpf-rs 提供用户常用工具
&lt;ol&gt;
&lt;li&gt;object&#x2F;skelton&lt;&#x2F;li&gt;
&lt;li&gt;prog&#x2F;map&#x2F;link&lt;&#x2F;li&gt;
&lt;li&gt;iter&#x2F;print&#x2F;query&#x2F;util&lt;&#x2F;li&gt;
&lt;li&gt;perf&#x2F;ringbuf&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;libbpf-cargo 提供cargo build时自动生成skel，gen&#x2F;make&lt;&#x2F;li&gt;
&lt;li&gt;执行*.skel.rs流程
&lt;ol&gt;
&lt;li&gt;TcSkelBuilder.open()-&amp;gt;OpenTcSkel(obj, config)&lt;&#x2F;li&gt;
&lt;li&gt;OpenTcSkel.load() &amp;gt;&amp;gt; bpf_object__load_skeleton(config)&lt;&#x2F;li&gt;
&lt;li&gt;OpenTcSkel.load()-&amp;gt;TcSkel(obj,config, Tclinks())&lt;&#x2F;li&gt;
&lt;li&gt;OpenTcSkel.progs()-&amp;gt;OpenTcProgs(obj)&lt;&#x2F;li&gt;
&lt;li&gt;OpenTcSkel.maps()-&amp;gt;OpenTcMaps()&lt;&#x2F;li&gt;
&lt;li&gt;OpenTcSkel.data()-&amp;gt;ffi::c_void()&lt;&#x2F;li&gt;
&lt;li&gt;TcSkel.attach() &amp;gt;&amp;gt; bpf_object__attach_skeleton(config)&lt;&#x2F;li&gt;
&lt;li&gt;TcSkel.links = TcLinks(handle_tc)&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;libbpf.h typedef struct bpf_object_skeleton bos
&lt;ul&gt;
&lt;li&gt;libbpf将内核bpf_xxx封装到3个struct和4个阶段phase的api，隐藏内核极多的细节&lt;&#x2F;li&gt;
&lt;li&gt;error&#x2F;print&#x2F;open_opts&#x2F;&lt;&#x2F;li&gt;
&lt;li&gt;bpf_object_open_[buffer&#x2F;mem&#x2F;xattr]xxx&lt;&#x2F;li&gt;
&lt;li&gt;bpf_object__load&#x2F;__next&#x2F;__set&#x2F;pin&#x2F;unpin&lt;&#x2F;li&gt;
&lt;li&gt;bpf_[program&#x2F;map&#x2F;link]__set&#x2F;load&#x2F;fd&#x2F;xxx;__attach_xxx&lt;&#x2F;li&gt;
&lt;li&gt;bpf_map__[set&#x2F;get&#x2F;find_map]&lt;&#x2F;li&gt;
&lt;li&gt;bpf_perf&#x2F;kprob&#x2F;uprobe&#x2F;tracepoint&#x2F;link_xdp&#x2F;tc_hook&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;h2 id=&quot;yong-hu-tai-jia-zai-liu-cheng&quot;&gt;用户态加载流程&lt;&#x2F;h2&gt;
&lt;p&gt;&lt;img src=&quot;..&#x2F;images&#x2F;net-token&#x2F;libbpf-rs-usermode.png&quot; alt=&quot;用户态关系图&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;解析命令行参数中的网卡名，并获取其系统中的网卡号&lt;&#x2F;li&gt;
&lt;li&gt;使用生成的skelBuilder逐步获取驱动object的内存文件描述符fd&lt;&#x2F;li&gt;
&lt;li&gt;使用生成的hookBuilder创建并将自己hook在网络出入口egress&#x2F;ingress。本程序只使用了egress&lt;&#x2F;li&gt;
&lt;li&gt;egress加载到内核，开始执行&lt;&#x2F;li&gt;
&lt;li&gt;查询tc的egress上的信息&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span&gt;() -&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;Result&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;()&amp;gt; {&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; 命令行参数解析&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; opts &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;Command::parse();&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; 去掉系统的内存限制&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;bump_memlock_rlimit&lt;&#x2F;span&gt;&lt;span&gt;()&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;?&lt;&#x2F;span&gt;&lt;span&gt;;&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; 从Skel里获取信息，从opts里获取ifindex&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; builder &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;netokenSkelBuilder::default();&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; open &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; builder.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;open&lt;&#x2F;span&gt;&lt;span&gt;()&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;?&lt;&#x2F;span&gt;&lt;span&gt;;&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; skel &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; open.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;load&lt;&#x2F;span&gt;&lt;span&gt;()&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;?&lt;&#x2F;span&gt;&lt;span&gt;;&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; fd &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; skel.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;progs&lt;&#x2F;span&gt;&lt;span&gt;().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;handle_tc&lt;&#x2F;span&gt;&lt;span&gt;().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;fd&lt;&#x2F;span&gt;&lt;span&gt;();&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; ifidx &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;nix::net::if_::if_nametoindex(opts.iface.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;as_str&lt;&#x2F;span&gt;&lt;span&gt;())&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;? as &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;i32&lt;&#x2F;span&gt;&lt;span&gt;;&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;let mut&lt;&#x2F;span&gt;&lt;span&gt; tc_builder &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;TcHookBuilder::new();&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    tc_builder&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;fd&lt;&#x2F;span&gt;&lt;span&gt;(fd)&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;ifindex&lt;&#x2F;span&gt;&lt;span&gt;(ifidx)&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;replace&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;true&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;handle&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;priority&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;);&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; 挂载驱动到TC的egress接口上&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;let mut&lt;&#x2F;span&gt;&lt;span&gt; egress &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; tc_builder.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;hook&lt;&#x2F;span&gt;&lt;span&gt;(TC_EGRESS);&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; 执行attach，驱动开始工作&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span&gt; opts.attach {&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;if let &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;Err&lt;&#x2F;span&gt;&lt;span&gt;(e) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; egress.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;attach&lt;&#x2F;span&gt;&lt;span&gt;() {&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;            bail!(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;failed to attach egress hook {}&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, e);&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        }&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    }&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; 执行destory，销毁驱动&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span&gt; opts.destroy {&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;if let &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;Err&lt;&#x2F;span&gt;&lt;span&gt;(e) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; egress.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;detach&lt;&#x2F;span&gt;&lt;span&gt;() {&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;            println!(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;failed to detach egress hook &lt;&#x2F;span&gt;&lt;span&gt;{}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, e);&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        }&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;if let &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;Err&lt;&#x2F;span&gt;&lt;span&gt;(e) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; egress.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;destroy&lt;&#x2F;span&gt;&lt;span&gt;() {&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;            println!(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;failed to destroy &lt;&#x2F;span&gt;&lt;span&gt;{}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, e);&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        }&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    }&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; 执行query，查询执行驱动的id&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;match&lt;&#x2F;span&gt;&lt;span&gt; egress.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;query&lt;&#x2F;span&gt;&lt;span&gt;() {&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;Err&lt;&#x2F;span&gt;&lt;span&gt;(e) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;println!(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;failed to find egress hook: &lt;&#x2F;span&gt;&lt;span&gt;{}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, e),&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;Ok&lt;&#x2F;span&gt;&lt;span&gt;(prog_id) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;println!(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;found egress hook prog_id: &lt;&#x2F;span&gt;&lt;span&gt;{}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, prog_id),&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    }&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; 执行监听perf，收到数据后进入handle_event，收到错误丢包进入handle_lost_events&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; perf &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;PerfBufferBuilder::new(skel.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;maps_mut&lt;&#x2F;span&gt;&lt;span&gt;().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;events&lt;&#x2F;span&gt;&lt;span&gt;())&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;sample_cb&lt;&#x2F;span&gt;&lt;span&gt;(handle_event)&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;lost_cb&lt;&#x2F;span&gt;&lt;span&gt;(handle_lost_events)&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;build&lt;&#x2F;span&gt;&lt;span&gt;()&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;?&lt;&#x2F;span&gt;&lt;span&gt;;&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; 100ms一次的轮询驱动，有事件后进入上面的event&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;loop &lt;&#x2F;span&gt;&lt;span&gt;{&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        perf.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;poll&lt;&#x2F;span&gt;&lt;span&gt;(Duration::from_millis(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;100&lt;&#x2F;span&gt;&lt;span&gt;))&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;?&lt;&#x2F;span&gt;&lt;span&gt;;&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    }&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;Ok&lt;&#x2F;span&gt;&lt;span&gt;(())&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;}&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;lei-si-yu-ji-yu-tcgong-ju-shi-xian&quot;&gt;类似于基于tc工具实现&lt;&#x2F;h3&gt;
&lt;pre data-lang=&quot;sh&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-sh &quot;&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; tc qdisc add dev xxx &lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; tc filter &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;add|change|replace&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; dev xxx &lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; tc qdisc show dev xxx&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;qu-dong-liu-cheng&quot;&gt;驱动流程&lt;&#x2F;h2&gt;
&lt;p&gt;&lt;img src=&quot;..&#x2F;images&#x2F;net-token&#x2F;libbpf-rs-kernelmode.png&quot; alt=&quot;用户态关系图&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;检查入参struct __sk_buff是否是tcp报文，依次从2层解析判断到4层&lt;&#x2F;li&gt;
&lt;li&gt;检查tcp报文是否是握手syn包。syn包携带options用于连接双方协商功能&lt;&#x2F;li&gt;
&lt;li&gt;读取policy map，获得不同策略下的token&lt;&#x2F;li&gt;
&lt;li&gt;加入token这个option到syn包中&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; 驱动入口，数据已由内核组装为__sk_buff&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;SEC(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;tc&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;handle_tc&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;struct &lt;&#x2F;span&gt;&lt;span&gt;__sk_buff* ctx) {&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    struct pkthdr pkt;&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    RET_IF(pkt_check(ctx, &amp;amp;pkt) != RET_OK);&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    RET_IF(pkt.tcp-&amp;gt;syn != 1 || pkt.tcp-&amp;gt;ack != 0);&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    update_token_by_policy();&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    RET_IF(extend_options_token(ctx, &amp;amp;pkt, epp_token) != RET_OK);&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    return TC_ACT_OK;&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;}&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; 检查是否tcp包&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;BPF_INLNE int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;pkt_check&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;struct &lt;&#x2F;span&gt;&lt;span&gt;__sk_buff* ctx, struct pkthdr* pkt) {&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    pkt-&amp;gt;data = (void*)(long)ctx-&amp;gt;data;&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    pkt-&amp;gt;data_end = (void*)(long)ctx-&amp;gt;data_end;&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    pkt-&amp;gt;eth = pkt-&amp;gt;data;&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    pkt-&amp;gt;ipv4 = pkt-&amp;gt;data + sizeof(struct ethhdr);&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    RET_ERR_IF(pkt-&amp;gt;eth + 1 &amp;gt; (struct ethhdr*)(pkt-&amp;gt;data_end));&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    RET_ERR_IF(pkt-&amp;gt;eth-&amp;gt;h_proto != bpf_constant_htons(ETH_P_IP));&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    RET_ERR_IF(pkt-&amp;gt;ipv4 + 1 &amp;gt; (struct iphdr*)(pkt-&amp;gt;data_end));&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    RET_ERR_IF(pkt-&amp;gt;ipv4-&amp;gt;protocol != IPPROTO_TCP);&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    pkt-&amp;gt;tcp = pkt-&amp;gt;data + sizeof(struct ethhdr) + (pkt-&amp;gt;ipv4-&amp;gt;ihl * 4);&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    RET_ERR_IF(pkt-&amp;gt;tcp + 1 &amp;gt; (struct tcphdr*)(pkt-&amp;gt;data_end));&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    return RET_OK;&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;}&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; 增加tcp的options的token option，对网卡以支持的offload计算checksum的，注释掉加快执行&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;BPF_INLNE int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;extend_options_token&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;struct &lt;&#x2F;span&gt;&lt;span&gt;__sk_buff* ctx, struct pkthdr* pkt, u64 token) {&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    u32 data_end = ctx-&amp;gt;len; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; 非线性包总长&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    u16 sz = sizeof(token);&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    pkt-&amp;gt;ipv4-&amp;gt;tot_len = bpf_htons(pkt-&amp;gt;ipv4-&amp;gt;ihl * 4 + pkt-&amp;gt;tcp-&amp;gt;doff * 4 + sz);&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    pkt-&amp;gt;tcp-&amp;gt;doff = pkt-&amp;gt;tcp-&amp;gt;doff + sz &#x2F; 4;&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    RET_IF(bpf_skb_change_tail(ctx, ctx-&amp;gt;len + sz, 0));&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    RET_IF(bpf_skb_store_bytes(ctx, data_end, &amp;amp;token, sizeof(token), 0));&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    RET_IF(bpf_l3_csum_replace(ctx, IP_CSUM_OFFSET, 0, bpf_constant_htons(sz), 0));&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; RET_IF(bpf_l4_csum_replace(ctx, TCP_CSUM_OFFSET, 0, sz &#x2F; 4, BPF_F_PSEUDO_HDR | sizeof(u8)))&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    u16 csum = bpf_csum_diff(0, 0, (u32*)&amp;amp;token, sizeof(token), 0); &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; 2 tcp pseudo&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; RET_IF(bpf_l4_csum_replace(ctx, TCP_CSUM_OFFSET, 0, csum, 0));&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    update_metrics();&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    return RET_OK;&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;}&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;kuo-zhan-xdp&quot;&gt;扩展xdp&lt;&#x2F;h2&gt;
&lt;p&gt;libbpf-rs只提供了一个attach_xdp接口，其他xdp独立在libbpf项目中实现&lt;&#x2F;p&gt;
&lt;p&gt;需要af_xdp高级功能的可以试试
&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;chenhengqi&#x2F;libxdp-rs&quot;&gt;libxdp-rs&lt;&#x2F;a&gt;
由腾讯员工开发，主要用rust binding的&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;xdp-project&#x2F;xdp-tools&quot;&gt;xdp-tools&lt;&#x2F;a&gt;的功能，其中就有独立开发的libxdp&lt;&#x2F;p&gt;
&lt;h2 id=&quot;ayadeng-qi-ta-rustde-bpfxiang-mu-jian-shu&quot;&gt;aya等其他rust的bpf项目简述&lt;&#x2F;h2&gt;
&lt;p&gt;libpf-rs的复杂度低，开发起点也低，代码中unsafe很少。aya和redbpf就更高维了，能力和野心都很大，难度自然也就大了&lt;&#x2F;p&gt;
&lt;p&gt;首先用rust写驱动，没有std，更多的是unsafe和MaybeUninit，心里上畏惧。&lt;&#x2F;p&gt;
&lt;p&gt;再者成功的开发案例也不多，如果业务复杂度很高，倒是可以考虑。但也别担心，内核5.20加入rust后，可以开始了。&lt;&#x2F;p&gt;
&lt;p&gt;驱动很能体现rust的表现力&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span&gt;#![&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;no_std&lt;&#x2F;span&gt;&lt;span&gt;] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; &lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;#![&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;no_main&lt;&#x2F;span&gt;&lt;span&gt;] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; &lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;use &lt;&#x2F;span&gt;&lt;span&gt;aya_bpf::{ macros::xdp, bindings::xdp_action, programs::XdpContext,&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    maps::{HashMap, PerfEventArray}, };&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;use &lt;&#x2F;span&gt;&lt;span&gt;aya_log_ebpf::info;&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;use &lt;&#x2F;span&gt;&lt;span&gt;myapp_common::PacketLog;&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;#[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;map&lt;&#x2F;span&gt;&lt;span&gt;(name &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;EVENTS&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;)]  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; map macro&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;static mut &lt;&#x2F;span&gt;&lt;span&gt;EVENTS: PerfEventArray&amp;lt;ip_src&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    PerfEventArray::&amp;lt;ip_src&amp;gt;::with_max_entries(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;1024&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;);&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;#[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;xdp&lt;&#x2F;span&gt;&lt;span&gt;(name&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;myapp&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;)] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; hook点用macro实现，很rust&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;pub fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;myapp&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;ctx&lt;&#x2F;span&gt;&lt;span&gt;: XdpContext) -&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;u32 &lt;&#x2F;span&gt;&lt;span&gt;{&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; match匹配xdp_ctx也很直观&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;match unsafe &lt;&#x2F;span&gt;&lt;span&gt;{ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;try_myapp&lt;&#x2F;span&gt;&lt;span&gt;(ctx) } {&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;Ok&lt;&#x2F;span&gt;&lt;span&gt;(ret) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt; ret,&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;Err&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;_&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;xdp_action::XDP_ABORTED,&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    }&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;}&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;unsafe fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;try_myapp&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;ctx&lt;&#x2F;span&gt;&lt;span&gt;: XdpContext) -&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;Result&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;u32&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;u32&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; {&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; 方便的printk宏&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    info!(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span&gt;ctx, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;received a packet&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;);&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;unsafe &lt;&#x2F;span&gt;&lt;span&gt;{&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        EVENTS.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;output&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span&gt;ctx, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span&gt;ip_src, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;); &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; 隐去ip_src的解析过程...&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    }&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;Ok&lt;&#x2F;span&gt;&lt;span&gt;(xdp_action::XDP_PASS)&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;}&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;#[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;panic_handler&lt;&#x2F;span&gt;&lt;span&gt;] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; hook在异常上&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;panic&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;_info&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span&gt;core::panic::PanicInfo) -&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;! &lt;&#x2F;span&gt;&lt;span&gt;{&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;unsafe &lt;&#x2F;span&gt;&lt;span&gt;{ core::hint::unreachable_unchecked() }&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;}&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;yong-hu-tai&quot;&gt;用户态&lt;&#x2F;h3&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span&gt;#[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;tokio&lt;&#x2F;span&gt;&lt;span&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span&gt;]&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;async &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span&gt;() -&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;Result&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;(), anyhow::Error&amp;gt; {&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;let mut&lt;&#x2F;span&gt;&lt;span&gt; bpf &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;Bpf::load(include_bytes_aligned!(&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;..&#x2F;..&#x2F;target&#x2F;bpfel-unknown-none&#x2F;release&#x2F;myapp&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    ))&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;?&lt;&#x2F;span&gt;&lt;span&gt;;&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; program: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;mut&lt;&#x2F;span&gt;&lt;span&gt; Xdp &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; bpf.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;program_mut&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;xdp&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;unwrap&lt;&#x2F;span&gt;&lt;span&gt;().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;try_into&lt;&#x2F;span&gt;&lt;span&gt;()&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;?&lt;&#x2F;span&gt;&lt;span&gt;;&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    program.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;load&lt;&#x2F;span&gt;&lt;span&gt;()&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;?&lt;&#x2F;span&gt;&lt;span&gt;;&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    program.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;attach&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span&gt;opt.iface, XdpFlags::default())&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;context&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;failed to attach the XDP program with default flags&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;?&lt;&#x2F;span&gt;&lt;span&gt;;&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;...&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;let mut&lt;&#x2F;span&gt;&lt;span&gt; perf_array &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;AsyncPerfEventArray::try_from(bpf.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;map_mut&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;EVENTS&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;?&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;?&lt;&#x2F;span&gt;&lt;span&gt;;&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; 下面还可以封装简化下&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;for&lt;&#x2F;span&gt;&lt;span&gt; cpu_id &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;in &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;online_cpus&lt;&#x2F;span&gt;&lt;span&gt;()&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;? &lt;&#x2F;span&gt;&lt;span&gt;{ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; iter vec&amp;lt;u32&amp;gt; cpus&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;let mut&lt;&#x2F;span&gt;&lt;span&gt; buf &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; perf_array.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;open&lt;&#x2F;span&gt;&lt;span&gt;(cpu_id, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;None&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;?&lt;&#x2F;span&gt;&lt;span&gt;;&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        task::spawn(async &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;move &lt;&#x2F;span&gt;&lt;span&gt;{&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;let mut&lt;&#x2F;span&gt;&lt;span&gt; buffers &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;..&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;10&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;                .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;map&lt;&#x2F;span&gt;&lt;span&gt;(|_| BytesMut::with_capacity(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;1024&lt;&#x2F;span&gt;&lt;span&gt;))&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;                .collect::&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;Vec&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;_&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;&amp;gt;();&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;loop &lt;&#x2F;span&gt;&lt;span&gt;{&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; events &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; buf.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;read_events&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;mut&lt;&#x2F;span&gt;&lt;span&gt; buffers).await.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;unwrap&lt;&#x2F;span&gt;&lt;span&gt;();&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;for&lt;&#x2F;span&gt;&lt;span&gt; i &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;in &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;..&lt;&#x2F;span&gt;&lt;span&gt;events.read {&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;                    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; buf &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;mut&lt;&#x2F;span&gt;&lt;span&gt; buffers[i];&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;                    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; ptr &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; buf.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;as_ptr&lt;&#x2F;span&gt;&lt;span&gt;() &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;as &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;*const&lt;&#x2F;span&gt;&lt;span&gt; ip_src;&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;                    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; data &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;unsafe &lt;&#x2F;span&gt;&lt;span&gt;{ ptr.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;read_unaligned&lt;&#x2F;span&gt;&lt;span&gt;() };&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;                    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; src_addr &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;net::Ipv4Addr::from(data.ip_src);&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;                    println!(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;LOG: SRC &lt;&#x2F;span&gt;&lt;span&gt;{}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;, ACTION &lt;&#x2F;span&gt;&lt;span&gt;{}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, src_addr, data.action);&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;                }&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;            }&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        });&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    }&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    signal::ctrl_c().await.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;expect&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;failed to listen for event&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;);&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;Ok&lt;&#x2F;span&gt;&lt;span&gt;::&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;_&lt;&#x2F;span&gt;&lt;span&gt;, anyhow::Error&amp;gt;(())&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;}&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;以上只是一小部分，还有更多的支持&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Probes&lt;&#x2F;li&gt;
&lt;li&gt;Tracepoints&lt;&#x2F;li&gt;
&lt;li&gt;Socket Programs&lt;&#x2F;li&gt;
&lt;li&gt;Classifiers&lt;&#x2F;li&gt;
&lt;li&gt;Cgroups&lt;&#x2F;li&gt;
&lt;li&gt;XDP&lt;&#x2F;li&gt;
&lt;li&gt;LSM&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;hr &#x2F;&gt;
&lt;p&gt;&lt;em&gt;&lt;strong&gt;以下作为API参考&lt;&#x2F;strong&gt;&lt;&#x2F;em&gt;&lt;&#x2F;p&gt;
&lt;h3 id=&quot;libbpf-rsde-api&quot;&gt;libbpf-rs的api&lt;&#x2F;h3&gt;
&lt;pre data-lang=&quot;c&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-c &quot;&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;struct &lt;&#x2F;span&gt;&lt;span&gt;bpf_map_skeleton { &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;name, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;**&lt;&#x2F;span&gt;&lt;span&gt;map }&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;struct &lt;&#x2F;span&gt;&lt;span&gt;bpf_prog_skeleton { &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;name, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;**&lt;&#x2F;span&gt;&lt;span&gt;prog }&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;struct &lt;&#x2F;span&gt;&lt;span&gt;bpf_object_skeleton { &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;**&lt;&#x2F;span&gt;&lt;span&gt;obj, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;maps&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(skel)&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;progs&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(skel) &lt;&#x2F;span&gt;&lt;span&gt;}&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;   &lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;bpf_object__open_skeleton&lt;&#x2F;span&gt;&lt;span&gt;(bos &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;s&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;opts&lt;&#x2F;span&gt;&lt;span&gt;);&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;bpf_object__load_skeleton&lt;&#x2F;span&gt;&lt;span&gt;(bos &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;s&lt;&#x2F;span&gt;&lt;span&gt;);&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;bpf_object__attach_skeleton&lt;&#x2F;span&gt;&lt;span&gt;(bos &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;s&lt;&#x2F;span&gt;&lt;span&gt;);&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;void &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;bpf_object__detach_skeleton&lt;&#x2F;span&gt;&lt;span&gt;(bos &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;s&lt;&#x2F;span&gt;&lt;span&gt;);&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;void &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;bpf_object__destroy_skeleton&lt;&#x2F;span&gt;&lt;span&gt;(bos &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;s&lt;&#x2F;span&gt;&lt;span&gt;);&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;build-rs-zi-dong-sheng-cheng-dai-ma-mo-ban-tc-skel-rs&quot;&gt;build.rs 自动生成代码模板 tc.skel.rs&lt;&#x2F;h3&gt;
&lt;p&gt;最终返给用户TcSkel, 包含progs、maps、data
map中的字段根据bpf.c中map生成
call-&amp;gt;libbpf-cargo::lib.rs::SkeletonBuilder().build_generate(&amp;amp;skel)&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rs&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-rs &quot;&gt;&lt;code class=&quot;language-rs&quot; data-lang=&quot;rs&quot;&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;pub struct &lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    TcSkelBuilder.ObjectBuilder,&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    OpenTcSkel.OpenObject,&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    TcSkel.Object,&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    OpenTcProgs.OpenObject,&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    TcProgs.Object,&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    OpenTcMaps.OpenObject,&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    TcMaps.Object,&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    TcLinks.Option&amp;lt;Link&amp;gt;,&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;TcSkelBuilder.open()-&amp;gt;OpenTcSkel(obj, config)&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;OpenTcSkel.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;load&lt;&#x2F;span&gt;&lt;span&gt;() &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;bpf_object__load_skeleton&lt;&#x2F;span&gt;&lt;span&gt;(config)&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;OpenTcSkel.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;load&lt;&#x2F;span&gt;&lt;span&gt;()-&amp;gt;TcSkel(obj,config, Tclinks())&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    OpenTcSkel.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;progs&lt;&#x2F;span&gt;&lt;span&gt;()-&amp;gt;OpenTcProgs(obj)&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    OpenTcSkel.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;maps&lt;&#x2F;span&gt;&lt;span&gt;()-&amp;gt;OpenTcMaps()&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    OpenTcSkel.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;data&lt;&#x2F;span&gt;&lt;span&gt;()-&amp;gt;ffi::c_void()&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;TcSkel.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;attach&lt;&#x2F;span&gt;&lt;span&gt;() &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;bpf_object__attach_skeleton&lt;&#x2F;span&gt;&lt;span&gt;(config)&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;TcSkel.links &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; TcLinks(handle_tc)&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;TcProgs.handle_tc&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;TcMaps.[ports、data、rodata]&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;bindings-rs-zi-dong-sheng-cheng-by-rust-bindgen&quot;&gt;bindings.rs 自动生成 by rust-bindgen&lt;&#x2F;h3&gt;
&lt;p&gt;从10个头文件，用build.rs规则生成
process::Command::new(&amp;quot;make&amp;quot;)
bpf.h
libbpf.h
btf.h
xsk.h
bpf_helpers.h
bpf_helper_defs.h
bpf_tracing.h
bpf_endian.h
bpf_core_read.h
libbpf_common.h&lt;&#x2F;p&gt;
&lt;h2 id=&quot;libbpf-rs-gong-neng&quot;&gt;libbpf-rs 功能&lt;&#x2F;h2&gt;
&lt;p&gt;提供一系列工具&lt;&#x2F;p&gt;
&lt;h3 id=&quot;tc-rs&quot;&gt;tc.rs&lt;&#x2F;h3&gt;
&lt;pre data-lang=&quot;rs&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-rs &quot;&gt;&lt;code class=&quot;language-rs&quot; data-lang=&quot;rs&quot;&gt;&lt;span&gt;TcHookBuilder-&amp;gt; TcHook&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    tc_builder&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;fd&lt;&#x2F;span&gt;&lt;span&gt;(fd)&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;ifindex&lt;&#x2F;span&gt;&lt;span&gt;(ifidx)&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;replace&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;true&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;handle&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;priority&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;);&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;TcHook&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    tc_hook&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;skeleton-rs&quot;&gt;skeleton.rs&lt;&#x2F;h3&gt;
&lt;p&gt;SkelConfig封装 map和prog, &lt;&#x2F;p&gt;
&lt;p&gt;对libbpf_sys::bpf_object_skeleton 的封装&lt;&#x2F;p&gt;
&lt;p&gt;用于生命周期的obj和内存持有的_data&#x2F;_string_pool&lt;&#x2F;p&gt;
&lt;p&gt;用于内存析构drop的progs&#x2F;maps的layout&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rs&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-rs &quot;&gt;&lt;code class=&quot;language-rs&quot; data-lang=&quot;rs&quot;&gt;&lt;span&gt;ObjectSkeletonConfigBuilder.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;build&lt;&#x2F;span&gt;&lt;span&gt;()-&amp;gt;ObjectSkeletonConfig()&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    libbpf_sys::bpf_object_skeleton()&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;build_maps&lt;&#x2F;span&gt;&lt;span&gt;(s, string_pool)-&amp;gt;maps_layout&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;build_progs&lt;&#x2F;span&gt;&lt;span&gt;(s, string_pool)-&amp;gt;progs_layout&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; libbpf_sys::bpf_object_skeleton  wrap&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F;&#x2F; * ensure lifetimes are valid for dependencies (pointers, data buffer)&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F;&#x2F; * free any allocated memory on drop&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;pub struct &lt;&#x2F;span&gt;&lt;span&gt;ObjectSkeletonConfig&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;&amp;#39;a&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; {&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;inner&lt;&#x2F;span&gt;&lt;span&gt;: bpf_object_skeleton,&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;obj&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;Box&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;*mut&lt;&#x2F;span&gt;&lt;span&gt; bpf_object&amp;gt;,&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;maps&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;Vec&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;MapSkelConfig&amp;gt;,&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;progs&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;Vec&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;ProgSkelConfig&amp;gt;,&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F;&#x2F; Layout necessary to `dealloc` memory&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;maps_layout&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;Option&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;Layout&amp;gt;,&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F;&#x2F; Same as above&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;progs_layout&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;Option&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;Layout&amp;gt;,&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F;&#x2F; Hold this reference so that compiler guarantees buffer lives as long as us&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;_data&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;&amp;#39;a&lt;&#x2F;span&gt;&lt;span&gt; [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;u8&lt;&#x2F;span&gt;&lt;span&gt;],&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F;&#x2F; Hold strings alive so pointers to them stay valid&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;_string_pool&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;Vec&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;CString&amp;gt;,&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;}&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;query-rs&quot;&gt;query.rs&lt;&#x2F;h3&gt;
&lt;pre data-lang=&quot;rs&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-rs &quot;&gt;&lt;code class=&quot;language-rs&quot; data-lang=&quot;rs&quot;&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;for&lt;&#x2F;span&gt;&lt;span&gt; prog &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;in &lt;&#x2F;span&gt;&lt;span&gt;ProgInfoIter::default() {&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;     println!(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;{}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, prog.name);&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;[Program&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span&gt;Map&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span&gt;Btf&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span&gt;Link] Info&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;program-rs&quot;&gt;program.rs&lt;&#x2F;h3&gt;
&lt;pre data-lang=&quot;rs&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-rs &quot;&gt;&lt;code class=&quot;language-rs&quot; data-lang=&quot;rs&quot;&gt;&lt;span&gt;OpenProgram.[set_[map_ifindex&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span&gt;fd&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&#x2F;...&lt;&#x2F;span&gt;&lt;span&gt;]]&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;Program.[name&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span&gt;sectyion&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span&gt;fd&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span&gt;key_size&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span&gt;value_size&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span&gt;lookup&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span&gt;delte&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span&gt;update&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span&gt;pin&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span&gt;unpin]]&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;maps-rs&quot;&gt;maps.rs&lt;&#x2F;h3&gt;
&lt;pre data-lang=&quot;rs&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-rs &quot;&gt;&lt;code class=&quot;language-rs&quot; data-lang=&quot;rs&quot;&gt;&lt;span&gt;OpenMap.[set_[prog_type&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span&gt;attach_type&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span&gt;ifindex&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span&gt;flags]]&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;Map.[name&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span&gt;sectyion&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span&gt;fd&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span&gt;pin&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span&gt;unpin&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span&gt;attach[cgroup&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span&gt;perf&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span&gt;uprobe&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span&gt;trace&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span&gt;xdp]]&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;link-rs-bpfyu-hookde-chou-xiang-ke-yi-guan-li&quot;&gt;link.rs bpf与hook的抽象，可以管理&lt;&#x2F;h3&gt;
&lt;pre data-lang=&quot;rs&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-rs &quot;&gt;&lt;code class=&quot;language-rs&quot; data-lang=&quot;rs&quot;&gt;&lt;span&gt;Link.[open&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span&gt;update_prog&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span&gt;dsconnet&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span&gt;pin&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span&gt;fd&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span&gt;detach]&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;bpf_link_type.[xdp&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span&gt;perf_event&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span&gt;cgroup&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span&gt;raw&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span&gt;trace]&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;object-rs&quot;&gt;object.rs&lt;&#x2F;h3&gt;
&lt;pre data-lang=&quot;rs&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-rs &quot;&gt;&lt;code class=&quot;language-rs&quot; data-lang=&quot;rs&quot;&gt;&lt;span&gt;OpenObject: open but not load [bpf_object&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span&gt;maps&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span&gt;progs&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span&gt;name&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span&gt;map&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span&gt;prog&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span&gt;load] Populate obj.maps&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span&gt;obj.progs&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;Object: open and loaded object&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;ObjectBuilder.[name&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span&gt;debug&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span&gt;opts&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span&gt;open_file&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span&gt;open_mem]-&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;OpenObject::&lt;&#x2F;span&gt;&lt;span&gt;new()&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;ringbuf-rs&quot;&gt;ringbuf.rs&lt;&#x2F;h3&gt;
&lt;pre data-lang=&quot;rs&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-rs &quot;&gt;&lt;code class=&quot;language-rs&quot; data-lang=&quot;rs&quot;&gt;&lt;span&gt;RingBuffer.[ring_buffer&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span&gt;poll&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span&gt;consume]&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;RingBufferBuilder.[RingBufferCallback&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span&gt;add&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span&gt;build]-&amp;gt;RingBuffer()&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;util-rs&quot;&gt;util.rs&lt;&#x2F;h3&gt;
&lt;pre data-lang=&quot;rs&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-rs &quot;&gt;&lt;code class=&quot;language-rs&quot; data-lang=&quot;rs&quot;&gt;&lt;span&gt;str_to_cstring&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span&gt;path_to_cstring&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;c_ptr_to_string&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;roundup&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span&gt;num_possible_cpus&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;parse_ret&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span&gt;parse_ret_i32&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span&gt;parse_ret_usize&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;libbpf-cargo-gong-neng&quot;&gt;libbpf-cargo 功能&lt;&#x2F;h2&gt;
&lt;h3 id=&quot;main-rs&quot;&gt;main.rs&lt;&#x2F;h3&gt;
&lt;p&gt;clap Command:[Build&#x2F;Gen&#x2F;Make]分别对应下3个文件,main只是api&lt;&#x2F;p&gt;
&lt;h3 id=&quot;lib-rs&quot;&gt;lib.rs&lt;&#x2F;h3&gt;
&lt;p&gt;给用户工程build.rs提供自动build和gen&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rs&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-rs &quot;&gt;&lt;code class=&quot;language-rs&quot; data-lang=&quot;rs&quot;&gt;&lt;span&gt;    SkeletonBuilder::new().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;source&lt;&#x2F;span&gt;&lt;span&gt;(SRC).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;build_and_generate&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span&gt;skel)&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;build&lt;&#x2F;span&gt;&lt;span&gt;()-&amp;gt;build::build_single()&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    generate()-&amp;gt;gen::gen_single()&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;make-rs&quot;&gt;make.rs&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;批处理build and gen&lt;&#x2F;li&gt;
&lt;li&gt;build::build()&lt;&#x2F;li&gt;
&lt;li&gt;gen::gen()&lt;&#x2F;li&gt;
&lt;li&gt;最后Command::new(&amp;quot;cargo&amp;quot;).arg(&amp;quot;build&amp;quot;)&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;build-rs&quot;&gt;build.rs&lt;&#x2F;h3&gt;
&lt;p&gt;build_single() 用于用户工程 -&amp;gt;compile_one()-&amp;gt;Command&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#f9f9f9;color:#111111;&quot;&gt;&lt;code&gt;&lt;span&gt;build() 用于cargo -&amp;gt;compile()-&amp;gt;compile_one()&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    extract_libbpf_headers_to_disk()&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    check_progs&#x2F;check_clang()&#x2F;&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;gen-rs&quot;&gt;gen.rs&lt;&#x2F;h3&gt;
&lt;pre style=&quot;background-color:#f9f9f9;color:#111111;&quot;&gt;&lt;code&gt;&lt;span&gt;    gen-&amp;gt;gen_single-&amp;gt;gen_skel(debug, name, obj_file, output, rustfmt_path)-&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    gen_skel_contents()&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        open_bpf_object()&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        gen_skel_c_skel_constructor()-&amp;gt;libbpf_rs::skeleton::**ObjectSkeletonConfigBuilder**::new(DATA); # skeleton.rs&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        map&#x2F;prog&#x2F;datasec&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;            gen_skel_xxx_defs()?; gen_skel_xxx_getter()?; gen_skel_link_getter()&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;            gen_skel_attach()-&amp;gt;libbpf_sys::bpf_object__attach_skeleton(&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;metadata-rs&quot;&gt;metadata.rs&lt;&#x2F;h3&gt;
&lt;pre style=&quot;background-color:#f9f9f9;color:#111111;&quot;&gt;&lt;code&gt;&lt;span&gt;cargo时的 to_compile&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;get()-&amp;gt;target_dir, metadata.target_directory.into_std_path_buf()&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    轮询所有package后，if id == &amp;amp;package.id &lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    get_package() &lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;div class=&quot;footnote-definition&quot; id=&quot;1&quot;&gt;&lt;sup class=&quot;footnote-definition-label&quot;&gt;1&lt;&#x2F;sup&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;jimluo&#x2F;netoken&quot;&gt;netoken&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;div&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>HTTPS下强制认证</title>
		<published>2022-01-10T00:00:00+00:00</published>
		<updated>2022-01-10T00:00:00+00:00</updated>
		<link href="https://jimluo.github.io/https-redirect/" type="text/html"/>
		<id>https://jimluo.github.io/https-redirect/</id>
		<content type="html">&lt;p&gt;网络安全准入对终端设备最开始和直接的就是强制其认证合法性。&lt;&#x2F;p&gt;
&lt;p&gt;原有基于HTTP重定向认证已失效，因为HTTP不安全。且浏览器都强制HSTS技术只能HTTPS。&lt;&#x2F;p&gt;
&lt;p&gt;怎么在HTTPS下还能重定向来认证？&lt;&#x2F;p&gt;
&lt;p&gt;住宿酒店和搭乘飞机时会对我们有所启发。接入提供的免费WIFI后会重定向。&lt;&#x2F;p&gt;
&lt;p&gt;结论就是诱使OS发出HTTP。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;ji-zhu-bei-jing&quot;&gt;技术背景&lt;&#x2F;h3&gt;
&lt;p&gt;网络准入产品可以验证终端设备是否安全，使用强制网络门户认证技术实现此验证&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;强制网络门户认证(captive portal），终端入网后，强制弹出浏览器的认证页面，强制用户认证后使用网络&lt;&#x2F;li&gt;
&lt;li&gt;HSTS(HTTP Strict Transport Security), 防止MiTM中间人攻击，浏览器强制使用HTTPS与服务器创建连接，用户无法发出HTTP请求&lt;&#x2F;li&gt;
&lt;li&gt;Captive Portal实现依赖于阶段性的HTTP劫持，当设备入网后，通过DHCP服务获取本机IP地址和网关地址后，发出的HTTP请求被劫持后返回重定向到指定的HTTP认证页面&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;h3 id=&quot;cun-zai-wen-ti&quot;&gt;存在问题&lt;&#x2F;h3&gt;
&lt;ol&gt;
&lt;li&gt;用户终端入网后先用浏览器手动访问HTTPS网站时，返回给终端浏览器的重定向响应，由于浏览器验证服务器证书不匹配会警告，无法实施强制认证，使此技术方案失效。如图&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;&lt;img src=&quot;..&#x2F;images&#x2F;https-redirect&#x2F;1warning.png&quot; alt=&quot;浏览器警告&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;ol start=&quot;2&quot;&gt;
&lt;li&gt;用户终端网络在线时，由管控服务端实施准入策略，在未认证前断网，直到浏览器发出HTTP后被准入服务重定向后去认证。由于浏览器预制的HSTS域名缓存或服务端支持HSTS技术，HTTP被浏览器强制转换为HTTPS，致使浏览器验证服务器证书不匹配会警告，使此技术方案失效&lt;&#x2F;li&gt;
&lt;li&gt;原有准入系统实施基于浏览器http重定向的认证功能，在https下失效，报错证书不匹配，无法实施强制认证，使此技术方案失效。&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;h3 id=&quot;ke-yi-li-yong-osde-yi-ge-ji-zhi&quot;&gt;可以利用OS的一个机制&lt;&#x2F;h3&gt;
&lt;p&gt;操作系统：Windows&#x2F;Linux&#x2F;MacOS&#x2F;Android&#x2F;iOS下
刚入网时回探测是否需要认证，先探测有强制门户，再做认证&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;终端操作系统入网后探测是否处于认证网关之下，多次尝试连接指定的HTTP的url，最长超时 30 秒&lt;&#x2F;li&gt;
&lt;li&gt;如果指定服务返回了204状态码，即未发现强制门户，不需要验证&lt;&#x2F;li&gt;
&lt;li&gt;如果指定服务返回HTTP重定向认证，即强制门户认证，认证后网络放行&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;&lt;img src=&quot;..&#x2F;images&#x2F;https-redirect&#x2F;2captive-portal.png&quot; alt=&quot;发出探测&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;图1 OS发出探测&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;..&#x2F;images&#x2F;https-redirect&#x2F;3captive-portal-204.png&quot; alt=&quot;收到响应，证明无强制门户&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;图2 OS收到无强制门户的204状态&lt;&#x2F;p&gt;
&lt;p&gt;以下是部分固定的探测强制门户的url&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#f9f9f9;color:#111111;&quot;&gt;&lt;code&gt;&lt;span&gt;Windows :http:&#x2F;&#x2F;www.msftconnecttest.com&#x2F;connecttest.txt&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;Google：http:&#x2F;&#x2F;www.gstatic.com&#x2F;generate_204 &#x2F; ， ...&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;Android:https:&#x2F;&#x2F;www.google.com&#x2F;generate_204，...    &lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;小米： http:&#x2F;&#x2F;connect.rom.miui.com&#x2F;generate_204&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;华为： http:&#x2F;&#x2F;connectivitycheck.platform.hicloud.com&#x2F;generate_204&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;ru-he-li-yong-osde-zhe-ge-ji-zhi&quot;&gt;如何利用OS的这个机制&lt;&#x2F;h3&gt;
&lt;p&gt;在交换机或浏览器上处理，诱发OS发出强制门户认证探测&lt;&#x2F;p&gt;
&lt;p&gt;两种方案各有优劣，也可同时使用&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;交换机方案依赖交换机的控制，普通服务没有控制交换机的权限&lt;&#x2F;li&gt;
&lt;li&gt;浏览器方案依赖用户先打开浏览器&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;&lt;img src=&quot;..&#x2F;images&#x2F;https-redirect&#x2F;4topology.png&quot; alt=&quot;网络拓扑&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;图3 HTTPS重定向的网络拓扑&lt;&#x2F;p&gt;
&lt;h2 id=&quot;ji-yu-jiao-huan-ji-de-ji-zhu-fang-an&quot;&gt;基于交换机的技术方案&lt;&#x2F;h2&gt;
&lt;ol&gt;
&lt;li&gt;准入服务控制交换机对终端断网后再开网&lt;&#x2F;li&gt;
&lt;li&gt;终端重新入网诱发其探测强制门户&lt;&#x2F;li&gt;
&lt;li&gt;Windows尝试强制认证，访问http:&#x2F;&#x2F;www.msftconnecttest.com&#x2F;connecttest.txt&lt;&#x2F;li&gt;
&lt;li&gt;终端桌面上托盘中的网络图标闪烁，提示用户点击图标，会打开浏览器并跳入认证页面&lt;&#x2F;li&gt;
&lt;li&gt;准入服务流量截获HTTP请求并重定向到认证页面&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;pre style=&quot;background-color:#f9f9f9;color:#111111;&quot;&gt;&lt;code&gt;&lt;span&gt;终端               交换机        强制门户          准入服务&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt; |&amp;lt;---断网后再开网----|             |&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt; |                   |             |&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt; |-------------探测强制门户--------&amp;gt;|----捕获HTTP----&amp;gt;|&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt; |                   |             |                 |&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt; |&amp;lt;------------发送模仿强制门户的重定向认证------------|&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;表1 基于交换机的HTTPS重定向&lt;&#x2F;p&gt;
&lt;h3 id=&quot;jiao-huan-ji-shi-shi-kong-zhi-ji-zhu&quot;&gt;交换机实施控制技术&lt;&#x2F;h3&gt;
&lt;ol&gt;
&lt;li&gt;与终端直连的交换机将终端地址通过snmp trap上报准入服务&lt;&#x2F;li&gt;
&lt;li&gt;准入服务给指定终端断网再入网snmpset  [up &#x2F; down]&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;h2 id=&quot;ji-yu-liu-lan-qi-zheng-shu-de-ji-zhu-fang-an&quot;&gt;基于浏览器证书的技术方案&lt;&#x2F;h2&gt;
&lt;p&gt;客户端浏览器	网络通讯	服务器(流量镜像)&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;浏览器发起请求，例如https:&#x2F;&#x2F;www.wechat.cn&lt;&#x2F;li&gt;
&lt;li&gt;准入服务识别HTTPS请求，生成自签名的ssl证书（可缓存证书重复利用），返回给终端浏览器&lt;&#x2F;li&gt;
&lt;li&gt;准入服务判断证书，包含公钥，颁发者	返回证书给终端浏览器&lt;&#x2F;li&gt;
&lt;li&gt;终端浏览器判定证书字段有误，终止后面数据传输的流程。进入门户认证流程，&lt;&#x2F;li&gt;
&lt;li&gt;发起http请求，寻找门户http:&#x2F;&#x2F;www.msftconnecttest.com&#x2F;connecttest.txt&lt;&#x2F;li&gt;
&lt;li&gt;准入服务识别请求，修改门户地址，返回给终端浏览器&lt;&#x2F;li&gt;
&lt;li&gt;终端浏览器打开新tab页跳转到指定网址&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;pre style=&quot;background-color:#f9f9f9;color:#111111;&quot;&gt;&lt;code&gt;&lt;span&gt;终端               交换机        强制门户          准入服务&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt; |-----------HTTPS浏览网页时SSL握手验证证书----------&amp;gt;|&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt; |&amp;lt;----------------发送自签名的ssl证书----------------|&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt; |---------判定证书字段有误，进入门户认证流程---------&amp;gt;|&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt; |                   |             |&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt; |-------------探测强制门户--------&amp;gt;|----捕获HTTP----&amp;gt;|&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt; |                   |             |                |&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt; |&amp;lt;------------发送模仿强制门户的重定向认证------------|&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;表2 基于浏览器证书重定向&lt;&#x2F;p&gt;
&lt;h3 id=&quot;shi-xian-te-dian&quot;&gt;实现特点&lt;&#x2F;h3&gt;
&lt;ol&gt;
&lt;li&gt;解决了现有产品在HTTPS下强制门户认证的失效问题&lt;&#x2F;li&gt;
&lt;li&gt;高性能，同时大并发量下对HTTPS强制门户认证。基于BPF实现&lt;&#x2F;li&gt;
&lt;li&gt;绕过HSTS对HTTPS强制使用，实现HTTPS时也能实施强制门户认证&lt;&#x2F;li&gt;
&lt;li&gt;基于强制门户发出的HTTP探测，还能用于其他安全业务&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;h2 id=&quot;dai-ma-mu-lu-jie-gou&quot;&gt;代码目录结构&lt;sup class=&quot;footnote-reference&quot;&gt;&lt;a href=&quot;#1&quot;&gt;1&lt;&#x2F;a&gt;&lt;&#x2F;sup&gt;&lt;&#x2F;h2&gt;
&lt;pre data-lang=&quot;sh&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-sh &quot;&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;bpf&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; 驱动&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;lib&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; 协议库&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;api.h&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;  公用依赖头&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;eth.h&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;  以太帧处理&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;ipv4.h&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; ip帧处理&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;tcp.h&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;  tcp帧处理&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;http.h&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; http处理&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;dhcp.h&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; dhcp收集终端信息&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;os_filter.h&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;  过滤os&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;metrics.h&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;  系统性能&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;linux&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; 内核类型&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;test&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; 单元测试&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;bpf.c&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; 驱动&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;Makefile&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;   构建&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;main.go&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;    加载入口&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;program.go&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; 加载器&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;maps.go&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;    内核与用户态传参字典&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;npf.go&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;     驱动上报&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;npf_bpfel.go&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;  自动生成加载驱动&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;snmp.go&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;    snmp下启停端口&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;tracer.go&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;  traceroute查找终端机器直连的交换机&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;qu-dong-liu-cheng&quot;&gt;驱动流程&lt;&#x2F;h2&gt;
&lt;p&gt;从2层到5层，eth-&amp;gt;ip4-&amp;gt;tcp-&amp;gt;http&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;网络入口 xdp_npf_prog(struct xdp_md* ctx)&lt;&#x2F;li&gt;
&lt;li&gt;struct pkthdr pkt{data_cursor, data_begin, data_end}数据帧封装&lt;&#x2F;li&gt;
&lt;li&gt;过滤http及重定向
&lt;ol&gt;
&lt;li&gt;config verify 读取配置，交换机ip等&lt;&#x2F;li&gt;
&lt;li&gt;eth parse and verify, 只留IP包&lt;&#x2F;li&gt;
&lt;li&gt;ipv4 parse and verify, host pkt pass&lt;&#x2F;li&gt;
&lt;li&gt;tcp parse and verify
&lt;ol&gt;
&lt;li&gt;tcp options filter, find and save token to hashmap&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;os filter&lt;&#x2F;li&gt;
&lt;li&gt;http parse and filter os&lt;&#x2F;li&gt;
&lt;li&gt;lookup hashmap of token&lt;&#x2F;li&gt;
&lt;li&gt;http parse and verify &lt;&#x2F;li&gt;
&lt;li&gt;redirect http  本机debug时关闭&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;h2 id=&quot;jia-zai-liu-cheng-program-go-npf-bpfel-go&quot;&gt;加载流程   program.go npf_bpfel.go&lt;&#x2F;h2&gt;
&lt;ol&gt;
&lt;li&gt;cfg := LoadConfig(&amp;quot;config&amp;quot;) 加载本地配置&lt;&#x2F;li&gt;
&lt;li&gt;npf := NewNpf(cfg) =&amp;gt; npf.go 驱动加载&lt;&#x2F;li&gt;
&lt;li&gt;loadNpfObjects(&amp;amp;bpf) =&amp;gt; npf_bpfel.go  初始化&lt;&#x2F;li&gt;
&lt;li&gt;LoadProg(bpf.npfPrograms.XdpNpfProg.FD()) =&amp;gt; program.go 加载
&lt;ol&gt;
&lt;li&gt;GetIface(linkname) 获取网卡interface&lt;&#x2F;li&gt;
&lt;li&gt;AttachProg(）将启动挂载到网卡interface&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;perf.NewReader(PKT_INFO_EVENTS_MAP） 挂载事件&lt;&#x2F;li&gt;
&lt;li&gt;npf.SetKernelConfig() 构造配置下传&lt;&#x2F;li&gt;
&lt;li&gt;redirectUrlLinux 重定向地址&lt;&#x2F;li&gt;
&lt;li&gt;ipHost  本机地址&lt;&#x2F;li&gt;
&lt;li&gt;macHost 交换机mac&lt;&#x2F;li&gt;
&lt;li&gt;npf.Listen() 监听事件
&lt;ol&gt;
&lt;li&gt;HandleRecord() 解析打印事件&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;h2 id=&quot;httpszhong-ding-xiang-liu-cheng-snmp-go-tracer-go&quot;&gt;https重定向流程 snmp.go tracer.go&lt;&#x2F;h2&gt;
&lt;ol&gt;
&lt;li&gt;snmpscan() 主入口
&lt;ol&gt;
&lt;li&gt;NewSnmp(p)&lt;&#x2F;li&gt;
&lt;li&gt;Connect()&lt;&#x2F;li&gt;
&lt;li&gt;QueryIfaces() 获取所有端口&lt;&#x2F;li&gt;
&lt;li&gt;DownUpIface 关接口&lt;&#x2F;li&gt;
&lt;li&gt;UpIface 开接口&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;Trace() 主入口
&lt;ol&gt;
&lt;li&gt;DefaultTracer 构建可配置的tracer
&lt;ol&gt;
&lt;li&gt;Trace()
&lt;ol&gt;
&lt;li&gt;ping&lt;&#x2F;li&gt;
&lt;li&gt;Receive&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;touch，记录每一跳&lt;&#x2F;li&gt;
&lt;li&gt;Add，判断符合RTT或srcIP后添加&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;hops，反向过滤所有跳，匹配上过滤&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;div class=&quot;footnote-definition&quot; id=&quot;1&quot;&gt;&lt;sup class=&quot;footnote-definition-label&quot;&gt;1&lt;&#x2F;sup&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;jimluo&#x2F;redirectHTTPS&quot;&gt;RedirectHTTPS&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;div&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>开发minidhcp的感受记录</title>
		<published>2021-12-03T00:00:00+00:00</published>
		<updated>2021-12-03T00:00:00+00:00</updated>
		<link href="https://jimluo.github.io/minidhcp/" type="text/html"/>
		<id>https://jimluo.github.io/minidhcp/</id>
		<content type="html">&lt;h2 id=&quot;kai-fa-minidhcpde-gan-shou-ji-lu&quot;&gt;开发minidhcp的感受记录&lt;&#x2F;h2&gt;
&lt;p&gt;开发此服务目的是为网络流量分析和控制提供一种支持手段。具体方法是增加基于角色分配IP段的dhcp，并记录分配的设备的信息。&lt;&#x2F;p&gt;
&lt;p&gt;为了快速验证，在github上找到了&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;coredhcp&#x2F;coredhcp&quot;&gt;coredhcp&lt;&#x2F;a&gt;，去掉了dhcp6及其繁冗的插件系统，优化重构了网络收发部分代码，重写了option的分配，加入了基于角色分配IP的功能，角色策略通过配置文件生效。&lt;sup class=&quot;footnote-reference&quot;&gt;&lt;a href=&quot;#1&quot;&gt;1&lt;&#x2F;a&gt;&lt;&#x2F;sup&gt;&lt;&#x2F;p&gt;
&lt;h2 id=&quot;dhcpxie-yi-liu-cheng&quot;&gt;dhcp协议流程&lt;&#x2F;h2&gt;
&lt;p&gt;&lt;img src=&quot;..&#x2F;images&#x2F;minidhcp.png&quot; alt=&quot;dhcp协议流程&quot; &#x2F;&gt;&lt;sup class=&quot;footnote-reference&quot;&gt;&lt;a href=&quot;#2&quot;&gt;2&lt;&#x2F;a&gt;&lt;&#x2F;sup&gt;&lt;&#x2F;p&gt;
&lt;h3 id=&quot;dhcp-lease-sheng-ming-zhou-qi&quot;&gt;DHCP lease 生命周期&lt;&#x2F;h3&gt;
&lt;p&gt;流程类似打工人租房，先电线杆子广播需求，收到房源电话后签合约，住到期后再续租。&lt;&#x2F;p&gt;
&lt;p&gt;在DHCP协议里描述的更严谨，用编程语言描述就是会有多个if else。&lt;&#x2F;p&gt;
&lt;p&gt;在计算机网络里会是一来一回的消息请求和确认。&lt;&#x2F;p&gt;
&lt;p&gt;类似盲人摸象，不同的视角说的都不全面。&lt;&#x2F;p&gt;
&lt;p&gt;用语言描述如下：&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;此前没有过IP的客户端全网广播向DHCP服务申请，通过后分配一个IP时间限制的租约&lt;&#x2F;li&gt;
&lt;li&gt;已有过IP的客户端向授予它租约的DHCP服务器联系，以确认为其重新分配租约&lt;&#x2F;li&gt;
&lt;li&gt;租约过期后，客户端将联系最初授予租约的服务器续租&lt;&#x2F;li&gt;
&lt;li&gt;如果续租失败，客户端将尝试重新绑定到任何活跃的DHCP服务器&lt;&#x2F;li&gt;
&lt;li&gt;客户端主动放弃租约下线(goodbye curel world😢)&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;以上5步在DHCP服务认知的世界里，用Allocation、Reallocation、Renewal、Rebinding和Release来描述。&lt;&#x2F;p&gt;
&lt;p&gt;当然在租房客的认知世界里，憧憬未来和负重前行也与房东的5步相对应。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;xian-shuo-xie-yi-de-allocation-da-jia-gong-tong-zun-shou-tong-yang-de-yue-ding&quot;&gt;先说协议的Allocation，大家共同遵守同样的约定&lt;&#x2F;h3&gt;
&lt;ol&gt;
&lt;li&gt;client --DISCOVER(myMac, myID)--&amp;gt; servers&lt;&#x2F;li&gt;
&lt;li&gt;client &amp;lt;--OFFER(yourIP, your[DNS,Router,Mask,...], yourID)-- servers&lt;&#x2F;li&gt;
&lt;li&gt;client &amp;lt;--IP[x]-- [1, n]IP from OFFER list &lt;&#x2F;li&gt;
&lt;li&gt;client --REQUEST(IP[x])--&amp;gt; servers&lt;&#x2F;li&gt;
&lt;li&gt;client &amp;lt;--ACK&#x2F;MAK-- server&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;用语言描述为&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;广播找房&lt;&#x2F;li&gt;
&lt;li&gt;广受青睐，发来房源信息&lt;&#x2F;li&gt;
&lt;li&gt;挑选1个高性价比的房&lt;&#x2F;li&gt;
&lt;li&gt;广播告知自己已是有房之人&lt;&#x2F;li&gt;
&lt;li&gt;房东送来租房合同等你签字&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;色不异空，空不异色，Reallocation、Renewal、Rebinding亦复如是&lt;&#x2F;p&gt;
&lt;h2 id=&quot;serverwang-luo-shou-fa-xi-jie&quot;&gt;server网络收发细节&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;服务端监听在67端口上，收到client请求后解析有icmp的信息，响应给client容错时要处理下，里面有网卡接口可以使用&lt;&#x2F;li&gt;
&lt;li&gt;对普通请求，自构建pcap响应原路返回。其他非正常消息在3层ip上icmp返回错误提醒&lt;&#x2F;li&gt;
&lt;li&gt;具体的发送使用libpacp，发送前要去掉自定义链路层的协议头部&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;optionschong-xi-jie&quot;&gt;options种细节&lt;&#x2F;h2&gt;
&lt;p&gt;DHCP通过自定义增加多种不同的可选项来扩展，服务端返给客户端的option里有[ip, dns, mask, router, serverID...]可自由添加。&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;分配时先根据客户端的mac来识别其角色，再根据配置文件中的range来分配具体的ip等信息&lt;&#x2F;li&gt;
&lt;li&gt;其他扩展在options的HandlerXXX dispatch去即可&lt;&#x2F;li&gt;
&lt;li&gt;需要客户端信息的，再options里可以对其提出，比如Vendor信息等&lt;&#x2F;li&gt;
&lt;li&gt;续租等信息在lease.txt可查可用&lt;&#x2F;li&gt;
&lt;li&gt;分配算法用的coredhcp的bitmap方式降低内存占用&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;div class=&quot;footnote-definition&quot; id=&quot;1&quot;&gt;&lt;sup class=&quot;footnote-definition-label&quot;&gt;1&lt;&#x2F;sup&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;jimluo&#x2F;minidhcp&quot;&gt;源码地址&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;div&gt;
&lt;div class=&quot;footnote-definition&quot; id=&quot;2&quot;&gt;&lt;sup class=&quot;footnote-definition-label&quot;&gt;2&lt;&#x2F;sup&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;support.huawei.com&#x2F;enterprise&#x2F;zh&#x2F;doc&#x2F;EDOC1100156651&#x2F;bb57bdaa&#x2F;how-dhcp-works&quot;&gt;图片来源&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;div&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>BPF技术介绍 - 生态和历史</title>
		<published>2021-11-17T00:00:00+00:00</published>
		<updated>2021-11-17T00:00:00+00:00</updated>
		<link href="https://jimluo.github.io/bpf-vs-dpdk/" type="text/html"/>
		<id>https://jimluo.github.io/bpf-vs-dpdk/</id>
		<content type="html">&lt;h2 id=&quot;bpfji-zhu-jie-shao-sheng-tai-he-li-shi&quot;&gt;BPF技术介绍 - 生态和历史&lt;&#x2F;h2&gt;
&lt;p&gt;本文图片都源于网上公开资料，未注明来源。内容源于对网络检测与响应NDR的开发。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;li-shi-cheng-yin&quot;&gt;历史成因&lt;&#x2F;h3&gt;
&lt;p&gt;&lt;img src=&quot;..&#x2F;images&#x2F;bpf-xdp&#x2F;01history.png&quot; alt=&quot;历史成因&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;图1：Linux内核的代码量增长&lt;&#x2F;p&gt;
&lt;h3 id=&quot;dpdk-pf-ringhe-bpfde-gong-tong-dian&quot;&gt;DPDK、PF_RING和BPF的共同点&lt;&#x2F;h3&gt;
&lt;p&gt;分离出网络的数据平面&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;网络功能扩展的代价是牺牲性能&lt;&#x2F;li&gt;
&lt;li&gt;都在突破内核复杂度的限制 -kernel bypass&lt;&#x2F;li&gt;
&lt;li&gt;从内核中分离出数据平面&lt;&#x2F;li&gt;
&lt;li&gt;向上交给用户态开发 -DPDK、PF_RING和BPF&lt;&#x2F;li&gt;
&lt;li&gt;向下卸载到网卡执行 -BPF的XDP&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;dpdk-pf-ringhe-bpfde-chai-yi-dian-sheng-tai-mu-biao-bu-tong&quot;&gt;DPDK、PF_RING和BPF的差异点：生态目标不同&lt;&#x2F;h3&gt;
&lt;p&gt;&lt;img src=&quot;..&#x2F;images&#x2F;bpf-xdp&#x2F;02canon.png&quot; alt=&quot;DPDK&quot; &#x2F;&gt; DPDK&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;DPDK 独立的平台
&lt;ul&gt;
&lt;li&gt;独占内核网络栈&lt;&#x2F;li&gt;
&lt;li&gt;专用的SDK API&lt;&#x2F;li&gt;
&lt;li&gt;生态面向硬件&lt;&#x2F;li&gt;
&lt;li&gt;应用隔离和安全机制失效&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;PF_RING 独立的厂商
&lt;ul&gt;
&lt;li&gt;独立的意大利公司&lt;&#x2F;li&gt;
&lt;li&gt;高性能版独立收费&lt;&#x2F;li&gt;
&lt;li&gt;独立的生态&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;&lt;img src=&quot;..&#x2F;images&#x2F;bpf-xdp&#x2F;03swiss.png&quot; alt=&quot;BPF&quot; &#x2F;&gt; BPF&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;BPF 融合的生态
&lt;ul&gt;
&lt;li&gt;嫁接在内核中&lt;&#x2F;li&gt;
&lt;li&gt;融合在已有的软硬件中&lt;&#x2F;li&gt;
&lt;li&gt;生态面向软件并发展迅速&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;dpdkyu-bpfji-jin-hui&quot;&gt;DPDK与BPF基金会&lt;&#x2F;h3&gt;
&lt;p&gt;面向基础设施：底层硬件 &#x2F; 上层业务&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;..&#x2F;images&#x2F;bpf-xdp&#x2F;04foundation.png&quot; alt=&quot;基金会&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;图2：两种不同利益的基金会&lt;&#x2F;p&gt;
&lt;h3 id=&quot;dpdknian-du-shi-jian-he-ji-zhu-biao-zhun&quot;&gt;DPDK年度事件和技术标准&lt;&#x2F;h3&gt;
&lt;p&gt;年度事件&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;2010，Intel，Xeon 1代的DPDK&lt;&#x2F;li&gt;
&lt;li&gt;2013，6WIND，DPDK.org社区&lt;&#x2F;li&gt;
&lt;li&gt;2014，OvS，OvS-DPDK分布式虚拟交换机&lt;&#x2F;li&gt;
&lt;li&gt;2015，ARM版本&lt;&#x2F;li&gt;
&lt;li&gt;2017，加入 Linux 基金会&lt;&#x2F;li&gt;
&lt;li&gt;2018，VMware，数据中心内软件定义基础结构&lt;&#x2F;li&gt;
&lt;li&gt;2019，金融应用(高频交易)&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;技术标准&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;PCI passthrough，绕过Hyper-V模拟，虚拟机直通PCI&lt;&#x2F;li&gt;
&lt;li&gt;SR-IOV，绕过 Hyper-V堆栈，单网卡虚拟成多张直通网卡&lt;&#x2F;li&gt;
&lt;li&gt;FD.io&#x2F;VPP，矢量加速数据IO，减少I-cache抖动和读延时&lt;&#x2F;li&gt;
&lt;li&gt;vDPA， virtio 数据路径加速，控制面软件模拟，数据面硬件实现&lt;&#x2F;li&gt;
&lt;li&gt;Switchdev，卸载内核的交换功能到硬件&lt;&#x2F;li&gt;
&lt;li&gt;代码贡献占比 (V21.11)&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;bpfxun-su-fa-zhan-de-sheng-tai&quot;&gt;BPF迅速发展的生态&lt;&#x2F;h2&gt;
&lt;p&gt;年度技术&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;1992 论文，BSD Packet Filter&lt;&#x2F;li&gt;
&lt;li&gt;1994 cBPF，tcpdump中libpcap的实现&lt;&#x2F;li&gt;
&lt;li&gt;2014 eBPF，通用虚拟机&lt;&#x2F;li&gt;
&lt;li&gt;2015 BCC，开发工具和库&lt;&#x2F;li&gt;
&lt;li&gt;2016 XDP，网络内核旁路模块&lt;&#x2F;li&gt;
&lt;li&gt;2017 libbpf，脱离内核独立发展&lt;&#x2F;li&gt;
&lt;li&gt;2017 ARM&#x2F;MIPS，多平台BPF&lt;&#x2F;li&gt;
&lt;li&gt;2018 BTF，跨内核版本类型格式&lt;&#x2F;li&gt;
&lt;li&gt;2019 尾调用和热更新&lt;&#x2F;li&gt;
&lt;li&gt;2020 LSM和TCP拥塞控制&lt;&#x2F;li&gt;
&lt;li&gt;2021 eBPF基金会&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;产品生态&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;2017 Facebook，生产环境中的负载均衡Katran&lt;&#x2F;li&gt;
&lt;li&gt;2018 Cloudflare，生产环境中的DDoS&#x2F;防火墙等&lt;&#x2F;li&gt;
&lt;li&gt;2018 Android 9，流量监控，包括DHCPClient&lt;&#x2F;li&gt;
&lt;li&gt;2018 Netronome，Agilio智能网卡支持XDP&lt;&#x2F;li&gt;
&lt;li&gt;2018 DPDK，支持BPF(不包括MAP和尾调用)&lt;&#x2F;li&gt;
&lt;li&gt;2019 Google，KRSI 内核运行时安全助手(Kernel V5.7)&lt;&#x2F;li&gt;
&lt;li&gt;2019 Sysdig，Falco捐赠为k8s安全基础&lt;&#x2F;li&gt;
&lt;li&gt;2020 Nvidia，Mellanox智能网卡支持XDP(￥3千~9千)&lt;&#x2F;li&gt;
&lt;li&gt;2020 微软，Linux版Sysmon，eBPF for Windows&lt;&#x2F;li&gt;
&lt;li&gt;2020 字节，高性能网络 ACL&lt;&#x2F;li&gt;
&lt;li&gt;2020 阿里云，基于Cilium加速和扩展&lt;&#x2F;li&gt;
&lt;li&gt;2021 Cilium，Service mesh (无Sidecar)&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;dpdkyu-bpfsheng-tai&quot;&gt;DPDK与BPF生态&lt;&#x2F;h3&gt;
&lt;p&gt;面向生态和开发者不同&lt;&#x2F;p&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;产品分类&lt;&#x2F;th&gt;&lt;th&gt;DPDK&lt;&#x2F;th&gt;&lt;th&gt;BPF&lt;&#x2F;th&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;thead&gt;&lt;tbody&gt;
&lt;tr&gt;&lt;td&gt;安全&lt;&#x2F;td&gt;&lt;td&gt;&lt;&#x2F;td&gt;&lt;td&gt;Falco&#x2F;Cilium&#x2F;L4drop&#x2F;...&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;可观测性&lt;&#x2F;td&gt;&lt;td&gt;&lt;&#x2F;td&gt;&lt;td&gt;Hubble&#x2F;L3AF&#x2F;Tracee&#x2F;...&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;网络&lt;&#x2F;td&gt;&lt;td&gt;DPVS&#x2F;OVS&#x2F;FD.IO&#x2F;VPP&lt;&#x2F;td&gt;&lt;td&gt;Katran&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;SDKs&lt;&#x2F;td&gt;&lt;td&gt;C++&#x2F;GO&lt;&#x2F;td&gt;&lt;td&gt;C++&#x2F;Rust&#x2F;GO&#x2F;Python&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;内核&lt;&#x2F;td&gt;&lt;td&gt;TCP栈 F-Stack&#x2F;mTCP&lt;&#x2F;td&gt;&lt;td&gt;helper-API&#x2F;Maps&#x2F;Verfier&amp;amp;JIT&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;市场生态&lt;&#x2F;td&gt;&lt;td&gt;关注硬件能力的虚拟化和共享，硬件厂商推动，是虚拟化技术vt-x&#x2F;ept等在网络IO上的演进&lt;&#x2F;td&gt;&lt;td&gt;关注内核能力的分离和复用云厂商推动，是云原生技术演进对本地生态的融合&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;
&lt;p&gt;表1：两种不同利益的基金会&lt;&#x2F;p&gt;
&lt;h2 id=&quot;bpfji-zhu-jie-shao-xing-neng-fen-xi&quot;&gt;BPF技术介绍 性能分析&lt;&#x2F;h2&gt;
&lt;h3 id=&quot;dpdkyu-pf-ringji-zhu-yi-tong-ji-zhu-xiang-jin&quot;&gt;DPDK与PF_RING技术异同  - 技术相近&lt;&#x2F;h3&gt;
&lt;p&gt;&lt;img src=&quot;..&#x2F;images&#x2F;bpf-xdp&#x2F;05pf_ring.png&quot; alt=&quot;PF_RING&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;图3：PF_RING原理&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;..&#x2F;images&#x2F;bpf-xdp&#x2F;06dpdk.png&quot; alt=&quot;DPDK&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;图4：DPDK模块结构&lt;&#x2F;p&gt;
&lt;p&gt;相同&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;UIO+PMD主动轮询 减少中断和CPU上下文切换&lt;&#x2F;li&gt;
&lt;li&gt;UIO+mmap 实现零拷贝&lt;&#x2F;li&gt;
&lt;li&gt;HugePages 减少TLB 失效&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;差异&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;PF_RING 分普通版和ZC(zero copy)高性能版本&lt;&#x2F;li&gt;
&lt;li&gt;ZC许可证收费，DPDK 免费&lt;&#x2F;li&gt;
&lt;li&gt;ZC与DPDK的性能基本持平&lt;&#x2F;li&gt;
&lt;li&gt;ZC应用层API易于使用，开发难度远小于DPDK&lt;&#x2F;li&gt;
&lt;li&gt;ZC是意大利ntop公司下的一款产品，生态小&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;bpfde-wang-luo-ji-zhu-te-dian&quot;&gt;BPF的网络技术特点&lt;&#x2F;h3&gt;
&lt;p&gt;&lt;img src=&quot;..&#x2F;images&#x2F;bpf-xdp&#x2F;08BPF-hook.png&quot; alt=&quot;BPF模块结构&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;图5：BPF模块结构&lt;&#x2F;p&gt;
&lt;p&gt;BPF的7种挂载点，覆盖全生命周期流程&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;uprobe&lt;&#x2F;li&gt;
&lt;li&gt;syscall&lt;&#x2F;li&gt;
&lt;li&gt;sockmap&#x2F;sockops&lt;&#x2F;li&gt;
&lt;li&gt;kprobe&lt;&#x2F;li&gt;
&lt;li&gt;cgroups&lt;&#x2F;li&gt;
&lt;li&gt;tc&lt;&#x2F;li&gt;
&lt;li&gt;xdp&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;&lt;img src=&quot;..&#x2F;images&#x2F;bpf-xdp&#x2F;07xdp-pkt.png&quot; alt=&quot;XDP程序的4种包处理方式&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;图6：BPF的XDP程序的4种包处理方式&lt;&#x2F;p&gt;
&lt;p&gt;XDP的4种包处理方式&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;PASS 放行到kernel &lt;&#x2F;li&gt;
&lt;li&gt;DROP 丢弃，不到kernel&lt;&#x2F;li&gt;
&lt;li&gt;REDIRECT 转发其他处理&lt;&#x2F;li&gt;
&lt;li&gt;TX 原路返回(用于阻断和重定向)&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;h3 id=&quot;xdpde-xie-zai-wang-qia-xing-neng&quot;&gt;XDP的卸载网卡性能&lt;&#x2F;h3&gt;
&lt;p&gt;Netronome智能网卡数据&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;XDP 3个hook点(网卡Offload&#x2F;内核前Native&#x2F;内核中Generic)&lt;&#x2F;li&gt;
&lt;li&gt;Offload 1 core比Native 8 core快近似1&#x2F;3倍&lt;&#x2F;li&gt;
&lt;li&gt;Native下比DPDK稍慢，性能相差不多 Stackoverflow  Redhat&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;&lt;img src=&quot;..&#x2F;images&#x2F;bpf-xdp&#x2F;09netonome-lb.png&quot; alt=&quot;XDP的3种挂载模式的性能&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;图7：XDP的3种挂载模式的性能&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;..&#x2F;images&#x2F;bpf-xdp&#x2F;10netonome-layers.png&quot; alt=&quot;XDP在网络协议栈的位置&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;图8：XDP在网络协议栈的位置&lt;&#x2F;p&gt;
&lt;h3 id=&quot;nacya-ce-ji-lu&quot;&gt;NAC压测记录&lt;&#x2F;h3&gt;
&lt;p&gt;3种类型的吞吐率,NAC WSL2虚拟机&lt;&#x2F;p&gt;
&lt;p&gt;XDP_DROP 直接丢弃&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;sh&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-sh &quot;&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;❯&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; tcpreplay&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt; -t -i&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; lo t.pcap&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;Actual:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; 56320 packets (46419288 bytes&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;sent&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; in 1.10 seconds&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;Rated:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; 42062496.6 Bps, 336.49 Mbps, 51033.95 pps&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;Flows:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; 1091 flows, 988.60 fps, 56290 flow packets, 30 non-flow&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;XDP_TX 阻断、重定向&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;sh&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-sh &quot;&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;Actual:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; 56320 packets (46419288 bytes&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;sent&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; in 1.30 seconds&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;Rated:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; 35446666.1 Bps, 283.57 Mbps, 43007.04 pps&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;Flows:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; 1091 flows, 833.10 fps, 56290 flow packets, 30 non-flow&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;XDP_TX + map_perf 阻断并上报应用&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;sh&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-sh &quot;&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;Actual:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; 56320 packets (46419288 bytes&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;sent&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; in 1.49 seconds&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;Rated:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; 31016641.1 Bps, 248.13 Mbps, 37632.14 pps&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;Flows:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; 1091 flows, 728.98 fps, 56290 flow packets, 30 non-flow&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;竞品 10个千兆电口,每秒事务数1000TPS，最大吞吐量500Mbps，最大并发连接数:1000(条)&lt;&#x2F;p&gt;
&lt;h3 id=&quot;bpfji-zhu-jie-shao-an-li-fen-xi&quot;&gt;BPF技术介绍 - 案例分析&lt;&#x2F;h3&gt;
&lt;p&gt;实际案例 cloudflare DDOS 
Mirai僵尸网络的3次攻击&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;..&#x2F;images&#x2F;bpf-xdp&#x2F;11ddos-miral.png&quot; alt=&quot;DDOS时网络承载的流量&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;图9：DDOS时网络承载的流量&lt;&#x2F;p&gt;
&lt;p&gt;2020.07， 654Gbps， SYN 洪水和UDP 洪水 
2021.08 ，1.2Tbps， SYN 洪水和UDP 洪水，最大HTTP请求2500万次&#x2F;s , 3 秒内被阻止
2021.11， 2Tbps， 1分钟的DNS 放大攻击和 UDP 洪水，1.5 万个僵尸 （下图）
近2Tbps&lt;&#x2F;p&gt;
&lt;p&gt;DDOS缓解流程 
生态链：全BPF系列产品集成&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;..&#x2F;images&#x2F;bpf-xdp&#x2F;12ddos-xdp.png&quot; alt=&quot;缓解DDOS时使用XDP的工具链&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;图10：缓解DDOS时使用XDP的工具链&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;接收样本分析到攻击时自动推送缓解策略&lt;&#x2F;li&gt;
&lt;li&gt;再在每台服务器上执行本地缓解策略,&lt;&#x2F;li&gt;
&lt;li&gt;DDos的L4Drop (XDP)&lt;&#x2F;li&gt;
&lt;li&gt;LB的Unimog     (XDP) &lt;&#x2F;li&gt;
&lt;li&gt;防火墙的Magic firewall (BPF xt_btf)&lt;&#x2F;li&gt;
&lt;li&gt;分发和监视&lt;&#x2F;li&gt;
&lt;li&gt;UDP限速 (BPF SO_ATTACH_BPF)&lt;&#x2F;li&gt;
&lt;li&gt;上报指标的ebpf_exporter&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;&lt;img src=&quot;..&#x2F;images&#x2F;bpf-xdp&#x2F;13ddos-bpf.png&quot; alt=&quot;缓解DDOS时使用XDP的协议找技术&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;图11：缓解DDOS时使用XDP的协议找技术&lt;&#x2F;p&gt;
&lt;h3 id=&quot;p0fzhi-wen-ku-shuo-ming-tcp-headerte-zheng&quot;&gt;p0f指纹库说明 TCP header特征&lt;&#x2F;h3&gt;
&lt;p&gt;DDOS流量指纹识别 &lt;&#x2F;p&gt;
&lt;p&gt;指纹类型&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#f9f9f9;color:#111111;&quot;&gt;&lt;code&gt;&lt;span&gt;Windows XP: 4:120+8:0:1452:65535,0   :mss,nop,nop,sok   :df,id+:0&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;Windows 7:  4:128:0:*     :8192,8    :mss,nop,ws,nop,sok:df,id+:0&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;Windows 11: 4:128+0:0:1460:mss*44,8  :mss,nop,ws,nop,sok:df,id+:0&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;ubuntu 14:  4:64   :0     :*:mss*10,6:mss,sok,ts,nop,ws :df,id+:0&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;TCP指纹 判断依据，Linux的TTL为64，Win是128，flags的数量和位置，Linux与Win不同&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#f9f9f9;color:#111111;&quot;&gt;&lt;code&gt;&lt;span&gt;4: IP version &lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  64: TTL   &lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;     0: IP options length&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;       *: MSS maximum segment size&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;         mss*10,6: TCP window size and scale&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;                  mss,sok,ts,nop,ws: TCP Options(sok:selective ACK permitted)&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;                                 df,id+: quirks(df: don&amp;#39;t fragment)&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;                                        0 TCP Payload Length&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;fu-zai-jun-heng-zhong-de-liu-liang-biao-shi&quot;&gt;负载均衡中的流量标识&lt;&#x2F;h3&gt;
&lt;p&gt;Facebook katran TCP option添加自定义ID&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;..&#x2F;images&#x2F;bpf-xdp&#x2F;14katran.png&quot; alt=&quot;负载均衡时XDP在L4层与其他服务间的关系&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;图12：负载均衡时XDP在L4层与其他服务间的关系&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;通过将server_id加在TCP头中实现无状态路由机制&lt;&#x2F;li&gt;
&lt;li&gt;处理TCP头额外开销(CPU&#x2F;memory)非常小&lt;&#x2F;li&gt;
&lt;li&gt;根据server_id使用Maglev Hash变种选择后端&lt;&#x2F;li&gt;
&lt;li&gt;只适用于无防火墙的内网&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;拦截事件点读写server_id&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;..&#x2F;images&#x2F;bpf-xdp&#x2F;15katran-serverid.png&quot; alt=&quot;XDP在L4层负载均衡时用到的事件&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;图13：XDP在L4层负载均衡时用到的事件&lt;&#x2F;p&gt;
&lt;h3 id=&quot;ke-guan-ce-xing-diao-shi&quot;&gt;可观测性 调试&lt;&#x2F;h3&gt;
&lt;p&gt;cilium pwru (packet, where are you?)&lt;&#x2F;p&gt;
&lt;p&gt;跟踪内核中的网络包的API调用&lt;&#x2F;p&gt;
&lt;h3 id=&quot;bpfji-zhu-jie-shao-ji-zhu-fen-xi&quot;&gt;BPF技术介绍 - 技术分析&lt;&#x2F;h3&gt;
&lt;p&gt;BPF开发运行机制&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;..&#x2F;images&#x2F;bpf-xdp&#x2F;16bpf-flow.png&quot; alt=&quot;BPF生命周期流程&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;图14：BPF生命周期流程(网络的XDP和TC)&lt;&#x2F;p&gt;
&lt;p&gt;1.编写、编译
2.校验
3.BPF字节码到机器码
4.挂载执行
6.与系统通信
5.XDP的DROP&#x2F;PASS&#x2F;TX&#x2F;REDIRECT&lt;&#x2F;p&gt;
&lt;h3 id=&quot;cbpfxu-ni-ji-yuan-li&quot;&gt;cBPF虚拟机原理&lt;&#x2F;h3&gt;
&lt;p&gt;&lt;img src=&quot;..&#x2F;images&#x2F;bpf-xdp&#x2F;17bpf-model1.png&quot; alt=&quot;代码在编译器的分解&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;图15：代码在编译器的分解&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;..&#x2F;images&#x2F;bpf-xdp&#x2F;18bpf-model2.png&quot; alt=&quot;BPF转换成DAG&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;图16：BPF转换成DAG&lt;&#x2F;p&gt;
&lt;p&gt;BPF 基于寄存器虚拟机，程序最终转换成一个DAG，并由内核来执行
过滤器表达式在两种模式下的编译分解，见下图
模型1: 制约性能最大的问题，有重复计算
模型2: 等价于模型1，只需6次布尔运算，遍历完整棵树
模型2 eBPF
模型1 cBPF&lt;&#x2F;p&gt;
&lt;h3 id=&quot;cbpfxu-ni-ji-zhi-xing-liu-cheng&quot;&gt;cBPF虚拟机执行流程&lt;&#x2F;h3&gt;
&lt;p&gt;&lt;img src=&quot;..&#x2F;images&#x2F;bpf-xdp&#x2F;19bpf-asm1.png&quot; alt=&quot;BPF内部执行流程&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;图17：BPF内部执行流程&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;..&#x2F;images&#x2F;bpf-xdp&#x2F;20bpf-asm2.png&quot; alt=&quot;BPF指令码解释&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;图18：BPF指令码解释&lt;&#x2F;p&gt;
&lt;p&gt;$ tcpdump tcp port 443 -d&lt;&#x2F;p&gt;
&lt;h3 id=&quot;bpfxian-you-wen-ti&quot;&gt;BPF现有问题&lt;&#x2F;h3&gt;
&lt;p&gt;内核版本和安全&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;内核版本支持 Linux &amp;gt; V4.18&lt;&#x2F;li&gt;
&lt;li&gt;XDP及其MAP的支持&lt;&#x2F;li&gt;
&lt;li&gt;BTF跨不同版本内核运行&lt;&#x2F;li&gt;
&lt;li&gt;安全 提权漏洞 Linux V5.7~V5.8&lt;&#x2F;li&gt;
&lt;li&gt;CVE-2020-27194：Verify时越界读写造成&lt;&#x2F;li&gt;
&lt;li&gt;CVE-2020-8835：Verify时常数变量取值范围的逻辑错误&lt;&#x2F;li&gt;
&lt;li&gt;CVE-2020-27194：Verify时寄存器边界跟踪&lt;&#x2F;li&gt;
&lt;li&gt;容器逃逸: 编写Rootkit，修改用户空间，hook网络数据&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</content>
	</entry>
</feed>
