<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en">
	<title>个人学习总结</title>
	<subtitle>输出是最好的学习方式</subtitle>
	<link href="https://jimluo.github.io/atom.xml" rel="self" type="application/atom+xml"/>
  <link href="https://jimluo.github.io/"/>
	<generator uri="https://www.getzola.org/">Zola</generator>
	<updated>2022-08-15T00:00:00+00:00</updated>
	<id>https://jimluo.github.io/atom.xml</id>
	<entry xml:lang="en">
		<title>[翻译]Rust中的密码验证,从头开始,攻击和最佳实践</title>
		<published>2022-08-15T00:00:00+00:00</published>
		<updated>2022-08-15T00:00:00+00:00</updated>
		<link href="https://jimluo.github.io/rust-password-auth-translate/" type="text/html"/>
		<id>https://jimluo.github.io/rust-password-auth-translate/</id>
		<content type="html">&lt;p&gt;本文翻译自书&lt;a href=&quot;https:&#x2F;&#x2F;www.zero2prod.com&#x2F;&quot;&gt;Zero To Production In Rust&lt;&#x2F;a&gt;作者的blog章节&lt;a href=&quot;https:&#x2F;&#x2F;www.lpalmieri.com&#x2F;posts&#x2F;password-authentication-in-rust&#x2F;#blocking-alice&quot;&gt;Rust中的密码验证&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;机器翻译味道浓厚，如有不妥请麻告知。
本文讲了支付系统中遇到的安全问题，层层深入问题，遇到的业务及安全知识逐步推开，再辅之以代码就单元测试，学起来不会就不会从入门到放弃了。&lt;&#x2F;p&gt;
&lt;p&gt;我再其中学到安全知识如下&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;密码认证， Basic Auth&lt;&#x2F;li&gt;
&lt;li&gt;密码存储，（本文重点），加密密码及其攻击方式和预防方法&lt;&#x2F;li&gt;
&lt;li&gt;密码网络交换，TLS&lt;&#x2F;li&gt;
&lt;li&gt;认证流程， OAuth&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;主要用到RustCrypto crate，其中sha3,base64,argon2&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;以下正文开始&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;本文是Rust中从零到生产的示例,一本关于Rust后端开发的书。&lt;br&gt;
您可以在zero2prod.com上获得该书的副本。&lt;br&gt;
邮件订阅后能及时收到新发布文章的通知。&lt;br&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;h2 id=&quot;1-bao-hu-wo-men-de-api&quot;&gt;1. 保护我们的 API&lt;&#x2F;h2&gt;
&lt;p&gt;在第9章中,我们为API添加了一个新端点,POST &#x2F;newsletters.
它将新闻简报问题作为输入,并向所有的订阅者发送电子邮件。&lt;&#x2F;p&gt;
&lt;p&gt;但是我们有一个问题, 任何人都可以点击API并将他们想要的任何内容广播到我们的整个邮件列表中。&lt;&#x2F;p&gt;
&lt;p&gt;是时候升级我们的API安全能力了。&lt;br&gt;
虽然密码身份验证是最简单的身份验证方法,但其中有一些坑,所以我们将从头开始基本身份验证,从中检查针对API的几类攻击, 以及应对方法。&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;出于教学目的,本章和书中其他章节里处理的一样,从犯错中学习。如果您不想养成不良的安全习惯,请务必阅读到文章末尾！&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;第10章,第0部分&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;保护我们的API&lt;&#x2F;li&gt;
&lt;li&gt;认证
&lt;ol&gt;
&lt;li&gt;缺点
&lt;ol&gt;
&lt;li&gt;他们知道的事情&lt;&#x2F;li&gt;
&lt;li&gt;他们有的东西&lt;&#x2F;li&gt;
&lt;li&gt;他们是什么&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;多因素身份验证&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;基于密码的认证
&lt;ol&gt;
&lt;li&gt;基本认证
&lt;ol&gt;
&lt;li&gt;提取凭证&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;密码验证,天真的方法&lt;&#x2F;li&gt;
&lt;li&gt;密码存储
&lt;ol&gt;
&lt;li&gt;无需存储原始密码&lt;&#x2F;li&gt;
&lt;li&gt;使用加密哈希&lt;&#x2F;li&gt;
&lt;li&gt;原像攻击&lt;&#x2F;li&gt;
&lt;li&gt;朴素字典攻击&lt;&#x2F;li&gt;
&lt;li&gt;字典攻击&lt;&#x2F;li&gt;
&lt;li&gt;Aragon2&lt;&#x2F;li&gt;
&lt;li&gt;盐&lt;&#x2F;li&gt;
&lt;li&gt;PHC字符串格式&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;不要阻塞异步执行器
&lt;ol&gt;
&lt;li&gt;跟踪上下文是线程本地的&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;用户枚举&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;安全吗？
&lt;ol&gt;
&lt;li&gt;传输层安全 (TLS)&lt;&#x2F;li&gt;
&lt;li&gt;重设密码&lt;&#x2F;li&gt;
&lt;li&gt;交互类型&lt;&#x2F;li&gt;
&lt;li&gt;机器对机器
&lt;ol&gt;
&lt;li&gt;通过 OAuth2的客户端凭据&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;人通过浏览器
&lt;ol&gt;
&lt;li&gt;联合身份&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;机器对机器,代表一个人&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;我们接下来应该做什么&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;h2 id=&quot;2-ren-zheng&quot;&gt;2. 认证&lt;&#x2F;h2&gt;
&lt;p&gt;我们需要一种方法来检查&lt;strong&gt;谁&lt;&#x2F;strong&gt;调用POST &#x2F;newsletters。
只有少数人（负责内容的人）能发送邮件到整个邮件列表。&lt;&#x2F;p&gt;
&lt;p&gt;先得找到调用者的&lt;strong&gt;身份&lt;&#x2F;strong&gt;,再对他们进行身份&lt;strong&gt;验证&lt;&#x2F;strong&gt;。
如何做？&lt;&#x2F;p&gt;
&lt;p&gt;要求调用者提供的自己独特信息。
这有多种方法,都归为3类：&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;他们知道的东西（例如密码、PIN、安全问题）；&lt;&#x2F;li&gt;
&lt;li&gt;他们拥有的东西（例如智能手机,使用身份验证器应用程序）；&lt;&#x2F;li&gt;
&lt;li&gt;它们是某种东西（例如指纹、Apple 的 Face ID）。&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;每种方法都有其弱点。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;2-1-que-dian&quot;&gt;2.1. 缺点&lt;&#x2F;h3&gt;
&lt;h4 id=&quot;2-1-1-ta-men-zhi-dao-de-shi-qing&quot;&gt;2.1.1. 他们知道的事情&lt;&#x2F;h4&gt;
&lt;p&gt;密码必须够长,短的容易受到暴力攻击。&lt;br&gt;
密码必须独特,公开信息（例如出生日期、家庭成员姓名等）不应给攻击者任何“猜测”密码的机会。&lt;br&gt;
密码不应该重复使用,如果其中任何一个被泄露,您就有可能授予对共享相同密码的其他服务的访问权限。&lt;br&gt;&lt;&#x2F;p&gt;
&lt;p&gt;平均而言,一个人拥有100个或更多的在线帐户,不能要求他们记住数百个长的独特密码。
密码管理器有所帮助,但它们还不是主流,而且用户体验通常不是最理想的。&lt;&#x2F;p&gt;
&lt;h4 id=&quot;2-1-2-ta-men-yong-you-de-dong-xi&quot;&gt;2.1.2. 他们拥有的东西&lt;&#x2F;h4&gt;
&lt;p&gt;智能手机和U2F密钥可能会丢失,从而将用户锁定在他们的帐户之外。它们也可能被窃取或泄露,从而为攻击者提供了冒充受害者的机会。 &lt;&#x2F;p&gt;
&lt;h4 id=&quot;2-1-3-ta-men-shi-mou-chong-dong-xi&quot;&gt;2.1.3.它们是某种东西&lt;&#x2F;h4&gt;
&lt;p&gt;生物识别技术,与密码不同,无法更改,您无法“旋转”指纹或更改视网膜血管的图案。事实证明,伪造指纹比大多数人想象的要容易,这也是政府机构经常能获得到的信息,他们可能会滥用或丢失它。 &lt;&#x2F;p&gt;
&lt;h3 id=&quot;2-2-duo-yin-zi-shen-fen-yan-zheng&quot;&gt;2.2.多因子身份验证&lt;&#x2F;h3&gt;
&lt;p&gt;既然每种方法都有自己的缺陷,那么我们应该怎么做呢？好吧,我们可以把它们结合起来！&lt;&#x2F;p&gt;
&lt;p&gt;这几乎就是多因素身份验证(MFA),它要求用户提供至少两种不同类型的身份验证因素才能获得访问权限。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;3-ji-yu-mi-ma-de-ren-zheng&quot;&gt;3. 基于密码的认证&lt;&#x2F;h2&gt;
&lt;p&gt;让我们跨越理论到实践：我们如何实现认证？&lt;&#x2F;p&gt;
&lt;p&gt;密码看起来是我们提到的三种方法中最简单的方法。
我们应该如何将用户名和密码传递给我们的API？&lt;&#x2F;p&gt;
&lt;h3 id=&quot;3-1-ji-ben-ren-zheng&quot;&gt;3.1. 基本认证&lt;&#x2F;h3&gt;
&lt;p&gt;我们可以使用“基本”身份验证方案,这是Internet工程任务组 (IETF) 在RFC 2617中定义的标准,后来由RFC 7617更新。&lt;&#x2F;p&gt;
&lt;p&gt;https:&#x2F;&#x2F;developer.mozilla.org&#x2F;zh-CN&#x2F;docs&#x2F;Web&#x2F;HTTP&#x2F;Authentication&lt;&#x2F;p&gt;
&lt;p&gt;API必须在传入请求中查找Authorization header,其结构如下：&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#f9f9f9;color:#111111;&quot;&gt;&lt;code&gt;&lt;span&gt;Authorization: Basic &amp;lt;encoded credentials&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;其中&lt;encoded credentials&gt;是{username}:{password}&lt;sup class=&quot;footnote-reference&quot;&gt;&lt;a href=&quot;#1&quot;&gt;1&lt;&#x2F;a&gt;&lt;&#x2F;sup&gt;的base64编码&lt;&#x2F;p&gt;
&lt;p&gt;根据规范,我们需要将API划分为保护空间或realm,同一realm内的资源使用相同的身份验证方案和一组凭据进行保护。
我们只要保护一个端点POST &#x2F;newsletters。因此,我们将拥有一个名为publish的realm。&lt;&#x2F;p&gt;
&lt;p&gt;API必须拒绝所有缺少标头或使用无效凭据的请求,响应必须使用401 Unauthorized状态代码并包含特殊标头WWW-Authenticate, 包含质询。
质询是一个字符串,向API调用者解释我们希望在相关realm看到什么类型的身份验证方案。
在我们的例子中,使用基本身份验证,它应该是：&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#f9f9f9;color:#111111;&quot;&gt;&lt;code&gt;&lt;span&gt;HTTP&#x2F;1.1 401 Unauthorized&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;WWW-Authenticate: Basic realm=&amp;quot;publish&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;让我们来实现它！&lt;&#x2F;p&gt;
&lt;h4 id=&quot;3-1-1-ti-qu-ping-zheng&quot;&gt;3.1.1. 提取凭证&lt;&#x2F;h4&gt;
&lt;p&gt;从传入的请求中提取用户名和密码将是我们的第一个里程碑。&lt;br&gt;
让我们从一个不愉快的案例开始,被拒绝的传入请求,没有Authorization标头。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rs&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-rs &quot;&gt;&lt;code class=&quot;language-rs&quot; data-lang=&quot;rs&quot;&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F;! tests&#x2F;api&#x2F;newsletter.rs&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; [...]&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;#[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;tokio&lt;&#x2F;span&gt;&lt;span&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;test&lt;&#x2F;span&gt;&lt;span&gt;]&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;async &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;requests_missing_authorization_are_rejected&lt;&#x2F;span&gt;&lt;span&gt;() {&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; Arrange&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; app &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;spawn_app&lt;&#x2F;span&gt;&lt;span&gt;().await;&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; response &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;reqwest::Client::new()&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;post&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span&gt;format!(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;{}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&#x2F;newsletters&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span&gt;app.address))&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;json&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span&gt;serde_json::json&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;!&lt;&#x2F;span&gt;&lt;span&gt;({&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;title&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;Newsletter title&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;,&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;content&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;: {&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;text&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;Newsletter body as plain text&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;,&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;html&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;&amp;lt;p&amp;gt;Newsletter body as HTML&amp;lt;&#x2F;p&amp;gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;,&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;            }&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        }))&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;send&lt;&#x2F;span&gt;&lt;span&gt;()&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        .await&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;expect&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;Failed to execute request.&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;);&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; Assert&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    assert_eq!(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;401&lt;&#x2F;span&gt;&lt;span&gt;, response.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;status&lt;&#x2F;span&gt;&lt;span&gt;().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;as_u16&lt;&#x2F;span&gt;&lt;span&gt;());&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    assert_eq!(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;r&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;#&amp;quot;Basic realm=&amp;quot;publish&amp;quot;&amp;quot;#&lt;&#x2F;span&gt;&lt;span&gt;, response.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;headers&lt;&#x2F;span&gt;&lt;span&gt;()[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;WWW-Authenticate&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;]);&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;}&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;它在第一个断言处失败：&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;sh&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-sh &quot;&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;thread &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;newsletter::requests_missing_authorization_are_rejected&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; panicked at &lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;assertion failed: `(left == right)`&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;  left: `401`,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt; right: `400`&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;我们必须更新程序以满足新的要求。
我们可以使用HttpRequest提取器来访问与传入请求关联的标头：&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rs&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-rs &quot;&gt;&lt;code class=&quot;language-rs&quot; data-lang=&quot;rs&quot;&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F;! src&#x2F;routes&#x2F;newsletters.rs&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; [...]&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;use &lt;&#x2F;span&gt;&lt;span&gt;secrecy::Secret;&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;use &lt;&#x2F;span&gt;&lt;span&gt;actix_web::http::{HttpRequest, header::HeaderMap};&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;pub&lt;&#x2F;span&gt;&lt;span&gt; async &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;publish_newsletter&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; [...]&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; New extractor!&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;request&lt;&#x2F;span&gt;&lt;span&gt;: HttpRequest,&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;) -&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;Result&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;HttpResponse, PublishError&amp;gt; {&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; _credentials &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;basic_authentication&lt;&#x2F;span&gt;&lt;span&gt;(request.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;headers&lt;&#x2F;span&gt;&lt;span&gt;());&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; [...]&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;}&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;struct &lt;&#x2F;span&gt;&lt;span&gt;Credentials {&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;username&lt;&#x2F;span&gt;&lt;span&gt;: String,&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;password&lt;&#x2F;span&gt;&lt;span&gt;: Secret&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;String&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;,&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;}&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;basic_authentication&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;headers&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span&gt;HeaderMap) -&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;Result&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;Credentials, anyhow::Error&amp;gt; {&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    todo!()&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;}&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;要提取凭证,我们需要处理 base64 编码。
让我们将base64 crate添加为依赖项：&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;toml&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-toml &quot;&gt;&lt;code class=&quot;language-toml&quot; data-lang=&quot;toml&quot;&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;dependencies&lt;&#x2F;span&gt;&lt;span&gt;]&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;# [...]&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;base64 &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;0.13&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;我们现在可以写下basic_authentication:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rs&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-rs &quot;&gt;&lt;code class=&quot;language-rs&quot; data-lang=&quot;rs&quot;&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F;! src&#x2F;routes&#x2F;newsletters.rs&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; [...]&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;basic_authentication&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;headers&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span&gt;HeaderMap) -&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;Result&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;Credentials, anyhow::Error&amp;gt; {&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; The header value, if present, must be a valid UTF8 string&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; header_value &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; headers&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;get&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;Authorization&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;context&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;The &amp;#39;Authorization&amp;#39; header was missing&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;?&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;to_str&lt;&#x2F;span&gt;&lt;span&gt;()&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;context&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;The &amp;#39;Authorization&amp;#39; header was not a valid UTF8 string.&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;?&lt;&#x2F;span&gt;&lt;span&gt;;&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; base64encoded_segment &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; header_value&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;strip_prefix&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;Basic &amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;context&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;The authorization scheme was not &amp;#39;Basic&amp;#39;.&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;?&lt;&#x2F;span&gt;&lt;span&gt;;&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; decoded_bytes &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;base64::decode_config(base64encoded_segment, base64::STANDARD)&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;context&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;Failed to base64-decode &amp;#39;Basic&amp;#39; credentials.&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;?&lt;&#x2F;span&gt;&lt;span&gt;;&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; decoded_credentials &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;String&lt;&#x2F;span&gt;&lt;span&gt;::from_utf8(decoded_bytes)&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;context&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;The decoded credential string is not valid UTF8.&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;?&lt;&#x2F;span&gt;&lt;span&gt;;&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; Split into two segments, using &amp;#39;:&amp;#39; as delimitator&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;let mut&lt;&#x2F;span&gt;&lt;span&gt; credentials &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; decoded_credentials.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;splitn&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;:&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;);&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; username &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; credentials&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;next&lt;&#x2F;span&gt;&lt;span&gt;()&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;ok_or_else&lt;&#x2F;span&gt;&lt;span&gt;(|| anyhow::anyhow&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;!&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;A username must be provided in &amp;#39;Basic&amp;#39; auth.&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;))&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;?&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;to_string&lt;&#x2F;span&gt;&lt;span&gt;();&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; password &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; credentials&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;next&lt;&#x2F;span&gt;&lt;span&gt;()&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;ok_or_else&lt;&#x2F;span&gt;&lt;span&gt;(|| anyhow::anyhow&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;!&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;A password must be provided in &amp;#39;Basic&amp;#39; auth.&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;))&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;?&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;to_string&lt;&#x2F;span&gt;&lt;span&gt;();&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;Ok&lt;&#x2F;span&gt;&lt;span&gt;(Credentials {&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        username,&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        password: Secret::new(password)&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    })&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;}&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;花点时间逐行浏览代码,并完全理解发生了什么。许多可能出错的操作！&lt;br&gt;
打开RFC比对本书内容会有所帮助！&lt;br&gt;&lt;&#x2F;p&gt;
&lt;p&gt;我们还没有完成,我们的测试仍然失败。&lt;br&gt;
我们需要对返回的错误采取行动basic_authentication：&lt;br&gt;&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rs&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-rs &quot;&gt;&lt;code class=&quot;language-rs&quot; data-lang=&quot;rs&quot;&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F;! src&#x2F;routes&#x2F;newsletters.rs&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; [...]&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;#[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;derive&lt;&#x2F;span&gt;&lt;span&gt;(thiserror::Error)]&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;pub enum &lt;&#x2F;span&gt;&lt;span&gt;PublishError {&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; New error variant!&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    #[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;error&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;Authentication failed.&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;)]&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    AuthError(#[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;source&lt;&#x2F;span&gt;&lt;span&gt;] anyhow::Error),&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    #[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;error&lt;&#x2F;span&gt;&lt;span&gt;(transparent)]&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    UnexpectedError(#[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;from&lt;&#x2F;span&gt;&lt;span&gt;] anyhow::Error),&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;}&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;impl &lt;&#x2F;span&gt;&lt;span&gt;ResponseError &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span&gt;PublishError {&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;status_code&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;) -&amp;gt; StatusCode {&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;match &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;self &lt;&#x2F;span&gt;&lt;span&gt;{&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;            PublishError::UnexpectedError(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;_&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;StatusCode::INTERNAL_SERVER_ERROR,&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; Return a 401 for auth errors&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;            PublishError::AuthError(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;_&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;StatusCode::UNAUTHORIZED,&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        }&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    }&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;}&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;pub&lt;&#x2F;span&gt;&lt;span&gt; async &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;publish_newsletter&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;* *&#x2F;&lt;&#x2F;span&gt;&lt;span&gt;) -&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;Result&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;HttpResponse, PublishError&amp;gt; {&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; _credentials &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;basic_authentication&lt;&#x2F;span&gt;&lt;span&gt;(request.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;headers&lt;&#x2F;span&gt;&lt;span&gt;())&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; Bubble up the error, performing the necessary conversion&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;map_err&lt;&#x2F;span&gt;&lt;span&gt;(PublishError::AuthError)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;?&lt;&#x2F;span&gt;&lt;span&gt;;&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; [...]&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;}&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;我们的状态码断言高兴通过了,但完成第2个断言还缺个标题：&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;sh&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-sh &quot;&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;thread &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;newsletter::requests_missing_authorization_are_rejected&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; panicked at &lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;no entry found for key &amp;quot;WWW-Authenticate&amp;quot;&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;到目前为止,指定为每个错误返回哪个状态代码就足够了。现在我们需要更多的东西,一个标题。
我们需要将关注点ResponseError::status_code从ResponseError::error_response：&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rs&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-rs &quot;&gt;&lt;code class=&quot;language-rs&quot; data-lang=&quot;rs&quot;&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F;! src&#x2F;routes&#x2F;newsletters.rs&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; [...]&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;use &lt;&#x2F;span&gt;&lt;span&gt;actix_web::http::{StatusCode, header};&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;use &lt;&#x2F;span&gt;&lt;span&gt;actix_web::http::header::{HeaderMap, HeaderValue};&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;impl &lt;&#x2F;span&gt;&lt;span&gt;ResponseError &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span&gt;PublishError {&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;error_response&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;) -&amp;gt; HttpResponse {&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;match &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;self &lt;&#x2F;span&gt;&lt;span&gt;{&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;            PublishError::UnexpectedError(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;_&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;{&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;                HttpResponse::new(StatusCode::INTERNAL_SERVER_ERROR)&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;            }&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;            PublishError::AuthError(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;_&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;{&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;let mut&lt;&#x2F;span&gt;&lt;span&gt; response &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;HttpResponse::new(StatusCode::UNAUTHORIZED);&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; header_value &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;HeaderValue::from_str(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;r&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;#&amp;quot;Basic realm=&amp;quot;publish&amp;quot;&amp;quot;#&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;                    .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;unwrap&lt;&#x2F;span&gt;&lt;span&gt;();&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;                response&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;                    .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;headers_mut&lt;&#x2F;span&gt;&lt;span&gt;()&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;                    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; actix_web::http::header provides a collection of constants&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;                    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; for the names of several well-known&#x2F;standard HTTP headers&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;                    .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;insert&lt;&#x2F;span&gt;&lt;span&gt;(header::WWW_AUTHENTICATE, header_value);&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;                response&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;            }&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        }&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    }&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; `status_code` is invoked by the default `error_response`&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; implementation. We are providing a bespoke `error_response` implementation&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; therefore there is no need to maintain a `status_code` implementation anymore.&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;}&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;我们的认证测试通过了！
另一部分代码又报错了：&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;sh&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-sh &quot;&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;test&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; newsletter::newsletters_are_not_delivered_to_unconfirmed_subscribers ... FAILED&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;test&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; newsletter::newsletters_are_delivered_to_confirmed_subscribers ... FAILED&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;thread &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;newsletter::newsletters_are_not_delivered_to_unconfirmed_subscribers&amp;#39; &lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;panicked&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; at &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;assertion failed: `(left == right)`&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;  left: `401`,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt; right: `200`&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;thread &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;newsletter::newsletters_are_delivered_to_confirmed_subscribers&amp;#39; &lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;panicked&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; at &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;assertion failed: `(left == right)`&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;  left: `401`,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt; right: `200`&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;POST &#x2F;newsletters现在拒绝所有未经身份验证的请求,包括我们在黑盒测试中提出的请求。
我们可以通过提供用户名和密码的随机组合来止血：&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rs&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-rs &quot;&gt;&lt;code class=&quot;language-rs&quot; data-lang=&quot;rs&quot;&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F;! tests&#x2F;api&#x2F;helpers.rs&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; [...]&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;impl &lt;&#x2F;span&gt;&lt;span&gt;TestApp {&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;pub&lt;&#x2F;span&gt;&lt;span&gt; async &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;post_newsletters&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;body&lt;&#x2F;span&gt;&lt;span&gt;: serde_json::Value) -&amp;gt; reqwest::Response {&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        reqwest::Client::new()&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;            .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;post&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span&gt;format!(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;{}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&#x2F;newsletters&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.address))&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; Random credentials!&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; `reqwest` does all the encoding&#x2F;formatting heavy-lifting for us.&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;            .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;basic_auth&lt;&#x2F;span&gt;&lt;span&gt;(Uuid::new_v4().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;to_string&lt;&#x2F;span&gt;&lt;span&gt;(), &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;Some&lt;&#x2F;span&gt;&lt;span&gt;(Uuid::new_v4().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;to_string&lt;&#x2F;span&gt;&lt;span&gt;()))&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;            .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;json&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span&gt;body)&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;            .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;send&lt;&#x2F;span&gt;&lt;span&gt;()&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;            .await&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;            .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;expect&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;Failed to execute request.&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    }&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; [...]&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;}&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;测试套件再次变绿。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;3-2-mi-ma-yan-zheng-tian-zhen-de-fang-fa&quot;&gt;3.2. 密码验证,天真的方法&lt;&#x2F;h3&gt;
&lt;p&gt;接受随机凭据的身份验证层并不理想。&lt;br&gt;
我们需要开始验证我们从Authorization标头中提取的凭据,它们应该与已知用户列表进行比较。&lt;&#x2F;p&gt;
&lt;p&gt;我们将创建一个新的usersPostgres表来存储这个列表：&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#f9f9f9;color:#111111;&quot;&gt;&lt;code&gt;&lt;span&gt;sqlx migrate add create_users_table&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;架构的初稿可能如下所示：&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;sql&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-sql &quot;&gt;&lt;code class=&quot;language-sql&quot; data-lang=&quot;sql&quot;&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;,migrations&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span&gt;20210815112026_create_users_table.sql &lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;CREATE TABLE &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;users&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;   user_id uuid &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;PRIMARY KEY&lt;&#x2F;span&gt;&lt;span&gt;,&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;   username &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;TEXT &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;NOT &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;NULL&lt;&#x2F;span&gt;&lt;span&gt; UNIQUE,&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;   password &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;TEXT &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;NOT &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;NULL&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;);&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;然后,我们可以更新我们的处理程序以在每次执行身份验证时查询它：&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rs&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-rs &quot;&gt;&lt;code class=&quot;language-rs&quot; data-lang=&quot;rs&quot;&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F;! src&#x2F;routes&#x2F;newsletters.rs&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;use &lt;&#x2F;span&gt;&lt;span&gt;secrecy::ExposeSecret;&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; [...]&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;async &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;validate_credentials&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;credentials&lt;&#x2F;span&gt;&lt;span&gt;: Credentials,&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;pool&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span&gt;PgPool,&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;) -&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;Result&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;uuid::Uuid, PublishError&amp;gt; {&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; user_id: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;Option&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;_&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;sqlx::query&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;!&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;r&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;#&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;        SELECT user_id&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;        FROM users&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;        WHERE username = $1 AND password = $2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;        &amp;quot;#&lt;&#x2F;span&gt;&lt;span&gt;,&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        credentials.username,&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        credentials.password.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;expose_secret&lt;&#x2F;span&gt;&lt;span&gt;()&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    )&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;fetch_optional&lt;&#x2F;span&gt;&lt;span&gt;(pool)&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    .await&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;context&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;Failed to perform a query to validate auth credentials.&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;map_err&lt;&#x2F;span&gt;&lt;span&gt;(PublishError::UnexpectedError)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;?&lt;&#x2F;span&gt;&lt;span&gt;;&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    user_id&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;map&lt;&#x2F;span&gt;&lt;span&gt;(|&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;row&lt;&#x2F;span&gt;&lt;span&gt;| row.user_id)&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;ok_or_else&lt;&#x2F;span&gt;&lt;span&gt;(|| anyhow::anyhow&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;!&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;Invalid username or password.&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;))&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;map_err&lt;&#x2F;span&gt;&lt;span&gt;(PublishError::AuthError)&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;}&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;pub&lt;&#x2F;span&gt;&lt;span&gt; async &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;publish_newsletter&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;* *&#x2F;&lt;&#x2F;span&gt;&lt;span&gt;) -&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;Result&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;HttpResponse, PublishError&amp;gt; {&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; credentials &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;basic_authentication&lt;&#x2F;span&gt;&lt;span&gt;(request.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;headers&lt;&#x2F;span&gt;&lt;span&gt;())&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;map_err&lt;&#x2F;span&gt;&lt;span&gt;(PublishError::AuthError)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;?&lt;&#x2F;span&gt;&lt;span&gt;;&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; user_id &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;validate_credentials&lt;&#x2F;span&gt;&lt;span&gt;(credentials, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span&gt;pool).await&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;?&lt;&#x2F;span&gt;&lt;span&gt;;&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; [...]&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;}&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;记录谁在调用是个好主意POST &#x2F;newsletters,让我们在处理程序周围添加一个tracing追踪：&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rs&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-rs &quot;&gt;&lt;code class=&quot;language-rs&quot; data-lang=&quot;rs&quot;&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F;! src&#x2F;routes&#x2F;newsletters.rs&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; [...]&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;#[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;tracing&lt;&#x2F;span&gt;&lt;span&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;instrument&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    name &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;Publish a newsletter issue&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;,&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;skip&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(body, pool, email_client, request)&lt;&#x2F;span&gt;&lt;span&gt;,&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;fields&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(username&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;tracing::field::Empty, user_id&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;tracing::field::Empty)&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;)]&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;pub&lt;&#x2F;span&gt;&lt;span&gt; async &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;publish_newsletter&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;* *&#x2F;&lt;&#x2F;span&gt;&lt;span&gt;) -&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;Result&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;HttpResponse, PublishError&amp;gt; {&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; credentials &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;basic_authentication&lt;&#x2F;span&gt;&lt;span&gt;(request.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;headers&lt;&#x2F;span&gt;&lt;span&gt;())&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;map_err&lt;&#x2F;span&gt;&lt;span&gt;(PublishError::AuthError)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;?&lt;&#x2F;span&gt;&lt;span&gt;;&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    tracing::Span::current().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;record&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;username&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;,&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span&gt;tracing::field::display(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span&gt;credentials.username)&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    );&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; user_id &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;validate_credentials&lt;&#x2F;span&gt;&lt;span&gt;(credentials, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span&gt;pool).await&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;?&lt;&#x2F;span&gt;&lt;span&gt;;&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    tracing::Span::current().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;record&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;user_id&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span&gt;tracing::field::display(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span&gt;user_id));&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; [...]&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;}&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;我们现在需要更新我们的快乐路径测试以指定一个被validate_credentials.
我们将为我们的测试应用程序的每个实例生成一个测试用户。我们还没有为新闻简报编辑实现注册流程,因此我们不能采用完全黑盒的方法,我们暂时将测试用户详细信息直接注入数据库：&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rs&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-rs &quot;&gt;&lt;code class=&quot;language-rs&quot; data-lang=&quot;rs&quot;&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F;! tests&#x2F;api&#x2F;helpers.rs&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; [...]&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;pub&lt;&#x2F;span&gt;&lt;span&gt; async &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;spawn_app&lt;&#x2F;span&gt;&lt;span&gt;() -&amp;gt; TestApp {&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; [...]&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; test_app &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; TestApp {&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;* *&#x2F;&lt;&#x2F;span&gt;&lt;span&gt;};&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;add_test_user&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span&gt;test_app.db_pool).await;&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    test_app&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;}&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;async &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;add_test_user&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;pool&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span&gt;PgPool) {&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    sqlx::query&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;!&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;INSERT INTO users (user_id, username, password)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;        VALUES ($1, $2, $3)&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;,&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        Uuid::new_v4(),&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        Uuid::new_v4().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;to_string&lt;&#x2F;span&gt;&lt;span&gt;(),&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        Uuid::new_v4().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;to_string&lt;&#x2F;span&gt;&lt;span&gt;(),&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    )&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;execute&lt;&#x2F;span&gt;&lt;span&gt;(pool)&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    .await&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;expect&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;Failed to create test users.&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;);&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;}&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;TestApp将提供一个帮助方法来检索其用户名和密码&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rs&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-rs &quot;&gt;&lt;code class=&quot;language-rs&quot; data-lang=&quot;rs&quot;&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F;! tests&#x2F;api&#x2F;helpers.rs&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; [...]&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;impl &lt;&#x2F;span&gt;&lt;span&gt;TestApp {&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; [...]&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;pub&lt;&#x2F;span&gt;&lt;span&gt; async &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;test_user&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;) -&amp;gt; (String, String) {&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; row &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;sqlx::query&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;!&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;SELECT username, password FROM users LIMIT 1&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;,)&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;            .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;fetch_one&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.db_pool)&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;            .await&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;            .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;expect&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;Failed to create test users.&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;);&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        (row.username, row.password)&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    }&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;}&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;然后我们将从我们的post_newsletters方法中调用它,而不是使用随机凭据：&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rs&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-rs &quot;&gt;&lt;code class=&quot;language-rs&quot; data-lang=&quot;rs&quot;&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F;! tests&#x2F;api&#x2F;helpers.rs&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; [...]&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;impl &lt;&#x2F;span&gt;&lt;span&gt;TestApp {&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; [...]&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;pub&lt;&#x2F;span&gt;&lt;span&gt; async &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;post_newsletters&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;body&lt;&#x2F;span&gt;&lt;span&gt;: serde_json::Value) -&amp;gt; reqwest::Response {&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;let &lt;&#x2F;span&gt;&lt;span&gt;(username, password) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;test_user&lt;&#x2F;span&gt;&lt;span&gt;().await;&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        reqwest::Client::new()&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;            .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;post&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span&gt;format!(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;{}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&#x2F;newsletters&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.address))&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; No longer randomly generated on the spot!&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;            .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;basic_auth&lt;&#x2F;span&gt;&lt;span&gt;(username, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;Some&lt;&#x2F;span&gt;&lt;span&gt;(password))&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;            .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;json&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span&gt;body)&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;            .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;send&lt;&#x2F;span&gt;&lt;span&gt;()&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;            .await&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;            .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;expect&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;Failed to execute request.&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    }&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;}&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;我们所有的测试现在都通过了。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;3-3-mi-ma-cun-chu&quot;&gt;3.3. 密码存储&lt;&#x2F;h3&gt;
&lt;p&gt;在数据库中存储原始用户密码不是一个好主意。&lt;&#x2F;p&gt;
&lt;p&gt;有权访问您存储数据的攻击者可以立即开始冒充您的用户,用户名和密码都已准备就绪。&lt;br&gt;
他们甚至不必破坏您的实时数据库,未加密的备份就足够了。&lt;&#x2F;p&gt;
&lt;h4 id=&quot;3-3-1-wu-xu-cun-chu-yuan-shi-mi-ma&quot;&gt;3.3.1. 无需存储原始密码&lt;&#x2F;h4&gt;
&lt;p&gt;为什么我们首先要存储密码？&lt;br&gt;
我们需要执行相等性检查, 每次用户尝试进行身份验证时,我们都会验证他们提供的密码是否与我们期望的密码匹配。&lt;&#x2F;p&gt;
&lt;p&gt;如果平等是我们所关心的,我们可以开始设计一个更复杂的策略。&lt;br&gt;
例如,我们可以通过在比较密码之前应用一个函数来转换密码。&lt;&#x2F;p&gt;
&lt;p&gt;给定相同的输入,所有确定性函数都返回相同的输出。&lt;br&gt;
让我们的确定性函数f：psw_candidate == expected_psw 暗示 f(psw_candidate) == f(expected_psw)。&lt;br&gt;
但这还不够,如果为每个可能的输入字符串f返回怎么办？hello无论提供什么输入,密码验证都会成功。&lt;&#x2F;p&gt;
&lt;p&gt;我们需要朝相反的方向走：if f(psw_candidate) == f(expected_psw) then psw_candidate == expected_psw。
假设我们的函数f有一个附加属性,这是可能的：它必须是单射的,if x != ythen f(x) != f(y)。&lt;&#x2F;p&gt;
&lt;p&gt;如果我们有这样的功能f,我们可以完全避免存储原始密码：当用户注册时,我们计算f(password)并将其存储在我们的数据库中。password被丢弃。
当同一用户尝试登录时,我们会计算f(psw_candidate)并检查它是否与f(password)我们在注册期间存储的值匹配。原始密码永远不会保留。&lt;&#x2F;p&gt;
&lt;p&gt;这真的改善了我们的安全态势吗？
这取决于f！&lt;&#x2F;p&gt;
&lt;p&gt;定义一个单射函数并不难,逆函数f(&amp;quot;hello&amp;quot;) = &amp;quot;olleh&amp;quot;满足我们的标准。同样容易猜出如何反转转换以恢复原始密码,它不会妨碍攻击者。
我们可以使转换变得更加复杂,复杂到足以让攻击者难以找到逆变换。
即使这样可能还不够。攻击者通常能够从输出中恢复输入的某些属性（例如长度）以实施例如有针对性的蛮力攻击就足够了。我们需要更强大的东西,两个输入的相似程度和相应输出的相似程度之间应该没有关系。x与y不相识于f(x)与f(y)。&lt;&#x2F;p&gt;
&lt;p&gt;我们想要一个密码散列函数。&lt;br&gt;
哈希函数将字符串从输入空间映射到固定长度的输出。&lt;br&gt;
形容词密码学指的是我们刚刚讨论的一致性属性,也称为雪崩效应：输入的微小差异导致输出如此不同,以至于看起来不相关。&lt;&#x2F;p&gt;
&lt;p&gt;有一个警告：哈希函数不是单射的2,碰撞的风险很小, if f(x) == f(y)有很高的概率（不是 100%！）x == y。&lt;&#x2F;p&gt;
&lt;h4 id=&quot;3-3-2-shi-yong-jia-mi-ha-xi&quot;&gt;3.3.2. 使用加密哈希&lt;&#x2F;h4&gt;
&lt;p&gt;理论说得够多了,让我们在存储密码之前更新我们的实现以散列密码。&lt;&#x2F;p&gt;
&lt;p&gt;有几种加密哈希函数,MD5、SHA-1、SHA-2、 SHA-3、KangarooTwelve等。
我们不打算深入研究每种算法的优缺点,当涉及到密码,原因将在几页后变得清晰。
就本节而言,让我们继续介绍SHA-3,它是安全散列算法系列的最新成员。&lt;&#x2F;p&gt;
&lt;p&gt;在算法之上,我们还需要选择输出大小,例如SHA3-224使用SHA-3算法来产生224位的固定大小的输出。
选项有224、256、384和512。输出越长,我们就越不可能遇到碰撞。另一方面,我们将需要更多的存储空间并通过使用更长的哈希值来消耗更多的带宽。
SHA3​​-256 对于我们的用例应该绰绰有余。&lt;&#x2F;p&gt;
&lt;p&gt;Rust Crypto组织提供了SHA-3的实现,即crate sha3。让我们将它添加到我们的依赖项中：&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;toml&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-toml &quot;&gt;&lt;code class=&quot;language-toml&quot; data-lang=&quot;toml&quot;&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;#! Cargo.toml&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;#! [...]&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;dependencies&lt;&#x2F;span&gt;&lt;span&gt;]&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;# [...]&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;sha3 &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;0.9&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;为清楚起见,让我们将password列重命名为password_hash：&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#f9f9f9;color:#111111;&quot;&gt;&lt;code&gt;&lt;span&gt;sqlx migrate add rename_password_column&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;pre data-lang=&quot;sql&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-sql &quot;&gt;&lt;code class=&quot;language-sql&quot; data-lang=&quot;sql&quot;&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;,migrations&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span&gt;20210815112028_rename_password_column.sql&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;ALTER TABLE &lt;&#x2F;span&gt;&lt;span&gt;users RENAME password TO password_hash;&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;我们的项目应该停止编译：&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;sh&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-sh &quot;&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;error:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; error returned from database: column &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;password&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; does not exist&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;--&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; src&#x2F;routes&#x2F;newsletters.rs&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;|&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;90 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;|       &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;let user_id&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; Option&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;_&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;gt; =&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; sqlx&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;query&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;|&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;  ______________________________&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;^&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;91 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;| |&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;         r#&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;92 | |         SELECT user_id&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;93 | |         FROM users&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;...  |&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;97 | |         credentials.password&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;98 | |     )&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;   | |_____^&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;sqlx::query!发现我们的一个查询正在使用当前模式中不再存在的列。
SQL查询的编译时验证非常简洁,不是吗？&lt;&#x2F;p&gt;
&lt;p&gt;我们的validate_credentials函数如下所示：&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rs&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-rs &quot;&gt;&lt;code class=&quot;language-rs&quot; data-lang=&quot;rs&quot;&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F;! src&#x2F;routes&#x2F;newsletters.rs&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F;! [...]&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;async &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;validate_credentials&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;credentials&lt;&#x2F;span&gt;&lt;span&gt;: Credentials,&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;pool&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span&gt;PgPool,&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;) -&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;Result&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;uuid::Uuid, PublishError&amp;gt; {&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; user_id: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;Option&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;_&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;sqlx::query&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;!&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;r&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;#&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;        SELECT user_id&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;        FROM users&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;        WHERE username = $1 AND password = $2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;        &amp;quot;#&lt;&#x2F;span&gt;&lt;span&gt;,&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        credentials.username,&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        credentials.password.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;expose_secret&lt;&#x2F;span&gt;&lt;span&gt;()&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    )&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; [...]&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;}&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;让我们更新它以使用散列密码：&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rs&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-rs &quot;&gt;&lt;code class=&quot;language-rs&quot; data-lang=&quot;rs&quot;&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F;! src&#x2F;routes&#x2F;newsletters.rs&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F;! [...]&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;use &lt;&#x2F;span&gt;&lt;span&gt;sha3::Digest;&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;async &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;validate_credentials&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;* *&#x2F;&lt;&#x2F;span&gt;&lt;span&gt;) -&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;Result&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;uuid::Uuid, PublishError&amp;gt; {&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; password_hash &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;sha3::Sha3_256::digest(&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        credentials.password.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;expose_secret&lt;&#x2F;span&gt;&lt;span&gt;().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;as_bytes&lt;&#x2F;span&gt;&lt;span&gt;()&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    );&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; user_id: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;Option&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;_&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;sqlx::query&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;!&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;r&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;#&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;        SELECT user_id&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;        FROM users&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;        WHERE username = $1 AND password_hash = $2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;        &amp;quot;#&lt;&#x2F;span&gt;&lt;span&gt;,&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        credentials.username,&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        password_hash&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    )&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; [...]&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;}&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;不幸的是,它不会立即编译：&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rs&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-rs &quot;&gt;&lt;code class=&quot;language-rs&quot; data-lang=&quot;rs&quot;&gt;&lt;span&gt;error[E0308]: mismatched types&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;-&amp;gt; src&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span&gt;routes&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span&gt;newsletters.rs:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;99&lt;&#x2F;span&gt;&lt;span&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;9&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;|&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;99 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;|&lt;&#x2F;span&gt;&lt;span&gt;         password_hash&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;|         ^^^^^^^^^^^^^&lt;&#x2F;span&gt;&lt;span&gt; expected `&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;str&lt;&#x2F;span&gt;&lt;span&gt;`, found &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;struct &lt;&#x2F;span&gt;&lt;span&gt;`GenericArray`&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;   |&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;   = note: expected reference `&amp;amp;str`&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;                 found struct `GenericArray&amp;lt;u8, UInt&amp;lt;..&amp;gt;&amp;gt;`&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Digest::digest返回一个固定长度的字节数组,而我们的password_hash列的类型TEXT是字符串。&lt;br&gt;
我们可以更改users表的模式以存储password_hash为binary。或者,我们可以使用十六进制格式将返回的字节编码Digest::digest为字符串。&lt;&#x2F;p&gt;
&lt;p&gt;让我们通过使用第二个选项来避免另一个迁移：&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rs&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-rs &quot;&gt;&lt;code class=&quot;language-rs&quot; data-lang=&quot;rs&quot;&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F;! [...]&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;async &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;validate_credentials&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;* *&#x2F;&lt;&#x2F;span&gt;&lt;span&gt;) -&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;Result&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;uuid::Uuid, PublishError&amp;gt; {&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; password_hash &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;sha3::Sha3_256::digest(&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        credentials.password.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;expose_secret&lt;&#x2F;span&gt;&lt;span&gt;().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;as_bytes&lt;&#x2F;span&gt;&lt;span&gt;()&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    );&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; Lowercase hexadecimal encoding.&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; password_hash &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;format!(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;{:x}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, password_hash);&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; [...]&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;}&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;应用程序代码现在应该可以编译了。相反,测试套件需要更多的工作。
辅助方法是通过test_user查询表来恢复一组有效的凭据users,现在我们存储的是哈希而不是原始密码,这不再可行！&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rs&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-rs &quot;&gt;&lt;code class=&quot;language-rs&quot; data-lang=&quot;rs&quot;&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F;! tests&#x2F;api&#x2F;helpers.rs&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F;! [...]&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt; &lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;impl &lt;&#x2F;span&gt;&lt;span&gt;TestApp {&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; [...]&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;pub&lt;&#x2F;span&gt;&lt;span&gt; async &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;test_user&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;) -&amp;gt; (String, String) {&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; row &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;sqlx::query&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;!&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;SELECT username, password FROM users LIMIT 1&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;,)&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;            .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;fetch_one&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.db_pool)&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;            .await&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;            .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;expect&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;Failed to create test users.&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;);&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        (row.username, row.password)&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    }&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;}&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;pub&lt;&#x2F;span&gt;&lt;span&gt; async &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;spawn_app&lt;&#x2F;span&gt;&lt;span&gt;() -&amp;gt; TestApp {&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; [...]&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; test_app &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; TestApp {&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;* *&#x2F;&lt;&#x2F;span&gt;&lt;span&gt;};&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;add_test_user&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span&gt;test_app.db_pool).await;&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    test_app&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;}&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;async &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;add_test_user&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;pool&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span&gt;PgPool) {&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    sqlx::query&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;!&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;INSERT INTO users (user_id, username, password)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;        VALUES ($1, $2, $3)&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;,&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        Uuid::new_v4(),&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        Uuid::new_v4().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;to_string&lt;&#x2F;span&gt;&lt;span&gt;(),&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        Uuid::new_v4().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;to_string&lt;&#x2F;span&gt;&lt;span&gt;(),&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    )&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;execute&lt;&#x2F;span&gt;&lt;span&gt;(pool)&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    .await&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;expect&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;Failed to create test users.&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;);&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;}&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;我们需要TestApp存储随机生成的密码,以便我们在辅助方法中访问它。
让我们从创建一个新的辅助结构开始,TestUser：&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rs&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-rs &quot;&gt;&lt;code class=&quot;language-rs&quot; data-lang=&quot;rs&quot;&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F;! tests&#x2F;api&#x2F;helpers.rs&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F;! [...]&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;use &lt;&#x2F;span&gt;&lt;span&gt;sha3::Digest;&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;pub struct &lt;&#x2F;span&gt;&lt;span&gt;TestUser {&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;pub &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;user_id&lt;&#x2F;span&gt;&lt;span&gt;: Uuid,&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;pub &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;username&lt;&#x2F;span&gt;&lt;span&gt;: String,&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;pub &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;password&lt;&#x2F;span&gt;&lt;span&gt;: String&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;}&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;impl &lt;&#x2F;span&gt;&lt;span&gt;TestUser {&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;pub fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;generate&lt;&#x2F;span&gt;&lt;span&gt;() -&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;Self &lt;&#x2F;span&gt;&lt;span&gt;{&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;Self &lt;&#x2F;span&gt;&lt;span&gt;{&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;            user_id: Uuid::new_v4(),&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;            username: Uuid::new_v4().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;to_string&lt;&#x2F;span&gt;&lt;span&gt;(),&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;            password: Uuid::new_v4().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;to_string&lt;&#x2F;span&gt;&lt;span&gt;()&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        }&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    }&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    async &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;store&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;pool&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span&gt;PgPool) {&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; password_hash &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;sha3::Sha3_256::digest(&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;            credentials.password.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;expose_secret&lt;&#x2F;span&gt;&lt;span&gt;().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;as_bytes&lt;&#x2F;span&gt;&lt;span&gt;()&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        );&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; password_hash &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;format!(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;{:x}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, password_hash);&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        sqlx::query&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;!&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;INSERT INTO users (user_id, username, password_hash)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;            VALUES ($1, $2, $3)&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;,&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.user_id,&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.username,&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;            password_hash,&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        )&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;execute&lt;&#x2F;span&gt;&lt;span&gt;(pool)&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        .await&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;expect&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;Failed to store test user.&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;);&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    }&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;}&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;然后我们可以附加TestUserto的一个实例TestApp,作为一个新字段：&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rs&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-rs &quot;&gt;&lt;code class=&quot;language-rs&quot; data-lang=&quot;rs&quot;&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F;! tests&#x2F;api&#x2F;helpers.rs&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F;! [...]&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;pub struct &lt;&#x2F;span&gt;&lt;span&gt;TestApp {&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; [...]&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;test_user&lt;&#x2F;span&gt;&lt;span&gt;: TestUser&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;}&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;pub&lt;&#x2F;span&gt;&lt;span&gt; async &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;spawn_app&lt;&#x2F;span&gt;&lt;span&gt;() -&amp;gt; TestApp {&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; [...]&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; test_app &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; TestApp {&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; [...]&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        test_user: TestUser::generate()&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    };&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    test_app.test_user.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;store&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span&gt;test_app.db_pool).await;&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    test_app&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;}&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;最后,让我们删除add_test_user和TestApp::test_user更新TestApp::post_newsletters：&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rs&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-rs &quot;&gt;&lt;code class=&quot;language-rs&quot; data-lang=&quot;rs&quot;&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F;! tests&#x2F;api&#x2F;helpers.rs&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F;! [...]&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;impl &lt;&#x2F;span&gt;&lt;span&gt;TestApp {&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; [..]&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;pub&lt;&#x2F;span&gt;&lt;span&gt; async &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;post_newsletters&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;body&lt;&#x2F;span&gt;&lt;span&gt;: serde_json::Value) -&amp;gt; reqwest::Response {&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        reqwest::Client::new()&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;            .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;post&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span&gt;format!(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;{}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&#x2F;newsletters&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.address))&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;            .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;basic_auth&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.test_user.username, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;Some&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.test_user.password))&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; [...]&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    }&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;}&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;测试套件现在应该可以编译并成功运行。&lt;&#x2F;p&gt;
&lt;h4 id=&quot;3-3-3-yuan-xiang-gong-ji&quot;&gt;3.3.3. 原像攻击&lt;&#x2F;h4&gt;
&lt;p&gt;如果攻击者拿到我们的桌子,SHA3-256是否足以保护我们用户的密码users？&lt;&#x2F;p&gt;
&lt;p&gt;让我们假设攻击想要破解我们数据库中的特定密码哈希。
攻击者甚至不需要检索原始密码。为了成功进行身份验证,他们只需要找到一个sSHA3-256 哈希值与他们试图破解的密码匹配的输入字符串,换句话说,就是一个冲突。&lt;br&gt;
这称为原像攻击。&lt;&#x2F;p&gt;
&lt;p&gt;有多难？&lt;&#x2F;p&gt;
&lt;p&gt;数学有点棘手,但蛮力攻击具有指数 时间复杂度2^n,其中n是哈希长度（以位为单位）。
如果n &amp;gt; 128,则认为计算不可行。
除非在SHA-3中发现漏洞,否则我们无需担心针对SHA3-256的原像攻击。&lt;&#x2F;p&gt;
&lt;h4 id=&quot;3-3-4-po-su-zi-dian-gong-ji&quot;&gt;3.3.4. 朴素字典攻击&lt;&#x2F;h4&gt;
&lt;p&gt;不过,我们不会对任意输入进行散列处理,我们可以通过对原始密码做出一些假设来减少搜索空间：它有多长？使用了哪些符号？
假设我们正在寻找一个少于17个字符3的字母数字密码。&lt;sup class=&quot;footnote-reference&quot;&gt;&lt;a href=&quot;#3&quot;&gt;2&lt;&#x2F;a&gt;&lt;&#x2F;sup&gt;&lt;&#x2F;p&gt;
&lt;p&gt;我们可以统计候选密码的数量：&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#f9f9f9;color:#111111;&quot;&gt;&lt;code&gt;&lt;span&gt;&#x2F;&#x2F; (26 letters + 10 number symbols) ^ Password Length&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;&#x2F;&#x2F; for all allowed password lengths&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;36^1 +&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;36^2 +&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;... +&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;36^16&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;它概括了大致的8 * 10^24可能性。
我无法找到专门关于SHA3-256的数据,但研究人员设法使用图形处理单元(GPU)每秒计算约9亿个SHA3-512哈希值。&lt;&#x2F;p&gt;
&lt;p&gt;假设每秒的哈希率~10^9,我们需要~10^15秒来哈希所有候选密码。宇宙的大致年龄是4 * 10^17秒。&lt;br&gt;
即使我们使用100万个GPU并行化我们的搜索,它仍然需要~10^9秒,大约30年。&lt;sup class=&quot;footnote-reference&quot;&gt;&lt;a href=&quot;#4&quot;&gt;3&lt;&#x2F;a&gt;&lt;&#x2F;sup&gt; &lt;&#x2F;p&gt;
&lt;h4 id=&quot;3-3-5-zi-dian-gong-ji&quot;&gt;3.3.5. 字典攻击&lt;&#x2F;h4&gt;
&lt;p&gt;让我们回到本章开头讨论的内容,一个人不可能记住数百个在线服务的唯一密码。&lt;br&gt;
他们要么依赖密码管理器,要么在多个帐户中重复使用一个或多个密码。&lt;&#x2F;p&gt;
&lt;p&gt;此外,即使重复使用,大多数密码也远非随机,常用词、全名、日期、流行运动队的名称等
。攻击者可以轻松设计一个简单的算法来生成数千个似是而非的密码,他们可以从过去十年中众多安全漏洞的密码数据集里以找到最常见的密码来尝试攻击。&lt;&#x2F;p&gt;
&lt;p&gt;他们可以在几分钟内预先计算出最常用的1000万个密码的SHA3-256哈希值。然后他们开始扫描我们的数据库以寻找匹配项。&lt;&#x2F;p&gt;
&lt;p&gt;这被称为字典攻击,它非常有效。&lt;&#x2F;p&gt;
&lt;p&gt;到目前为止,我们提到的所有加密哈希函数都设计得很快。
速度足够快,任何人都可以在无需使用专用硬件的情况下进行字典攻击。&lt;&#x2F;p&gt;
&lt;p&gt;我们需要慢得多的东西,但具有与密码散列函数相同的一组数学属性。&lt;&#x2F;p&gt;
&lt;h4 id=&quot;3-3-6-aragon2&quot;&gt;3.3.6. Aragon2&lt;&#x2F;h4&gt;
&lt;p&gt;开放式 Web 应用程序安全项目 (OWASP) &lt;sup class=&quot;footnote-reference&quot;&gt;&lt;a href=&quot;#5&quot;&gt;4&lt;&#x2F;a&gt;&lt;&#x2F;sup&gt;提供了有关安全密码存储的有用指南,关于如何选择正确的散列算法的整个部分：&lt;&#x2F;p&gt;
&lt;p&gt;https:&#x2F;&#x2F;cheatsheetseries.owasp.org&#x2F;cheatsheets&#x2F;Password_Storage_Cheat_Sheet.html&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;使用 Argon2id,最小配置为15MiB内存,迭代次数为2,并行度为1。&lt;br&gt;
如果Argon2id不可用,请使用工作系数为10或更高且密码限制为72字节的bcrypt。&lt;br&gt;
对于使用scrypt的旧系统,使用最小CPU&#x2F;内存成本参数 (2^16)、最小块大小 8（1024字节）和并行化参数1。&lt;br&gt;
如果需要符合 FIPS-140,请使用工作因子为 310,000 或更高的 PBKDF2,并使用 HMAC-SHA-256 的内部哈希函数进行设置。&lt;br&gt;
考虑使用辣椒来提供额外的深度防御（尽管单独使用,它没有提供额外的安全特性）。&lt;br&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;所有这些选项,Argon2、bcrypt、scrypt、PBKDF2,都被设计成对计算要求很高。&lt;br&gt;
它们还公开了配置参数（例如 bcrypt 的工作因子）以进一步减慢哈希计算：应用程序开发人员可以调整一些旋钮以跟上硬件加速,无需每隔几年迁移到更新的算法。&lt;&#x2F;p&gt;
&lt;p&gt;按照OWASP的建议,让我们用Argon2id替换SHA-3。&lt;br&gt;
Rust Crypto组织再次提供了一个纯Rust实现的argon2。&lt;sup class=&quot;footnote-reference&quot;&gt;&lt;a href=&quot;#2&quot;&gt;5&lt;&#x2F;a&gt;&lt;&#x2F;sup&gt;&lt;&#x2F;p&gt;
&lt;p&gt;让我们将它添加到我们的依赖项中：&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;toml&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-toml &quot;&gt;&lt;code class=&quot;language-toml&quot; data-lang=&quot;toml&quot;&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;#! Cargo.toml&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;#! [...]&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;dependencies&lt;&#x2F;span&gt;&lt;span&gt;]&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;# [...]&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;argon2 &lt;&#x2F;span&gt;&lt;span&gt;= { &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;version &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;0.4&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;features &lt;&#x2F;span&gt;&lt;span&gt;= [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;std&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;] }&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;要散列密码,我们需要创建一个Argon2结构实例。方法签名如下所示&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rs&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-rs &quot;&gt;&lt;code class=&quot;language-rs&quot; data-lang=&quot;rs&quot;&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F;! argon2&#x2F;lib.rs&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F;&#x2F; [...]&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt; &lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;impl&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;&amp;#39;key&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; Argon2&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;&amp;#39;key&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; {&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F;&#x2F; Create a new Argon2 context.&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;pub fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;new&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;algorithm&lt;&#x2F;span&gt;&lt;span&gt;: Algorithm, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;version&lt;&#x2F;span&gt;&lt;span&gt;: Version, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;params&lt;&#x2F;span&gt;&lt;span&gt;: Params) -&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;Self &lt;&#x2F;span&gt;&lt;span&gt;{&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; [...]&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    }&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; [...]&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;}&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Algorithm是一个枚举：它让我们可以选择要使用的Argon2的哪个变体,Argon2d、Argon2i、Argon2id。为了遵守OWASP的建议,我们将选择Algorithm::Argon2id。&lt;&#x2F;p&gt;
&lt;p&gt;Version实现了类似的目的,我们将选择最近的,Version::V0x13。&lt;&#x2F;p&gt;
&lt;p&gt;Params,Params::new指定我们需要提供的所有强制参数来构建一个。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rs&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-rs &quot;&gt;&lt;code class=&quot;language-rs&quot; data-lang=&quot;rs&quot;&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F;! argon2&#x2F;params.rs&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; [...]&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F;&#x2F; Create new parameters.&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;pub fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;new&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;m_cost&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;u32&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;t_cost&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;u32&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;p_cost&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;u32&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;output_len&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;Option&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;usize&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;) -&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;Result&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;Self&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; {&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; [...]&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;}&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;m_cost,t_cost并p_cost映射到 OWASP 的要求：&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;m_cost是内存大小,以千字节表示&lt;&#x2F;li&gt;
&lt;li&gt;t_cost是迭代次数；&lt;&#x2F;li&gt;
&lt;li&gt;p_cost是并行度。&lt;&#x2F;li&gt;
&lt;li&gt;output_len,相反,确定返回哈希的长度。如果省略,它将默认为32字节。这等于256位,与我们通过 SHA3-256 获得的哈希长度相同。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;在这一点上,我们知道的足够多,可以构建一个：&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rs&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-rs &quot;&gt;&lt;code class=&quot;language-rs&quot; data-lang=&quot;rs&quot;&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F;! src&#x2F;routes&#x2F;newsletters.rs&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;use &lt;&#x2F;span&gt;&lt;span&gt;argon2::{Algorithm, Argon2, Version, Params};&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; [...]&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;async &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;validate_credentials&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;credentials&lt;&#x2F;span&gt;&lt;span&gt;: Credentials,&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;pool&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span&gt;PgPool,&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;) -&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;Result&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;uuid::Uuid, PublishError&amp;gt; {&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; hasher &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;Argon2::new(&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        Algorithm::Argon2id,&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        Version::V0x13,&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        Params::new(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;15000&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;None&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;            .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;context&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;Failed to build Argon2 parameters&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;            .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;map_err&lt;&#x2F;span&gt;&lt;span&gt;(PublishError::UnexpectedError)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;?&lt;&#x2F;span&gt;&lt;span&gt;,&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    );&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; password_hash &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;sha3::Sha3_256::digest(&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        credentials.password.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;expose_secret&lt;&#x2F;span&gt;&lt;span&gt;().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;as_bytes&lt;&#x2F;span&gt;&lt;span&gt;()&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    );&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; [...]&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;}&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Argon2实现PasswordHasher trait：&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rs&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-rs &quot;&gt;&lt;code class=&quot;language-rs&quot; data-lang=&quot;rs&quot;&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F;! password_hash&#x2F;traits.rs&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;pub trait &lt;&#x2F;span&gt;&lt;span&gt;PasswordHasher {&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; [...]&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;hash_password&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;&amp;#39;a&lt;&#x2F;span&gt;&lt;span&gt;, S&amp;gt;(&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;password&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;u8&lt;&#x2F;span&gt;&lt;span&gt;], &lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;salt&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;&amp;#39;a&lt;&#x2F;span&gt;&lt;span&gt; S&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    ) -&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;Result&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;PasswordHash&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;&amp;#39;a&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;where&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        S: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;AsRef&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;str&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; + ?Sized;&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;}&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;password-hash是crate的重新导出的统一接口,用于处理由各种算法（当前为Argon2、PBKDF2和scrypt）支持的密码哈希。&lt;&#x2F;p&gt;
&lt;p&gt;PasswordHasher::hash_password有点不同Sha3_256::digest,它要求在原始密码之上添加一个附加参数 salt。&lt;&#x2F;p&gt;
&lt;h4 id=&quot;3-3-7-yan&quot;&gt;3.3.7. 盐&lt;&#x2F;h4&gt;
&lt;p&gt;Argon2比SHA-3慢很多,但这还不足以使字典攻击不可行。散列最常见的1000万个密码需要更长的时间,但不会太长。&lt;&#x2F;p&gt;
&lt;p&gt;但是,如果攻击者必须为我们数据库中的每个用户重新散列整个字典怎么办？
它变得更具挑战性！&lt;&#x2F;p&gt;
&lt;p&gt;这就是加盐的作用。对于每个用户,我们生成一个唯一的随机字符串,盐。
在生成哈希之前,盐会添加到用户密码之前。 PasswordHasher::hash_password为我们处理前置事务。&lt;&#x2F;p&gt;
&lt;p&gt;salt存储在我们数据库中的密码哈希旁边。
如果攻击者获得数据库备份,他们将可以访问所有 salts。&lt;sup class=&quot;footnote-reference&quot;&gt;&lt;a href=&quot;#6&quot;&gt;6&lt;&#x2F;a&gt;&lt;&#x2F;sup&gt;
但他们必须计算dictionary_size * n_users 散列而不是dictionary_size。此外,预先计算哈希不再是一种选择,这为我们赢得了检测违规行为并采取行动的时间（例如,强制为所有用户重置密码）。&lt;&#x2F;p&gt;
&lt;p&gt;让我们在users表中添加一个password_salt列：&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rs&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-rs &quot;&gt;&lt;code class=&quot;language-rs&quot; data-lang=&quot;rs&quot;&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F;! src&#x2F;routes&#x2F;newsletters.rs&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; [...]&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;use &lt;&#x2F;span&gt;&lt;span&gt;argon2::PasswordHasher;&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;async &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;validate_credentials&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;credentials&lt;&#x2F;span&gt;&lt;span&gt;: Credentials,&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;pool&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span&gt;PgPool,&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;) -&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;Result&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;uuid::Uuid, PublishError&amp;gt; {&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; hasher &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;argon2::Argon2::new(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;* *&#x2F;&lt;&#x2F;span&gt;&lt;span&gt;);&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; row: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;Option&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;_&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;sqlx::query&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;!&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;r&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;#&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;        SELECT user_id, password_hash, salt&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;        FROM users&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;        WHERE username = $1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;        &amp;quot;#&lt;&#x2F;span&gt;&lt;span&gt;,&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        credentials.username,&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    )&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;fetch_optional&lt;&#x2F;span&gt;&lt;span&gt;(pool)&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    .await&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;context&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;Failed to perform a query to retrieve stored credentials.&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;map_err&lt;&#x2F;span&gt;&lt;span&gt;(PublishError::UnexpectedError)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;?&lt;&#x2F;span&gt;&lt;span&gt;;&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;let &lt;&#x2F;span&gt;&lt;span&gt;(expected_password_hash, user_id, salt) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;match&lt;&#x2F;span&gt;&lt;span&gt; row {&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;Some&lt;&#x2F;span&gt;&lt;span&gt;(row) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;(row.password_hash, row.user_id, row.salt),&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;None &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;{&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;Err&lt;&#x2F;span&gt;&lt;span&gt;(PublishError::AuthError(anyhow::anyhow&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;!&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;Unknown username.&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;            )));&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        }&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    };&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; password_hash &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; hasher&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;hash_password&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;            credentials.password.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;expose_secret&lt;&#x2F;span&gt;&lt;span&gt;().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;as_bytes&lt;&#x2F;span&gt;&lt;span&gt;(),&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span&gt;salt&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        )&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;context&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;Failed to hash password&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;map_err&lt;&#x2F;span&gt;&lt;span&gt;(PublishError::UnexpectedError)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;?&lt;&#x2F;span&gt;&lt;span&gt;;&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; password_hash &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;format!(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;{:x}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, password_hash.hash.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;unwrap&lt;&#x2F;span&gt;&lt;span&gt;());&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span&gt; password_hash &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;!=&lt;&#x2F;span&gt;&lt;span&gt; expected_password_hash {&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;Err&lt;&#x2F;span&gt;&lt;span&gt;(PublishError::AuthError(anyhow::anyhow&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;!&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;Invalid password.&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        )))&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    } &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;else &lt;&#x2F;span&gt;&lt;span&gt;{&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;Ok&lt;&#x2F;span&gt;&lt;span&gt;(user_id)&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    }&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;}&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;不幸的是,无法通过编译：&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;sh&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-sh &quot;&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;error[E0277]:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; the trait bound &lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;`&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;argon2::password_hash::Output:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; LowerHex` is not satisfied&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;--&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; src&#x2F;routes&#x2F;newsletters.rs&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;|&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;125 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;|     &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;let password_hash &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; format&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;{:x}&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;, password_hash.hash.unwrap());&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;|                                         &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;^^^^^^^^^^^^^^^^^^^^^^^^^^^ &lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;the&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; trait `&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;LowerHex&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;` is not implemented for `&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;argon2::password_hash::Output&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;`&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Output提供了其他方法来获取字符串表示。例如输出::b64_encode。只要我们乐于更改存储在数据库中的散列的假定编码,它就会起作用。&lt;&#x2F;p&gt;
&lt;p&gt;鉴于有必要进行更改,我们可以寻找比 base64 编码更好的东西。&lt;&#x2F;p&gt;
&lt;h4 id=&quot;3-3-8-phc-string-format&quot;&gt;3.3.8. PHC String Format&lt;&#x2F;h4&gt;
&lt;p&gt;为了对用户进行身份验证,我们需要可重复性：我们必须每次都运行相同的哈希例程。
Salt 和密码只是 Argon2id 输入的一个子集。在给定相同的盐和密码对的情况下,所有其他负载参数（t_cost、m_cost、p_cost）对于获得相同的哈希值同样重要。&lt;&#x2F;p&gt;
&lt;p&gt;如果我们存储哈希的 base64 编码表示,我们会​​做出一个强隐式假设：存储在 password_hash 列中的所有值都是使用相同的加载参数计算的。&lt;&#x2F;p&gt;
&lt;p&gt;正如我们前几节所讨论的,硬件功能会随着时间的推移而发展：应用程序开发人员需要通过使用更高负载参数增加散列的计算成本来跟上。
当您必须将存储的密码迁移到较新的哈希配置时会发生什么？&lt;&#x2F;p&gt;
&lt;p&gt;为了继续对旧用户进行身份验证,我们必须在每个哈希旁边存储用于计算它的确切负载参数集。
这允许在两种不同的负载配置之间进行无缝迁移：当旧用户进行身份验证时,我们使用存储的负载参数验证密码有效性；然后我们使用新的加载参数重新计算密码哈希并相应地更新存储的信息。&lt;&#x2F;p&gt;
&lt;p&gt;我们可以采用简单的方法,在我们的用户表中添加三个新列：t_cost、m_cost 和 p_cost。
只要算法仍然是 Argon2id,它就会起作用。&lt;&#x2F;p&gt;
&lt;p&gt;如果在Argon2id中发现漏洞并且我们被迫迁移离开它会发生什么？
我们可能想要添加一个算法列,以及用于存储Argon2id替换的负载参数的新列。&lt;&#x2F;p&gt;
&lt;p&gt;可以做到,但很乏味。
幸运的是,有一个更好的解决方案：PHC 字符串格式。 PHC 字符串格式为密码散列提供标准表示：它包括散列本身、盐、算法及其所有相关参数。&lt;&#x2F;p&gt;
&lt;p&gt;使用PHC字符串格式,Argon2id 密码哈希如下所示：&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;sh&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-sh &quot;&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;# ${algorithm}${algorithm version}${$-separated algorithm parameters}${hash}${salt}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$argon2id$v&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;19$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;m&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;=65536,t=2,p=1$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;gZiV&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&#x2F;M1gPc22ElAH&#x2F;Jh1Hw$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;CWOrkoo7oJBQ&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&#x2F;iyh7uJ0LO2aLEfrHwTWllSAxT0zRno&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;argon2 crate 开放了PasswordHash,这是PHC格式的Rust实现：&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rs&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-rs &quot;&gt;&lt;code class=&quot;language-rs&quot; data-lang=&quot;rs&quot;&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F;! argon2&#x2F;lib.rs&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; [...]&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;pub struct &lt;&#x2F;span&gt;&lt;span&gt;PasswordHash&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;&amp;#39;a&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; {&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;pub &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;algorithm&lt;&#x2F;span&gt;&lt;span&gt;: Ident&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;&amp;#39;a&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;,&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;pub &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;version&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;Option&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;Decimal&amp;gt;,&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;pub &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;params&lt;&#x2F;span&gt;&lt;span&gt;: ParamsString,&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;pub &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;salt&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;Option&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;Salt&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;&amp;#39;a&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;&amp;gt;,&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;pub &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;hash&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;Option&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;Output&amp;gt;,&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;}&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;以 PHC 字符串格式存储密码哈希使我们不必Argon2使用显式参数7初始化结构。
我们可以依赖trait Argon2的实现：PasswordVerifier &lt;sup class=&quot;footnote-reference&quot;&gt;&lt;a href=&quot;#7&quot;&gt;7&lt;&#x2F;a&gt;&lt;&#x2F;sup&gt;&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rs&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-rs &quot;&gt;&lt;code class=&quot;language-rs&quot; data-lang=&quot;rs&quot;&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;pub trait &lt;&#x2F;span&gt;&lt;span&gt;PasswordVerifier {&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;verify_password&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;,&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;password&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;u8&lt;&#x2F;span&gt;&lt;span&gt;],&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;hash&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span&gt;PasswordHash&amp;lt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;_&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    ) -&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;Result&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;()&amp;gt;;&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;}&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;通过传递预期的哈希PasswordHash,Argon2可以自动推断应该使用什么负载参数和盐来验证候选密码是否匹配&lt;sup class=&quot;footnote-reference&quot;&gt;&lt;a href=&quot;#8&quot;&gt;8&lt;&#x2F;a&gt;&lt;&#x2F;sup&gt;&lt;&#x2F;p&gt;
&lt;p&gt;让我们更新我们的实现：&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rs&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-rs &quot;&gt;&lt;code class=&quot;language-rs&quot; data-lang=&quot;rs&quot;&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F;! src&#x2F;routes&#x2F;newsletters.rs&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;use &lt;&#x2F;span&gt;&lt;span&gt;argon2::{Argon2, PasswordHash, PasswordVerifier};&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; [...]&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;async &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;validate_credentials&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;credentials&lt;&#x2F;span&gt;&lt;span&gt;: Credentials,&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;pool&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span&gt;PgPool,&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;) -&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;Result&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;uuid::Uuid, PublishError&amp;gt; {&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; row: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;Option&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;_&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;sqlx::query&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;!&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;r&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;#&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;        SELECT user_id, password_hash&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;        FROM users&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;        WHERE username = $1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;        &amp;quot;#&lt;&#x2F;span&gt;&lt;span&gt;,&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        credentials.username,&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    )&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;fetch_optional&lt;&#x2F;span&gt;&lt;span&gt;(pool)&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    .await&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;context&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;Failed to perform a query to retrieve stored credentials.&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;map_err&lt;&#x2F;span&gt;&lt;span&gt;(PublishError::UnexpectedError)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;?&lt;&#x2F;span&gt;&lt;span&gt;;&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;let &lt;&#x2F;span&gt;&lt;span&gt;(expected_password_hash,user_id) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;match&lt;&#x2F;span&gt;&lt;span&gt; row {&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;Some&lt;&#x2F;span&gt;&lt;span&gt;(row) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;(row.password_hash,row.user_id),&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;None &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;{&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;Err&lt;&#x2F;span&gt;&lt;span&gt;(PublishError::AuthError(anyhow::anyhow&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;!&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;Unknown username.&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;            )))&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        }&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    };&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; expected_password_hash &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;PasswordHash::new(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span&gt;expected_password_hash)&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;context&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;Failed to parse hash in PHC string format.&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;map_err&lt;&#x2F;span&gt;&lt;span&gt;(PublishError::UnexpectedError)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;?&lt;&#x2F;span&gt;&lt;span&gt;;&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    Argon2::default()&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;verify_password&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;             credentials.password.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;expose_secret&lt;&#x2F;span&gt;&lt;span&gt;().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;as_bytes&lt;&#x2F;span&gt;&lt;span&gt;(), &lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;             &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span&gt;expected_password_hash&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        )&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;context&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;Invalid password.&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;map_err&lt;&#x2F;span&gt;&lt;span&gt;(PublishError::AuthError)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;?&lt;&#x2F;span&gt;&lt;span&gt;;&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;Ok&lt;&#x2F;span&gt;&lt;span&gt;(user_id)&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;}&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;它编译成功。
您可能还注意到我们不再直接处理盐,PHC字符串格式隐含地为我们处理它。
我们可以完全摆脱该salt列：&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#f9f9f9;color:#111111;&quot;&gt;&lt;code&gt;&lt;span&gt;sqlx migrate add remove_salt_from_users&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;pre data-lang=&quot;sql&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-sql &quot;&gt;&lt;code class=&quot;language-sql&quot; data-lang=&quot;sql&quot;&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;,migrations&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span&gt;20210815112222_remove_salt_from_users.sql &lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;ALTER TABLE &lt;&#x2F;span&gt;&lt;span&gt;users DROP COLUMN salt;&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;我们的测试呢？
其中两个失败：&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;sh&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-sh &quot;&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;---,newsletter::newsletters_are_not_delivered_to_unconfirmed_subscribers&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; stdout ----&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;newsletter::newsletters_are_not_delivered_to_unconfirmed_subscribers&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; panicked at &lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;assertion failed: `(left == right)`&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;  left: `500`,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt; right: `200`&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;---,newsletter::newsletters_are_delivered_to_confirmed_subscribers&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; stdout ----&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;newsletter::newsletters_are_delivered_to_confirmed_subscribers&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; panicked at &lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;assertion failed: `(left == right)`&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;  left: `500`,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;我们可以查看日志以找出问题所在：&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;sh&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-sh &quot;&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;TEST_LOG&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;true &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;cargo&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; t newsletters_are_not_delivered &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;| &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;bunyan&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;[2021-08-29T20:14:50.367Z]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; ERROR: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;HTTP REQUEST,EVENT&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;] &lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;Error&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; encountered while processing the incoming HTTP request: &lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;Failed&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; to parse hash in PHC string format.&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;Caused&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; by:&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;     &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;password&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; hash string invalid&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;让我们看看我们的测试用户的密码生成代码：&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rs&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-rs &quot;&gt;&lt;code class=&quot;language-rs&quot; data-lang=&quot;rs&quot;&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F;! tests&#x2F;api&#x2F;helpers.rs&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; [...]&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;impl &lt;&#x2F;span&gt;&lt;span&gt;TestUser {&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; [...]&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    async &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;store&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;pool&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span&gt;PgPool) {&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; password_hash &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;sha3::Sha3_256::digest(&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;            credentials.password.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;expose_secret&lt;&#x2F;span&gt;&lt;span&gt;().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;as_bytes&lt;&#x2F;span&gt;&lt;span&gt;()&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        );&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; password_hash &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;format!(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;{:x}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, password_hash);&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; [...]&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    }&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;}&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;我们仍在使用 SHA-3！
让我们更新一下：&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rs&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-rs &quot;&gt;&lt;code class=&quot;language-rs&quot; data-lang=&quot;rs&quot;&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F;! tests&#x2F;api&#x2F;helpers.rs&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;use &lt;&#x2F;span&gt;&lt;span&gt;argon2::password_hash::SaltString;&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;use &lt;&#x2F;span&gt;&lt;span&gt;argon2::{Argon2, PasswordHasher};&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; [...]&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;impl &lt;&#x2F;span&gt;&lt;span&gt;TestUser {&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; [...]&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    async &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;store&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;pool&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span&gt;PgPool) {&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; salt &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;SaltString::generate(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;mut &lt;&#x2F;span&gt;&lt;span&gt;rand::thread_rng());&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; We don&amp;#39;t care about the exact Argon2 parameters here&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; given that it&amp;#39;s for testing purposes!&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; password_hash &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;Argon2::default()&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;            .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;hash_password&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.password.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;as_bytes&lt;&#x2F;span&gt;&lt;span&gt;(), &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span&gt;salt)&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;            .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;unwrap&lt;&#x2F;span&gt;&lt;span&gt;()&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;            .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;to_string&lt;&#x2F;span&gt;&lt;span&gt;();&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; [...]&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    }&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;}&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;测试套件现在应该通过了。
我们已经从我们的项目中删除了所有提到的 sha3,我们现在可以从 Cargo.toml 的依赖项列表中删除它。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;3-4-bu-yao-zu-sai-yi-bu-zhi-xing-qi&quot;&gt;3.4.不要阻塞异步执行器&lt;&#x2F;h3&gt;
&lt;p&gt;运行我们的集成测试时验证用户凭据需要多长时间？
我们目前没有围绕密码散列的追踪,让我们修复它：&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rs&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-rs &quot;&gt;&lt;code class=&quot;language-rs&quot; data-lang=&quot;rs&quot;&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F;! src&#x2F;routes&#x2F;newsletters.rs&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; [...]&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;#[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;tracing&lt;&#x2F;span&gt;&lt;span&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;instrument&lt;&#x2F;span&gt;&lt;span&gt;(name &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;Validate credentials&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;skip&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(credentials, pool)&lt;&#x2F;span&gt;&lt;span&gt;)]&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;async &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;validate_credentials&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;credentials&lt;&#x2F;span&gt;&lt;span&gt;: Credentials,&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;pool&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span&gt;PgPool,&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;) -&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;Result&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;uuid::Uuid, PublishError&amp;gt; {&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;let &lt;&#x2F;span&gt;&lt;span&gt;(user_id, expected_password_hash) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;get_stored_credentials&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span&gt;credentials.username, &lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span&gt;pool&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        )&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        .await&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;map_err&lt;&#x2F;span&gt;&lt;span&gt;(PublishError::UnexpectedError)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;?&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;ok_or_else&lt;&#x2F;span&gt;&lt;span&gt;(|| PublishError::AuthError(anyhow::anyhow&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;!&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;Unknown username.&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;)))&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;?&lt;&#x2F;span&gt;&lt;span&gt;;&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; expected_password_hash &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;PasswordHash::new(&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span&gt;expected_password_hash.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;expose_secret&lt;&#x2F;span&gt;&lt;span&gt;()&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        )&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;context&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;Failed to parse hash in PHC string format.&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;map_err&lt;&#x2F;span&gt;&lt;span&gt;(PublishError::UnexpectedError)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;?&lt;&#x2F;span&gt;&lt;span&gt;;&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    tracing::info_span&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;!&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;Verify password hash&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;in_scope&lt;&#x2F;span&gt;&lt;span&gt;(|| {&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;            Argon2::default()&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;                .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;verify_password&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;                    credentials.password.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;expose_secret&lt;&#x2F;span&gt;&lt;span&gt;().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;as_bytes&lt;&#x2F;span&gt;&lt;span&gt;(), &lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;                    expected_password_hash&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;                )&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        })&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;context&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;Invalid password.&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;map_err&lt;&#x2F;span&gt;&lt;span&gt;(PublishError::AuthError)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;?&lt;&#x2F;span&gt;&lt;span&gt;;&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;Ok&lt;&#x2F;span&gt;&lt;span&gt;(user_id)&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;}&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; We extracted the db-querying logic in its own function with its own span.&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;#[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;tracing&lt;&#x2F;span&gt;&lt;span&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;instrument&lt;&#x2F;span&gt;&lt;span&gt;(name &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;Get stored credentials&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;skip&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(username, pool)&lt;&#x2F;span&gt;&lt;span&gt;)]&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;async &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;get_stored_credentials&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;username&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;str&lt;&#x2F;span&gt;&lt;span&gt;,&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;pool&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span&gt;PgPool,&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;) -&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;Result&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;Option&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;(uuid::Uuid, Secret&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;String&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;)&amp;gt;, anyhow::Error&amp;gt; {&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; row &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;sqlx::query&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;!&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;r&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;#&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;        SELECT user_id, password_hash&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;        FROM users&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;        WHERE username = $1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;        &amp;quot;#&lt;&#x2F;span&gt;&lt;span&gt;,&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        username,&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    )&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;fetch_optional&lt;&#x2F;span&gt;&lt;span&gt;(pool)&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    .await&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;context&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;Failed to perform a query to retrieve stored credentials.&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;?&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;map&lt;&#x2F;span&gt;&lt;span&gt;(|&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;row&lt;&#x2F;span&gt;&lt;span&gt;| (row.user_id, Secret::new(row.password_hash)));&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;Ok&lt;&#x2F;span&gt;&lt;span&gt;(row)&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;}&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;我们现在可以查看其中一项集成测试的日志：&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;sh&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-sh &quot;&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;TEST_LOG&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;true &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;cargo&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; test&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt; --quiet --release&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; \&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;newsletters_are_delivered &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;| &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;grep &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;VERIFY PASSWORD&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;| &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;bunyan&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;[...]  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;VERIFY PASSWORD HASH,END&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; (elapsed_milliseconds=11, ...&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;大约 10 毫秒。
这可能会导致负载问题,臭名昭著的阻塞问题。&lt;&#x2F;p&gt;
&lt;p&gt;Rust中的async&#x2F;await是围绕一个称为协作调度的概念构建的。&lt;&#x2F;p&gt;
&lt;p&gt;它是如何工作的？
让我们看一个例子：&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rs&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-rs &quot;&gt;&lt;code class=&quot;language-rs&quot; data-lang=&quot;rs&quot;&gt;&lt;span&gt;async &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;my_fn&lt;&#x2F;span&gt;&lt;span&gt;() {&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;a&lt;&#x2F;span&gt;&lt;span&gt;().await;&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;b&lt;&#x2F;span&gt;&lt;span&gt;().await;&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;c&lt;&#x2F;span&gt;&lt;span&gt;().await;&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;}&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;my_fn 返回一个未来。
当等待未来时,我们的异步运行时（tokio）进入画面：它开始轮询它。&lt;&#x2F;p&gt;
&lt;p&gt;my_fn返回的Future如何实现poll？
你可以把它想象成一个状态机：&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rs&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-rs &quot;&gt;&lt;code class=&quot;language-rs&quot; data-lang=&quot;rs&quot;&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;enum &lt;&#x2F;span&gt;&lt;span&gt;MyFnFuture {&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    Initialized,&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    CallingA,&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    CallingB,&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    CallingC,&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    Complete&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;}&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;每次调用poll时,它都会尝试通过到达下一个状态来取得进展。例如如果 a.await() 返回,我们开始等待 b() &lt;sup class=&quot;footnote-reference&quot;&gt;&lt;a href=&quot;#9&quot;&gt;9&lt;&#x2F;a&gt;&lt;&#x2F;sup&gt;。&lt;&#x2F;p&gt;
&lt;p&gt;对于异步函数体中的每个 .await,我们在 MyFnFuture 中都有不同的状态。
这就是为什么 .await 调用通常被命名为让步点的原因,我们的未来会从前一个 .await 前进到下一个,然后将控制权交还给执行程序。&lt;&#x2F;p&gt;
&lt;p&gt;然后,执行者可以选择再次轮询同一个未来,或者优先考虑在另一个任务上取得进展。这就是异步运行时（如 tokio）如何设法在多个任务上同时取得进展,通过不断地停放和恢复每个任务。
在某种程度上,您可以将异步运行时视为出色的杂耍者。&lt;&#x2F;p&gt;
&lt;p&gt;基本假设是大多数异步任务正在执行某种输入输出（IO）工作,它们的大部分执行时间将花在等待其他事情发生（例如,操作系统通知我们有数据可供读取在一个套接字上）,因此我们可以有效地同时执行比我们通过为每个任务指定一个并行执行单元（例如每个操作系统内核一个线程）来实现的任务更多的任务。&lt;&#x2F;p&gt;
&lt;p&gt;假设任务通过频繁将控制权交还给执行者来合作,这个模型非常有效。
换句话说,poll 预计会很快,它应该在不到 10-100 微秒内返回&lt;sup class=&quot;footnote-reference&quot;&gt;&lt;a href=&quot;#10&quot;&gt;10&lt;&#x2F;a&gt;&lt;&#x2F;sup&gt;。如果调用 poll 需要更长的时间（或者更糟糕的是,永远不会返回）,那么异步执行器无法在任何其他任务上取得进展,这就是人们说“任务正在阻塞执行器&#x2F;异步线程”时所指的”。&lt;&#x2F;p&gt;
&lt;p&gt;您应该始终注意可能需要超过 1 毫秒的 CPU 密集型工作负载,密码哈希就是一个很好的例子。
为了更好地使用tokio,我们必须使用tokio::task::spawn_blocking. 这些线程保留用于阻塞操作,不会干扰异步任务的调度。&lt;&#x2F;p&gt;
&lt;p&gt;让我们开始工作吧！&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rs&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-rs &quot;&gt;&lt;code class=&quot;language-rs&quot; data-lang=&quot;rs&quot;&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F;! src&#x2F;routes&#x2F;newsletters.rs&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; [...]&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;#[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;tracing&lt;&#x2F;span&gt;&lt;span&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;instrument&lt;&#x2F;span&gt;&lt;span&gt;(name &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;Validate credentials&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;skip&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(credentials, pool)&lt;&#x2F;span&gt;&lt;span&gt;)]&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;async &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;validate_credentials&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;credentials&lt;&#x2F;span&gt;&lt;span&gt;: Credentials,&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;pool&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span&gt;PgPool,&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;) -&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;Result&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;uuid::Uuid, PublishError&amp;gt; {&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; [...]&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    tokio::task::spawn_blocking(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;move &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;|| &lt;&#x2F;span&gt;&lt;span&gt;{&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        tracing::info_span&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;!&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;Verify password hash&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;in_scope&lt;&#x2F;span&gt;&lt;span&gt;(|| {&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;            Argon2::default()&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;                .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;verify_password&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;                    credentials.password.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;expose_secret&lt;&#x2F;span&gt;&lt;span&gt;().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;as_bytes&lt;&#x2F;span&gt;&lt;span&gt;(), &lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;                    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span&gt;expected_password_hash)&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        })&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    })&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    .await&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; spawn_blocking is fallible,we have a nested Result here!&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;context&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;Failed to spawn blocking task.&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;map_err&lt;&#x2F;span&gt;&lt;span&gt;(PublishError::UnexpectedError)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;?&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;context&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;Invalid password.&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;map_err&lt;&#x2F;span&gt;&lt;span&gt;(PublishError::AuthError)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;?&lt;&#x2F;span&gt;&lt;span&gt;;&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; [...]&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;}&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;借用检查吐槽：&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;sh&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-sh &quot;&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;error[E0597]: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;`&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;expected_password_hash&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;` does not live long enough&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;--&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; src&#x2F;routes&#x2F;newsletters.rs&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;|&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;117 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;|     &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;PasswordHash::new&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;expected_password_hash&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;|     &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;------------------^^^^^^^^^^^^^^^^^^^^^^^-&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;|     |                 |&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;|     |                 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;borrowed&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; value does not live long enough&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;|     &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;argument&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; requires that `&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;expected_password_hash&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;` is borrowed for `&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;static`&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;...&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;134 | }&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;    |,`expected_password_hash` dropped here while still borrowed&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;我们正在一个单独的线程上启动一个计算,线程本身可能比我们从中产生它的异步任务寿命更长。为了避免这个问题,spawn_blocking需要它的参数有一个&#x27;static生命周期,这会阻止我们将对当前函数上下文的引用传递到闭包中。&lt;&#x2F;p&gt;
&lt;p&gt;您可能会争辩,“我们正在使用move || {},闭包应该拥有expected_password_hash！”。
你是对的！但这还不够。
我们再来看看是如何PasswordHash定义的：&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rs&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-rs &quot;&gt;&lt;code class=&quot;language-rs&quot; data-lang=&quot;rs&quot;&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;pub struct &lt;&#x2F;span&gt;&lt;span&gt;PasswordHash&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;&amp;#39;a&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; {&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;pub &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;algorithm&lt;&#x2F;span&gt;&lt;span&gt;: Ident&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;&amp;#39;a&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;,&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;pub &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;salt&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;Option&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;Salt&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;&amp;#39;a&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;&amp;gt;,&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; [...]&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;}&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;它包含对其解析的字符串的引用。
我们需要将原始字符串的所有权移到我们的闭包中,同时将解析逻辑也移到其中。&lt;&#x2F;p&gt;
&lt;p&gt;为清楚起见,让我们创建一个单独的函数 , verify_password_hash：&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rs&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-rs &quot;&gt;&lt;code class=&quot;language-rs&quot; data-lang=&quot;rs&quot;&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F;! src&#x2F;routes&#x2F;newsletters.rs&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; [...]&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;#[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;tracing&lt;&#x2F;span&gt;&lt;span&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;instrument&lt;&#x2F;span&gt;&lt;span&gt;(name &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;Validate credentials&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;skip&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(credentials, pool)&lt;&#x2F;span&gt;&lt;span&gt;)]&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;async &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;validate_credentials&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;credentials&lt;&#x2F;span&gt;&lt;span&gt;: Credentials,&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;pool&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span&gt;PgPool,&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;) -&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;Result&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;uuid::Uuid, PublishError&amp;gt; {&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; [...]&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    tokio::task::spawn_blocking(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;move &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;|| &lt;&#x2F;span&gt;&lt;span&gt;{&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;verify_password_hash&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;            expected_password_hash, &lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;            credentials.password&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        )&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    })&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    .await&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;context&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;Failed to spawn blocking task.&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;map_err&lt;&#x2F;span&gt;&lt;span&gt;(PublishError::UnexpectedError)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;??&lt;&#x2F;span&gt;&lt;span&gt;;&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;Ok&lt;&#x2F;span&gt;&lt;span&gt;(user_id)&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;}&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;#[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;tracing&lt;&#x2F;span&gt;&lt;span&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;instrument&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    name &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;Verify password hash&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;skip&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(expected_password_hash, password_candidate)&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;)]&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;verify_password_hash&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;expected_password_hash&lt;&#x2F;span&gt;&lt;span&gt;: Secret&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;String&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;,&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;password_candidate&lt;&#x2F;span&gt;&lt;span&gt;: Secret&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;String&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;,&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;) -&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;Result&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;(), PublishError&amp;gt; {&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; expected_password_hash &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;PasswordHash::new(&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;            expected_password_hash.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;expose_secret&lt;&#x2F;span&gt;&lt;span&gt;()&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        )&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;context&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;Failed to parse hash in PHC string format.&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;map_err&lt;&#x2F;span&gt;&lt;span&gt;(PublishError::UnexpectedError)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;?&lt;&#x2F;span&gt;&lt;span&gt;;&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    Argon2::default()&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;verify_password&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;            password_candidate.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;expose_secret&lt;&#x2F;span&gt;&lt;span&gt;().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;as_bytes&lt;&#x2F;span&gt;&lt;span&gt;(),&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span&gt;expected_password_hash&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        )&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;context&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;Invalid password.&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;map_err&lt;&#x2F;span&gt;&lt;span&gt;(PublishError::AuthError)&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;}&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;编译ok！&lt;&#x2F;p&gt;
&lt;h4 id=&quot;3-4-1-gen-zong-shang-xia-wen-shi-xian-cheng-ben-di-de&quot;&gt;3.4.1. 跟踪上下文是线程本地的&lt;&#x2F;h4&gt;
&lt;p&gt;让我们再次查看verify password hashspan 的日志：&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;sh&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-sh &quot;&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;TEST_LOG&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;true &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;cargo&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; test&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt; --quiet --release&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; \&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;newsletters_are_delivered &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;| &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;grep &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;VERIFY PASSWORD&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;| &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;bunyan&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;[2021-08-30T10:03:07.613Z]  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;VERIFY PASSWORD HASH,START&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;] &lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;file&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;...&amp;quot;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;line&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;...&amp;quot;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;target&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;...&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;[2021-08-30T10:03:07.624Z]  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;VERIFY PASSWORD HASH,END&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;]&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;file&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;...&amp;quot;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;line&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;...&amp;quot;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;target&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;...&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;我们缺少从相应请求的根追踪继承的所有属性,例如request_id, http.method,http.route等。为什么？&lt;&#x2F;p&gt;
&lt;p&gt;让我们看看tracing&#x27;s 的文档：&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;Spans 形成一个树结构,除非它是根 span,否则所有 span 都有一个 parent,并且可能有一个或多个children。创建新追踪时,当前追踪成为新追踪的父级。&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;当前追踪是由返回的追踪tracing::Span::current(),让我们检查一下它的文档：&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;返回一个句柄,指向被认为Collector是当前追踪的追踪。&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;如果收集器指示它不跟踪当前追踪,或者调用此函数的线程当前不在追踪内,则返回的追踪将被禁用。&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;“当前追踪”实际上是指“当前线程的活动追踪”。
这就是我们不继承任何属性的原因：我们在一个单独的线程上产生我们的计算,并且在它执行时tracing::info_span!没有找到任何与之关联的活动。Span&lt;&#x2F;p&gt;
&lt;p&gt;我们可以通过将当前追踪显式附加到新生成的线程来解决此问题：&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rs&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-rs &quot;&gt;&lt;code class=&quot;language-rs&quot; data-lang=&quot;rs&quot;&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F;! src&#x2F;routes&#x2F;newsletters.rs&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; [...]&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;#[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;tracing&lt;&#x2F;span&gt;&lt;span&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;instrument&lt;&#x2F;span&gt;&lt;span&gt;(name &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;Validate credentials&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;skip&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(credentials, pool)&lt;&#x2F;span&gt;&lt;span&gt;)]&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;async &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;validate_credentials&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;credentials&lt;&#x2F;span&gt;&lt;span&gt;: Credentials,&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;pool&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span&gt;PgPool,&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;) -&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;Result&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;uuid::Uuid, PublishError&amp;gt; {&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; [...]&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; This executes before spawning the new thread&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; current_span &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;tracing::Span::current();&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    tokio::task::spawn_blocking(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;move &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;|| &lt;&#x2F;span&gt;&lt;span&gt;{&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; We then pass ownership to it into the closure&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; and explicitly executes all our computation&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; within its scope.&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        current_span.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;in_scope&lt;&#x2F;span&gt;&lt;span&gt;(|| {&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;verify_password_hash&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;* *&#x2F;&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        })&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    })&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; [...]&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;}&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;您可以验证它是否有效,我们现在正在获取我们关心的所有属性。
虽然有点冗长,让我们编写一个辅助函数：&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rs&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-rs &quot;&gt;&lt;code class=&quot;language-rs&quot; data-lang=&quot;rs&quot;&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F;! src&#x2F;telemetry.rs&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;use &lt;&#x2F;span&gt;&lt;span&gt;tokio::task::JoinHandle;&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; [...]&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; Just copied trait bounds and signature from `spawn_blocking`&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;pub fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;spawn_blocking_with_tracing&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;F, R&amp;gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;f&lt;&#x2F;span&gt;&lt;span&gt;: F) -&amp;gt; JoinHandle&amp;lt;R&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;where&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    F: FnOnce() -&amp;gt; R + Send + &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;&amp;#39;static&lt;&#x2F;span&gt;&lt;span&gt;,&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    R: Send + &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;&amp;#39;static&lt;&#x2F;span&gt;&lt;span&gt;,&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;{&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; current_span &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;tracing::Span::current();&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    tokio::task::spawn_blocking(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;move &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;||&lt;&#x2F;span&gt;&lt;span&gt; current_span.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;in_scope&lt;&#x2F;span&gt;&lt;span&gt;(f))&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;}&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F;! src&#x2F;routes&#x2F;newsletters.rs&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;use crate&lt;&#x2F;span&gt;&lt;span&gt;::telemetry::spawn_blocking_with_tracing;&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; [...]&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;#[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;tracing&lt;&#x2F;span&gt;&lt;span&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;instrument&lt;&#x2F;span&gt;&lt;span&gt;(name &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;Validate credentials&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;skip&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(credentials, pool)&lt;&#x2F;span&gt;&lt;span&gt;)]&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;async &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;validate_credentials&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;credentials&lt;&#x2F;span&gt;&lt;span&gt;: Credentials,&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;pool&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span&gt;PgPool,&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;) -&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;Result&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;uuid::Uuid, PublishError&amp;gt; {&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; [...]&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;spawn_blocking_with_tracing&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;move &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;|| &lt;&#x2F;span&gt;&lt;span&gt;{&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;verify_password_hash&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;* *&#x2F;&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    })&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; [...]&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;}&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;现在,每当我们需要将一些 CPU 密集型计算卸载到专用线程池时,我们都可以轻松地使用它。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;3-5-yong-hu-mei-ju&quot;&gt;3.5. 用户枚举&lt;&#x2F;h3&gt;
&lt;p&gt;让我们添加一个新的测试用例：&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rs&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-rs &quot;&gt;&lt;code class=&quot;language-rs&quot; data-lang=&quot;rs&quot;&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F;! tests&#x2F;api&#x2F;newsletter.rs&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;use &lt;&#x2F;span&gt;&lt;span&gt;uuid::Uuid;&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; [...]&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;#[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;tokio&lt;&#x2F;span&gt;&lt;span&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;test&lt;&#x2F;span&gt;&lt;span&gt;]&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;async &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;non_existing_user_is_rejected&lt;&#x2F;span&gt;&lt;span&gt;() {&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; Arrange&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; app &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;spawn_app&lt;&#x2F;span&gt;&lt;span&gt;().await;&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; Random credentials&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; username &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;Uuid::new_v4().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;to_string&lt;&#x2F;span&gt;&lt;span&gt;();&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; password &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;Uuid::new_v4().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;to_string&lt;&#x2F;span&gt;&lt;span&gt;();&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; response &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;reqwest::Client::new()&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;post&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span&gt;format!(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;{}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&#x2F;newsletters&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span&gt;app.address))&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;basic_auth&lt;&#x2F;span&gt;&lt;span&gt;(username, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;Some&lt;&#x2F;span&gt;&lt;span&gt;(password))&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;json&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span&gt;serde_json::json&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;!&lt;&#x2F;span&gt;&lt;span&gt;({&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;title&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;Newsletter title&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;,&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;content&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;: {&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;text&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;Newsletter body as plain text&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;,&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;html&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;&amp;lt;p&amp;gt;Newsletter body as HTML&amp;lt;&#x2F;p&amp;gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;,&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;            }&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        }))&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;send&lt;&#x2F;span&gt;&lt;span&gt;()&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        .await&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;expect&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;Failed to execute request.&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;);&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; Assert&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    assert_eq!(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;401&lt;&#x2F;span&gt;&lt;span&gt;, response.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;status&lt;&#x2F;span&gt;&lt;span&gt;().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;as_u16&lt;&#x2F;span&gt;&lt;span&gt;());&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    assert_eq!(&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;r&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;#&amp;quot;Basic realm=&amp;quot;publish&amp;quot;&amp;quot;#&lt;&#x2F;span&gt;&lt;span&gt;,&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        response.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;headers&lt;&#x2F;span&gt;&lt;span&gt;()[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;WWW-Authenticate&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;]&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    );&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;}&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;测试应该立即通过。
不过需要多长时间？&lt;&#x2F;p&gt;
&lt;p&gt;让我们看看日志！&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;sh&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-sh &quot;&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;TEST_LOG&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;true &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;cargo&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; test&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt; --quiet --release&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; \&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;non_existing_user_is_rejected &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;| &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;grep &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;HTTP REQUEST&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;| &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;bunyan&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;# [...] Omitting setup requests&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;[...] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;HTTP REQUEST,END&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;]&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;http.route&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;&#x2F;newsletters&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;, elapsed_milliseconds=1, ...&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;大约1ms。&lt;&#x2F;p&gt;
&lt;p&gt;让我们添加另一个测试：这次我们传递了一个有效的用户名和一个错误的密码。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rs&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-rs &quot;&gt;&lt;code class=&quot;language-rs&quot; data-lang=&quot;rs&quot;&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F;! tests&#x2F;api&#x2F;newsletter.rs&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; [...]&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;#[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;tokio&lt;&#x2F;span&gt;&lt;span&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;test&lt;&#x2F;span&gt;&lt;span&gt;]&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;async &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;invalid_password_is_rejected&lt;&#x2F;span&gt;&lt;span&gt;() {&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; Arrange&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; app &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;spawn_app&lt;&#x2F;span&gt;&lt;span&gt;().await;&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; username &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &amp;amp;&lt;&#x2F;span&gt;&lt;span&gt;app.test_user.username;&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; Random password&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; password &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;Uuid::new_v4().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;to_string&lt;&#x2F;span&gt;&lt;span&gt;();&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    assert_ne!(app.test_user.password, password);&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; response &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;reqwest::Client::new()&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;post&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span&gt;format!(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;{}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&#x2F;newsletters&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span&gt;app.address))&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;basic_auth&lt;&#x2F;span&gt;&lt;span&gt;(username, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;Some&lt;&#x2F;span&gt;&lt;span&gt;(password))&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;json&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span&gt;serde_json::json&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;!&lt;&#x2F;span&gt;&lt;span&gt;({&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;title&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;Newsletter title&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;,&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;content&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;: {&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;text&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;Newsletter body as plain text&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;,&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;html&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;&amp;lt;p&amp;gt;Newsletter body as HTML&amp;lt;&#x2F;p&amp;gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;,&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;            }&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        }))&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;send&lt;&#x2F;span&gt;&lt;span&gt;()&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        .await&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;expect&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;Failed to execute request.&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;);&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; Assert&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    assert_eq!(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;401&lt;&#x2F;span&gt;&lt;span&gt;, response.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;status&lt;&#x2F;span&gt;&lt;span&gt;().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;as_u16&lt;&#x2F;span&gt;&lt;span&gt;());&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    assert_eq!(&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;r&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;#&amp;quot;Basic realm=&amp;quot;publish&amp;quot;&amp;quot;#&lt;&#x2F;span&gt;&lt;span&gt;,&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        response.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;headers&lt;&#x2F;span&gt;&lt;span&gt;()[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;WWW-Authenticate&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;]&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    );&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;}&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;这个也应该通过。请求失败需要多长时间？&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;sh&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-sh &quot;&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;TEST_LOG&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;true &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;cargo&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; test&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt; --quiet --release&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; \&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;invalid_password_is_rejected &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;| &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;grep &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;HTTP REQUEST&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;| &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;bunyan&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;# [...] Omitting setup requests&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;[...] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;HTTP REQUEST,END&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;]&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;http.route&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;&#x2F;newsletters&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;, elapsed_milliseconds=11, ...&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;大约 10 毫秒,它小了一个数量级！
我们可以利用这种差异来执行定时攻击,这是更广泛的旁路信道攻击类别的成员。&lt;&#x2F;p&gt;
&lt;p&gt;如果攻击者知道至少一个有效的用户名,他们可以检查服务器响应时间&lt;sup class=&quot;footnote-reference&quot;&gt;&lt;a href=&quot;#11&quot;&gt;11&lt;&#x2F;a&gt;&lt;&#x2F;sup&gt;以确认是否存在另一个用户名,我们正在研究一个潜在的用户枚举漏洞。
这是一个问题吗？&lt;&#x2F;p&gt;
&lt;p&gt;这取决于,如果您正在运行 Gmail,还有很多其他方法可以确定@gmail.com电子邮件地址是否存在。电子邮件地址的有效性不是秘密！&lt;&#x2F;p&gt;
&lt;p&gt;如果您正在运行SaaS产品,情况可能会更加微妙。
让我们假设一个虚构的场景：您的 SaaS 产品提供工资单服务并使用电子邮件地址作为用户名。有单独的员工和管理员登录页面。
我的目标是访问工资单数据,我需要让具有特权访问权限的员工妥协。我们可以抓取LinkedIn以获取财务部门所有员工的姓名和姓氏。公司电子邮件遵循可预测的结构 ( name.surname@payrollaces.com ),因此我们有一份候选人名单。
我们现在可以对管理员登录页面执行定时攻击,以将列表缩小到有权访问的人。&lt;&#x2F;p&gt;
&lt;p&gt;即使在我们虚构的示例中,用户枚举本身也不足以提升我们的权限。
但它可以作为垫脚石来缩小一组目标以进行更精确的攻击。&lt;&#x2F;p&gt;
&lt;p&gt;我们如何预防？
两种策略：&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;去除因密码无效导致认证失败与用户名不存在导致认证失败的时间差；&lt;&#x2F;li&gt;
&lt;li&gt;限制给定 IP&#x2F;用户名的身份验证尝试失败次数。
第二个通常作为对暴力攻击的保护很有价值,但它需要保持一些状态,我们将把它留到以后。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;让我们专注于第一个。
为了消除时间差异,我们需要在两种情况下执行相同数量的工作。&lt;&#x2F;p&gt;
&lt;p&gt;现在,我们遵循这个食谱：&lt;&#x2F;p&gt;
&lt;p&gt;获取给定用户名的存储凭据；
如果它们不存在,则返回 401；
如果存在,则对候选密码进行哈希处理并与存储的哈希值进行比较。
我们需要删除那个提前退出,我们应该有一个回退预期密码（带有盐和负载参数）,可以与密码候选的哈希值进行比较。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rs&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-rs &quot;&gt;&lt;code class=&quot;language-rs&quot; data-lang=&quot;rs&quot;&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F;! src&#x2F;routes&#x2F;newsletters.rs&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; [...]&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;#[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;tracing&lt;&#x2F;span&gt;&lt;span&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;instrument&lt;&#x2F;span&gt;&lt;span&gt;(name &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;Validate credentials&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;skip&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(credentials, pool)&lt;&#x2F;span&gt;&lt;span&gt;)]&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;async &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;validate_credentials&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;credentials&lt;&#x2F;span&gt;&lt;span&gt;: Credentials,&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;pool&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span&gt;PgPool,&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;) -&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;Result&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;uuid::Uuid, PublishError&amp;gt; {&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;let mut&lt;&#x2F;span&gt;&lt;span&gt; user_id &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;None&lt;&#x2F;span&gt;&lt;span&gt;;&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;let mut&lt;&#x2F;span&gt;&lt;span&gt; expected_password_hash &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;Secret::new(&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;$argon2id$v=19$m=15000,t=2,p=1$\&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;        gZiV&#x2F;M1gPc22ElAH&#x2F;Jh1Hw$\&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;        CWOrkoo7oJBQ&#x2F;iyh7uJ0LO2aLEfrHwTWllSAxT0zRno&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;            .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;to_string&lt;&#x2F;span&gt;&lt;span&gt;()&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    );&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;if let &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;Some&lt;&#x2F;span&gt;&lt;span&gt;((stored_user_id, stored_password_hash)) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;get_stored_credentials&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span&gt;credentials.username, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span&gt;pool)&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;            .await&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;            .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;map_err&lt;&#x2F;span&gt;&lt;span&gt;(PublishError::UnexpectedError)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;?&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    {&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        user_id &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;Some&lt;&#x2F;span&gt;&lt;span&gt;(stored_user_id);&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        expected_password_hash &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; stored_password_hash;&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    }&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;spawn_blocking_with_tracing&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;move &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;|| &lt;&#x2F;span&gt;&lt;span&gt;{&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;verify_password_hash&lt;&#x2F;span&gt;&lt;span&gt;(expected_password_hash, credentials.password)&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    })&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    .await&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;context&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;Failed to spawn blocking task.&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;map_err&lt;&#x2F;span&gt;&lt;span&gt;(PublishError::UnexpectedError)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;??&lt;&#x2F;span&gt;&lt;span&gt;;&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; This is only set to `Some` if we found credentials in the store&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; So, even if the default password ends up matching (somehow)&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; with the provided password, &lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; we never authenticate a non-existing user.&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; You can easily add a unit test for that precise scenario.&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    user_id.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;ok_or_else&lt;&#x2F;span&gt;&lt;span&gt;(|| &lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        PublishError::AuthError(anyhow::anyhow&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;!&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;Unknown username.&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;))&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    )&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;}&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F;! tests&#x2F;api&#x2F;helpers.rs&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;use &lt;&#x2F;span&gt;&lt;span&gt;argon2::{Algorithm, Argon2, Params, PasswordHasher, Version};&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; [...]&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;impl &lt;&#x2F;span&gt;&lt;span&gt;TestUser {&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    async &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;store&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;pool&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span&gt;PgPool) {&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; salt &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;SaltString::generate(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;mut &lt;&#x2F;span&gt;&lt;span&gt;rand::thread_rng());&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; Match parameters of the default password&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; password_hash &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;Argon2::new(&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;            Algorithm::Argon2id,&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;            Version::V0x13,&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;            Params::new(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;15000&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;None&lt;&#x2F;span&gt;&lt;span&gt;).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;unwrap&lt;&#x2F;span&gt;&lt;span&gt;(),&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        )&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;hash_password&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.password.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;as_bytes&lt;&#x2F;span&gt;&lt;span&gt;(), &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span&gt;salt)&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;unwrap&lt;&#x2F;span&gt;&lt;span&gt;()&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;to_string&lt;&#x2F;span&gt;&lt;span&gt;();&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; [...]&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    }&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; [...]&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;}&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;现在不应该有任何统计上显着的时间差异。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;4-an-quan-ma&quot;&gt;4. 安全吗？&lt;&#x2F;h2&gt;
&lt;p&gt;在构建基于密码的身份验证流程时,我们竭尽全力遵循所有最常见的最佳实践。
是时候问问自己了：它安全吗？&lt;&#x2F;p&gt;
&lt;h3 id=&quot;4-1-chuan-shu-ceng-an-quan-tls&quot;&gt;4.1. 传输层安全 (TLS)&lt;&#x2F;h3&gt;
&lt;p&gt;在构建基于密码的身份验证流程时,我们竭尽全力遵循所有最常见的最佳实践。
是时候问问自己了：它安全吗？&lt;&#x2F;p&gt;
&lt;p&gt;我们使用“基本”身份验证方案在客户端和服务器之间传递凭据,用户名和密码已编码,但未加密。
我们必须使用传输层安全 (TLS) 来确保没有人可以窃听客户端和服务器之间的流量来破坏用户凭据（中间人攻击,MITM）&lt;sup class=&quot;footnote-reference&quot;&gt;&lt;a href=&quot;#12&quot;&gt;12&lt;&#x2F;a&gt;&lt;&#x2F;sup&gt;。
我们的 API 已经通过 HTTPS 提供服务,所以这里无事可做。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;4-2-zhong-she-mi-ma&quot;&gt;4.2.重设密码&lt;&#x2F;h3&gt;
&lt;p&gt;如果攻击者设法窃取了一组有效的用户凭据,会发生什么？
密码不会过期,它们是长期存在的秘密。&lt;&#x2F;p&gt;
&lt;p&gt;目前,用户无法重置密码。这绝对是我们需要填补的空白。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;4-3-jiao-hu-lei-xing&quot;&gt;4.3.交互类型&lt;&#x2F;h3&gt;
&lt;p&gt;到目前为止,我们对于谁在调用我们的 API 还很模糊。&lt;&#x2F;p&gt;
&lt;p&gt;当涉及到身份验证时,我们需要支持的交互类型是一个关键的决策因素。&lt;&#x2F;p&gt;
&lt;p&gt;我们将查看三类调用者：&lt;&#x2F;p&gt;
&lt;p&gt;其他 API（机器对机器）；
一个人,通过浏览器；
另一个API,代表一个人。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;4-4-ji-qi-dui-ji-qi&quot;&gt;4.4.机器对机器&lt;&#x2F;h3&gt;
&lt;p&gt;您的 API 的使用者可能是一台机器（例如另一个 API）。
这通常是微服务架构中的情况,您的功能来自通过网络交互的各种服务。&lt;&#x2F;p&gt;
&lt;p&gt;为了显着提高我们的安全配置文件,我们必须加入他们拥有的东西（例如请求签名）或他们拥有的东西（例如 IP 范围限制）。
当所有服务都归同一个组织所有时,一种流行的选择是双向 TLS (mTLS)。&lt;&#x2F;p&gt;
&lt;p&gt;签名和 mTLS 都依赖于公钥加密,必须提供、轮换和管理密钥。仅当系统达到一定大小时,开销才合理。&lt;&#x2F;p&gt;
&lt;h4 id=&quot;4-4-1-tong-guo-oauth2-de-ke-hu-duan-ping-ju&quot;&gt;4.4.1. 通过 OAuth2 的客户端凭据&lt;&#x2F;h4&gt;
&lt;p&gt;另一种选择是使用 OAuth2 客户端凭据流。稍后我们将更多地谈论 OAuth2,但让我们谈谈它的战术优缺点。&lt;&#x2F;p&gt;
&lt;p&gt;API 不再需要管理密码（客户端机密,在 OAuth2 术语中）,这个问题被委托给一个集中的授权服务器。授权服务器有多种交钥匙实现,OSS 和商业。您可以依靠它们而不是自己滚动。&lt;&#x2F;p&gt;
&lt;p&gt;调用者向授权服务器进行身份验证,如果成功,则身份验证服务器授予他们一组临时凭证（JWT 访问令牌）,可用于调用我们的 API。
我们的 API 可以使用公钥加密验证访问令牌的有效性,而无需保留任何状态。我们的 API 永远不会看到实际的密码,即客户端密码。&lt;&#x2F;p&gt;
&lt;p&gt;JWT 验证并非没有风险,规范充满了危险的边缘情况。稍后我们将对此进行更多讨论。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;4-5-ren-tong-guo-liu-lan-qi&quot;&gt;4.5. 人通过浏览器&lt;&#x2F;h3&gt;
&lt;p&gt;如果我们使用网络浏览器与人打交道怎么办？&lt;&#x2F;p&gt;
&lt;p&gt;“基本”身份验证要求客户端在每个请求中都提供他们的凭据。
我们现在有一个受保护的端点,但您可以轻松地描绘一个提供特权功能的五页或十页的情况。就目前而言,“基本”身份验证将强制用户在每个页面上提交他们的凭据。不是很好。&lt;&#x2F;p&gt;
&lt;p&gt;我们需要一种方法来记住用户在片刻之前进行了身份验证,即将某种状态附加到来自同一浏览器的一系列请求。这是使用会话完成的。&lt;&#x2F;p&gt;
&lt;p&gt;要求用户通过登录表单&lt;sup class=&quot;footnote-reference&quot;&gt;&lt;a href=&quot;#13&quot;&gt;13&lt;&#x2F;a&gt;&lt;&#x2F;sup&gt;进行一次身份验证：如果成功,则服务器生成一次性机密,一个经过身份验证的会话令牌。令牌作为安全 cookie存储在浏览器中。
会话与密码不同,旨在过期,这降低了有效会话令牌被破坏的可能性（尤其是在非活动用户自动注销的情况下）。如果怀疑他们的会话已被劫持,它还可以防止用户必须重置密码,强制注销比自动密码重置更容易接受。&lt;&#x2F;p&gt;
&lt;p&gt;这种方法通常称为基于会话的身份验证。&lt;&#x2F;p&gt;
&lt;h4 id=&quot;4-5-1-lian-he-shen-fen&quot;&gt;4.5.1. 联合身份&lt;&#x2F;h4&gt;
&lt;p&gt;使用基于会话的身份验证,我们仍然需要处理一个身份验证步骤,登录表单。
我们可以继续自己动手,我们学到的关于密码的一切仍然是相关的,即使我们放弃了“基本”身份验证方案。&lt;&#x2F;p&gt;
&lt;p&gt;许多网站选择为其用户提供额外的选项：通过社交资料登录,例如“使用 Google 登录”。这消除了注册流程中的摩擦（无需创建另一个密码！）,增加转换,一个理想的结果。&lt;&#x2F;p&gt;
&lt;p&gt;社交登录依赖于身份联合,我们将身份验证步骤委托给第三方身份提供商,后者又与我们共享我们要求的信息（例如电子邮件地址、全名和出生日期）。&lt;&#x2F;p&gt;
&lt;p&gt;身份联合的常见实现依赖于 OpenID Connect,它是 OAuth2 标准之上的身份层。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;4-6-ji-qi-dui-ji-qi-dai-biao-yi-ge-ren&quot;&gt;4.6. 机器对机器,代表一个人&lt;&#x2F;h3&gt;
&lt;p&gt;还有一种情况：一个人授权一台机器（例如第三方服务）代表他们对我们的 API 执行操作。
例如,为 Twitter 提供替代 UI 的移动应用程序。&lt;&#x2F;p&gt;
&lt;p&gt;重要的是要强调这与我们审查的第一个场景（纯机器对机器身份验证）有何不同。
在这种情况下,第三方服务无权单独对我们的 API 执行任何操作。第三方服务只有在用户授予他们访问权限时才能对我们的 API 执行操作,范围仅限于他们的权限集。
我可以安装一个移动应用程序来代表我写推文,但我不能授权它代表 David Guetta 发推文。&lt;&#x2F;p&gt;
&lt;p&gt;“基本”身份验证在这里非常不合适：我们不想与第三方应用程序共享我们的密码。越多的人看到我们的密码,就越有可能被泄露。&lt;&#x2F;p&gt;
&lt;p&gt;此外,使用共享凭证保持审计跟踪是一场噩梦。当出现问题时,无法确定谁做了什么：真的是我吗？它是我与之共享凭据的 20 个应用程序之一吗？谁负责？&lt;&#x2F;p&gt;
&lt;p&gt;这是 OAuth 2 的教科书场景,第三方永远不会看到我们的用户名和密码。他们从认证服务器接收到一个不透明的访问令牌,我们的 API 知道如何检查以授予（或拒绝）访问权限。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;5-wo-men-jie-xia-lai-ying-gai-zuo-shi-yao&quot;&gt;5. 我们接下来应该做什么&lt;&#x2F;h2&gt;
&lt;p&gt;浏览器是我们的主要目标,它已经决定了。我们的身份验证策略需要相应地发展！&lt;&#x2F;p&gt;
&lt;p&gt;我们将首先将我们的“基本”身份验证流程转换为具有基于会话的身份验证的登录表单。
我们将从头开始构建一个管理仪表板。它将包括一个登录表单、一个注销链接和一个更改密码的表单。它将给我们一个机会来讨论一些安全挑战（例如 XSS）,介绍新概念（例如 cookie、HMAC 标签）并尝试新工具（例如 flash 消息actix-session）。&lt;&#x2F;p&gt;
&lt;p&gt;这将是下一集的路线图！再见！&lt;&#x2F;p&gt;
&lt;h2 id=&quot;5-jiao-zhu&quot;&gt;5.脚注&lt;&#x2F;h2&gt;
&lt;p&gt;&lt;sup class=&quot;footnote-reference&quot;&gt;&lt;a href=&quot;#1&quot;&gt;1&lt;&#x2F;a&gt;&lt;&#x2F;sup&gt; base64-encoding 确保输出中的所有字符都是ASCII,但它不提供任何保护：解码不需要秘密。换句话说,编码不是加密！&lt;br&gt;
&lt;sup class=&quot;footnote-reference&quot;&gt;&lt;a href=&quot;#2&quot;&gt;5&lt;&#x2F;a&gt;&lt;&#x2F;sup&gt; 假设输入空间是有限的（即密码长度有上限）,理论上可以找到一个完美的散列函数 f(x) == f(y)隐含x == y。&lt;br&gt;
&lt;sup class=&quot;footnote-reference&quot;&gt;&lt;a href=&quot;#3&quot;&gt;2&lt;&#x2F;a&gt;&lt;&#x2F;sup&gt; 在研究蛮力攻击时,您经常会看到彩虹表的提及,一种用于预先计算和查找哈希的有效数据结构。&lt;br&gt;
&lt;sup class=&quot;footnote-reference&quot;&gt;&lt;a href=&quot;#4&quot;&gt;3&lt;&#x2F;a&gt;&lt;&#x2F;sup&gt; 这种粗略的计算应该清楚地表明,即使服务器使用快速散列算法存储密码,使用随机生成的密码也可以为您作为用户提供针对暴力攻击的显着保护级别. 始终使用密码管理器确实是提升安全配置文件的最简单方法之一。&lt;br&gt;
&lt;sup class=&quot;footnote-reference&quot;&gt;&lt;a href=&quot;#5&quot;&gt;4&lt;&#x2F;a&gt;&lt;&#x2F;sup&gt; 一般来说,OWASP 是有关 Web 应用程序安全性的优质教育材料的宝库。您应该尽可能熟悉 OWASP 的材料,特别是如果您的团队&#x2F;组织中没有应用程序安全专家来支持您。在我们链接的备忘单之上,确保浏览他们的应用程序安全验证标准。&lt;br&gt;
&lt;sup class=&quot;footnote-reference&quot;&gt;&lt;a href=&quot;#6&quot;&gt;6&lt;&#x2F;a&gt;&lt;&#x2F;sup&gt; 这就是为什么 OWASP 建议增加一个额外的防御层的原因。存储在数据库中的所有哈希都使用共享密钥加密,只有应用程序知道。然而,加密也带来了一系列挑战：我们将把密钥存储在哪里？我们如何旋转它？答案通常涉及硬件安全模块 (HSM) 或秘密保险库,例如 AWS CloudHSM、AWS KMS 或 Hashicorp Vault。对密钥管理的全面概述超出了本书的范围。&lt;br&gt;
&lt;sup class=&quot;footnote-reference&quot;&gt;&lt;a href=&quot;#7&quot;&gt;7&lt;&#x2F;a&gt;&lt;&#x2F;sup&gt; 我没有深入研究实现的不同哈希算法的源代码PasswordVerifier,但我确实想知道为什么verify_password需要将&amp;amp;self其作为参数。Argon2它绝对没有用,但它迫使我们通过一个Argon2::default才能调用verify_password.&lt;br&gt;
&lt;sup class=&quot;footnote-reference&quot;&gt;&lt;a href=&quot;#8&quot;&gt;8&lt;&#x2F;a&gt;&lt;&#x2F;sup&gt; PasswordVerifier::verify_password还做了一件事,它依赖Output于比较两个哈希,而不是使用原始字节。Output的实现PartialEq和Eq旨在以恒定时间进行评估,无论输入有多么不同或相似,函数执行都将花费相同的时间。假设攻击者完全了解服务器正在使用的哈希算法配置,他们可以分析每次身份验证尝试的响应时间,以推断密码哈希的第一个字节,结合字典,这可以帮助他们破解密码。这种攻击的可行性是值得商榷的,当加盐到位时更是如此。尽管如此,这并不需要我们付出任何代价,安全总比后悔好。&lt;br&gt;
&lt;sup class=&quot;footnote-reference&quot;&gt;&lt;a href=&quot;#9&quot;&gt;9&lt;&#x2F;a&gt;&lt;&#x2F;sup&gt; 我们的示例是故意过分简化的。实际上,这些状态中的每一个都将依次具有子状态 .await我们正在调用的函数体中的每个状态。未来可以变成一个深度嵌套的状态机！&lt;br&gt;
&lt;sup class=&quot;footnote-reference&quot;&gt;&lt;a href=&quot;#10&quot;&gt;10&lt;&#x2F;a&gt;&lt;&#x2F;sup&gt; 在“异步：什么是阻塞？”中报告了这种启发式方法。由tokio的维护者之一 Alice Rhyl 提供。我强烈建议您阅读一篇文章,以更好地理解其基本tokio机制async&#x2F;await！&lt;br&gt;
&lt;sup class=&quot;footnote-reference&quot;&gt;&lt;a href=&quot;#11&quot;&gt;11&lt;&#x2F;a&gt;&lt;&#x2F;sup&gt; 在现实生活场景中,攻击者和您的服务器之间存在网络。负载和网络差异可能会掩盖一组有限尝试的速度差异,但如果您收集足够的数据点,应该可以注意到延迟的统计显着差异。&lt;br&gt;
&lt;sup class=&quot;footnote-reference&quot;&gt;&lt;a href=&quot;#12&quot;&gt;12&lt;&#x2F;a&gt;&lt;&#x2F;sup&gt; 这就是为什么您永远不应该将密码输入不使用 HTTPS 的网站,即 HTTP + TLS。&lt;br&gt;
&lt;sup class=&quot;footnote-reference&quot;&gt;&lt;a href=&quot;#13&quot;&gt;13&lt;&#x2F;a&gt;&lt;&#x2F;sup&gt; 实现一个安全的登录表单是它自己的挑战,你好CSRF！我们将在本章后面更仔细地研究它。&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Forest的daemon、cli流程和钱包结构</title>
		<published>2022-07-05T00:00:00+00:00</published>
		<updated>2022-07-05T00:00:00+00:00</updated>
		<link href="https://jimluo.github.io/forest/" type="text/html"/>
		<id>https://jimluo.github.io/forest/</id>
		<content type="html">&lt;p&gt;去年了解过Filecoin，对其Go版的实现lotus运行和分析过，源于对IPFS的兴趣。&lt;&#x2F;p&gt;
&lt;p&gt;今年学习零知识证明时，简单过了下ref_fvm，同时分析Filecoin的Rust版forest时，提交2个小PR，都是关于wallet的。顺带记录了些学习笔记如下。&lt;&#x2F;p&gt;
&lt;p&gt;forest的目的很明确，为了充分验证lotus对spec实现的完整性和缺陷，可能是21年的那场&lt;a href=&quot;https:&#x2F;&#x2F;www.8btc.com&#x2F;media&#x2F;6610800&quot;&gt;&amp;quot;双花&amp;quot;&lt;&#x2F;a&gt;问题&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;简单来说，就是人们对链的检查方式，这会呈现出消息被处理了两次的样子，进而产生了误解。&lt;&#x2F;p&gt;
&lt;p&gt;具体来说，就是部分数字资产平台使用了一种错误的处理链状态的方式——在tipset的每个块上调用ChainGetBlockMessages，然后在这些消息上调用StateGetReceipt。&lt;&#x2F;p&gt;
&lt;p&gt;而当StateGetReceipt被调用在两个相似的消息上（其中一个被执行，另一个被跳过），它将提供相同的结果给人，这就会导致给人一种两种消息都被执行的错觉。&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;使用中首先遇到的2个问题&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;每次cli操作都要输入passphrase&lt;&#x2F;li&gt;
&lt;li&gt;jsonrpc错误后立即终止进程&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;项目维护人解释到，forest执行了严格的安全规范，高安全等级对应用的要求使然。其意已表明filecoin的开发策略是多角度保证其目标。&lt;&#x2F;p&gt;
&lt;p&gt;其中的jsonrpc错误后立即终止进程要求，为我提交的wallet list带来的修改会导致大量重构埋下了伏笔。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;liu-cheng-1-daemonde-qi-dong-liu-cheng&quot;&gt;流程1，daemon的启动流程&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;start
&lt;ul&gt;
&lt;li&gt;read keystore&lt;&#x2F;li&gt;
&lt;li&gt;start promithus&lt;&#x2F;li&gt;
&lt;li&gt;print token&lt;&#x2F;li&gt;
&lt;li&gt;init db&lt;&#x2F;li&gt;
&lt;li&gt;chain_store, publish, set_genesis&lt;&#x2F;li&gt;
&lt;li&gt;genesis, tipset, read_genesis_head&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;libp2p&lt;&#x2F;li&gt;
&lt;li&gt;mpoll&lt;&#x2F;li&gt;
&lt;li&gt;consensus&lt;&#x2F;li&gt;
&lt;li&gt;chainMuxer&lt;&#x2F;li&gt;
&lt;li&gt;p2p&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h4 id=&quot;qi-zhong-zhu-yao-de-task&quot;&gt;其中主要的task&lt;&#x2F;h4&gt;
&lt;ul&gt;
&lt;li&gt;mining&lt;&#x2F;li&gt;
&lt;li&gt;prometheus&lt;&#x2F;li&gt;
&lt;li&gt;p2p&lt;&#x2F;li&gt;
&lt;li&gt;rpc&lt;&#x2F;li&gt;
&lt;li&gt;sync: chainMuxer&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;liu-cheng-2-cliqi-dong-liu-cheng-wallet-zi-ming-ling-de-liu-cheng&quot;&gt;流程2，cli启动流程，wallet 子命令的流程&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;解析参数&lt;&#x2F;li&gt;
&lt;li&gt;构造jsonrpc参数&lt;&#x2F;li&gt;
&lt;li&gt;jsonrpc&lt;&#x2F;li&gt;
&lt;li&gt;具体的api&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;pre style=&quot;background-color:#f9f9f9;color:#111111;&quot;&gt;&lt;code&gt;&lt;span&gt;&amp;gt; forest [wallet list | state lookup]&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;解析参数        *_cmd.rs [wallet_cmd | state_cmd ]&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;构造jsonrpc参数 *_opt.rs [wallet_opt | state_opt ]&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;call() -&amp;gt; jsonrpc: &lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  reqest object   { version, method, params, id }&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  response object { version, result, error, id }&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;key_mangement&#x2F;wallet.rs&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  list_addr() &#x2F;&#x2F; 从KeyStore或state里获取&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;qian-bao&quot;&gt;钱包&lt;&#x2F;h2&gt;
&lt;p&gt;我改动的部分是参照lotus&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;list时能输出除Address外，还有此Address的Balance、Nonce、Default&lt;&#x2F;li&gt;
&lt;li&gt;将原来的list调用组合了对KeyStore的获取和state中的Balance的获取，但因json API中输出类型都是一个String，暂且去掉了Nonce&lt;&#x2F;li&gt;
&lt;li&gt;wallet_balance().await().map_err(xxx)中，xxx遇到err后会终止进程。所以其后的unwarp()或expect()不会被执行，只是将Result里的String解绑出来&lt;&#x2F;li&gt;
&lt;li&gt;lotus里有独立jsonrpc module处理(&amp;quot;github.com&#x2F;filecoin-project&#x2F;go-jsonrpc&amp;quot;)，没有错误后终止进程&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;qian-bao-de-jian-hua-gong-neng&quot;&gt;钱包的简化功能&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;挣钱：新区块的签名，转账时签名&lt;&#x2F;li&gt;
&lt;li&gt;收钱：老区块的验签，接收转账时验签&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;qian-bao-gong-neng-de-yue-shu&quot;&gt;钱包功能的约束&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;多设备：导入多出在设备之间&lt;&#x2F;li&gt;
&lt;li&gt;多账户：增删改查多个账户&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;zhang-hu-de-ji-ben-jie-gou&quot;&gt;账户的基本结构&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;私钥：分BLS聚合签和Secp256k1椭圆算法签名&lt;&#x2F;li&gt;
&lt;li&gt;公钥：对外提供的标识&lt;&#x2F;li&gt;
&lt;li&gt;地址：可视文本化的公钥&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;walletshu-ju-jie-gou&quot;&gt;wallet数据结构&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;Wallet { keys&amp;lt;Address, Key&amp;gt;, keystore }&lt;&#x2F;li&gt;
&lt;li&gt;Key { KeyInfo, public_key, address }&lt;&#x2F;li&gt;
&lt;li&gt;KeyInfo { key_type, private_key }&lt;&#x2F;li&gt;
&lt;li&gt;Address { Net(main&#x2F;test), payload(ID&#x2F;Secp256k1&#x2F;Actor&#x2F;BLS) }&lt;&#x2F;li&gt;
&lt;li&gt;KeyStore { key_info&amp;lt;addr, KeyInfo&amp;gt;, persistence, encryption }
&lt;img src=&quot;..&#x2F;images&#x2F;wallet.png&quot; alt=&quot;key_mangement&quot; &#x2F;&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;huan-you-2ge-bugzai-fen-xi-zhong&quot;&gt;还有2个bug在分析中&lt;&#x2F;h2&gt;
&lt;p&gt;k块同步问题，还在分析中，抽空攒个大块时间处理&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;输出错乱&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;pre data-lang=&quot;sh&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-sh &quot;&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;INFO&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;  forest::daemon         &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; Using network :: testnetnet&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;INFO&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;  genesis                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; Importing chain from snapshot&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;INFO&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;  genesis                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; Reading file...&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;Importing&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; snapshot 3.34 GB &#x2F; 3.91 GB [===============&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;--------&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;Importing&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; snapshot 3.34 GB &#x2F; 3.91 GB &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;======================================-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; 85.73 % 2.35&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;Importing&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; snapshot 3.39 GB &#x2F; 3.91 GB [=&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;Importing&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; snapshot 3.&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;ImportingScanning&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; blockchain 1079961 &#x2F; 1086061 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;============&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; 99.44 % 116.94&#x2F;s 52s  &lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;genesis                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; Accepting [Cid&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ul&gt;
&lt;li&gt;bad_block引起的循环不停的Bootstrapping&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;pre data-lang=&quot;sh&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-sh &quot;&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;ERROR&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; chain_sync::chain_muxer   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; Bootstrapping failed, re-evaluating the network head to retry the bootstrap. Error = &lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;TipsetRangeSyncer&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(Validation(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;Validation error: Consensus error: StateManager error: failed to find state tree xxx &amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;))&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>IPFS与web2.0的简单比较</title>
		<published>2022-06-18T00:00:00+00:00</published>
		<updated>2022-06-18T00:00:00+00:00</updated>
		<link href="https://jimluo.github.io/ipfs/" type="text/html"/>
		<id>https://jimluo.github.io/ipfs/</id>
		<content type="html">&lt;p&gt;对IPFS技术的好奇，源于2点&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;已有经验，原来做视频会议时有p2p的通话，多人会议就是多p2多p(基于WebRTC的SFU)。&lt;&#x2F;li&gt;
&lt;li&gt;web3.0的好奇，通过IPFS检验订正下自己设计一套网络系统的能力&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;历史成因&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;2008年中本聪对英国政府增发货币不满，认为国家不发币也可以规避通货膨胀带来的恶果，就开发了&lt;a href=&quot;https:&#x2F;&#x2F;bitcoin.org&quot;&gt;比特币&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;2010年&lt;a href=&quot;https:&#x2F;&#x2F;vitalik.ca&quot;&gt;Vitalik&lt;&#x2F;a&gt;对暴雪擅自削弱魔兽世界里术士的魔法，担心中心化服务的问题，2013年开发了&lt;a href=&quot;https:&#x2F;&#x2F;ethereum.org&quot;&gt;以太坊&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;2014年以太坊的&lt;a href=&quot;https:&#x2F;&#x2F;gavwood.com&quot;&gt;Gavin Wood&lt;&#x2F;a&gt;提出web3.0(去中心化、互通增强、所有权)&lt;&#x2F;li&gt;
&lt;li&gt;2014年开始由Juan Benet设计IPFS，后由&lt;a href=&quot;https:&#x2F;&#x2F;protocol.ai&#x2F;&quot;&gt;Protocol Labs&lt;&#x2F;a&gt;在开源社区的帮助下发展起来&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;本篇文章思考和写作是基于&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;与web2.0的比较（将中心化的功能拆装到每个peer中）&lt;&#x2F;li&gt;
&lt;li&gt;参考通俗畅达的&lt;a href=&quot;https:&#x2F;&#x2F;research.protocol.ai&#x2F;tutorials&#x2F;resnetlab-on-tour&#x2F;&quot;&gt;IPFS的教程&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;zi-shang-er-xia-de-wang-luo-liu-cheng&quot;&gt;自上而下的网络流程&lt;&#x2F;h2&gt;
&lt;pre style=&quot;background-color:#f9f9f9;color:#111111;&quot;&gt;&lt;code&gt;&lt;span&gt;网上有一道高频面试题：浏览器从输入网址到页面展示的过程？&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;网上的讨论结果和详细解答很多，很多人正是基于此题把还给老师的网络原理课又借了回来不准备还了。&lt;&#x2F;p&gt;
&lt;p&gt;我想究其原因，网络原理细节丛生，多课程交叉，多数内容不易于用语言(老师和书)描述，所以很多图解xxx的书收视率一直居高不下，也确实是很适合人脑。&lt;&#x2F;p&gt;
&lt;p&gt;说到IPFS原理，提供了很多文档和宣传，但都没有整合如网络课本的系统，初看时被其宣传放大的优点牵引，细节蔓延。遇到向别人解释时，就变成讲故事讲案例了。&lt;&#x2F;p&gt;
&lt;p&gt;我想顺着自上而下的网络流程和基于中心化网络的比较，能更适合人脑理解吸收。&lt;&#x2F;p&gt;
&lt;p&gt;这道题的答案是&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;URL输入&lt;&#x2F;li&gt;
&lt;li&gt;DNS解析寻址&lt;&#x2F;li&gt;
&lt;li&gt;建立TCP连接&lt;&#x2F;li&gt;
&lt;li&gt;发送HTTPS请求&lt;&#x2F;li&gt;
&lt;li&gt;服务器响应请求&lt;&#x2F;li&gt;
&lt;li&gt;浏览器解析渲染页面&lt;&#x2F;li&gt;
&lt;li&gt;HTTPS请求结束，断开TCP连接&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;重点要解释URL、DNS、HTTP、TLS、TCP和渲染的细节，这些技术的产生的背景和约束，回过头来再系统概括之间的关系，其他非功能因素(效率、成本、安全、兼容)对系统的塑造，应该就能回答的比较完善了。&lt;&#x2F;p&gt;
&lt;p&gt;IPFS去中心化时这道题的答案与中心化时对比差异&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;cid输入&lt;&#x2F;li&gt;
&lt;li&gt;DHT寻址路由&lt;&#x2F;li&gt;
&lt;li&gt;libp2p建立多个p2p连接&lt;&#x2F;li&gt;
&lt;li&gt;发送bitswap请求&lt;&#x2F;li&gt;
&lt;li&gt;peers响应请求&lt;&#x2F;li&gt;
&lt;li&gt;IPLD内容组合&lt;&#x2F;li&gt;
&lt;li&gt;浏览器解析渲染页面&lt;&#x2F;li&gt;
&lt;li&gt;libp2p请求结束，断开连接&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;重点是内容寻址、内容路由、内容交换&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;寻址内容，内容间互转换寻址，通过IPLD。不依赖底层协议&lt;&#x2F;li&gt;
&lt;li&gt;链接内容，将内容之间的链接嵌入到该内容地址，通过Merkle DAG&lt;&#x2F;li&gt;
&lt;li&gt;发现内容：分布式哈希表,Bitswap&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;&lt;img src=&quot;..&#x2F;images&#x2F;ipfs&#x2F;layer.png&quot; alt=&quot;layer&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;h2 id=&quot;shu-ru-di-zhi-urlji-yu-wei-zhi-yu-cidji-yu-nei-rong&quot;&gt;输入地址 url基于位置与cid基于内容&lt;&#x2F;h2&gt;
&lt;pre style=&quot;background-color:#f9f9f9;color:#111111;&quot;&gt;&lt;code&gt;&lt;span&gt;http url: scheme:&#x2F;&#x2F;host.domain:port&#x2F;path&#x2F;filename&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;IPFS cidv1: &amp;lt;multibase-prefix&amp;gt;&amp;lt;multicodec-cidv1&amp;gt;&amp;lt;multicodec-content-type&amp;gt;&amp;lt;multihash-content-address&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;cid（ContentID）
&lt;img src=&quot;..&#x2F;images&#x2F;ipfs&#x2F;cid.png&quot; alt=&quot;cid&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rs&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-rs &quot;&gt;&lt;code class=&quot;language-rs&quot; data-lang=&quot;rs&quot;&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; create cid by codec, raw:0x55, dag_pb:0x70, sha2_256:0x12&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; cid &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;Cid::new_v1(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;0x55&lt;&#x2F;span&gt;&lt;span&gt;, Code::Sha2_256.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;digest&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;b&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;beep boop&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;));&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; data &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; cid.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;to_bytes&lt;&#x2F;span&gt;&lt;span&gt;();&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;assert_eq!(cid, Cid::try_from(data).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;unwrap&lt;&#x2F;span&gt;&lt;span&gt;());&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;assert_eq!(&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    cid.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;to_string&lt;&#x2F;span&gt;&lt;span&gt;(),&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;bafkreieq5jui4j25lacwomsqgjeswwl3y5zcdrresptwgmfylxo2depppq&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;);&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; create 2 multiaddr&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; addr1 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;&#x2F;ip4&#x2F;127.0.0.1&#x2F;tcp&#x2F;1234&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;.parse::&amp;lt;Multiaddr&amp;gt;().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;unwrap&lt;&#x2F;span&gt;&lt;span&gt;();&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; addr2 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;multiaddr!(Ip4([&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;127&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;]), Udp(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;10500&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;u16&lt;&#x2F;span&gt;&lt;span&gt;), Quic);&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;assert_eq!(addr1.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;to_string&lt;&#x2F;span&gt;&lt;span&gt;(), &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;&#x2F;ip4&#x2F;127.0.0.1&#x2F;tcp&#x2F;1234&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;);&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;assert_eq!(addr2.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;to_string&lt;&#x2F;span&gt;&lt;span&gt;(), &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;&#x2F;ip4&#x2F;127.0.0.1&#x2F;udp&#x2F;10500&#x2F;quic&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;);&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;还记得初学url定义时，对&amp;quot;:&#x2F;&#x2F; : ? =&amp;quot;符号的盲茫，比操作系统里的路径地址(c:\Windows\System32\Drivers\etc\hosts)多的这些有啥用，不都是要定位资源吗？有了分布式资源的描述和查询的经验后，现在都习以为常了。&lt;&#x2F;p&gt;
&lt;p&gt;这还不够，去中心化下要加入更多描述信息，有一种要把http协议head里的内容搬进来的感觉。还是因为没有了中心后，cid得独立描述自己了，回到哲学就是&amp;quot;自由的选择要承担什么样的责任?&amp;quot;
以前要与中心服务器协商的编码、通讯格式等信息，要CID独自承担了。&lt;&#x2F;p&gt;
&lt;p&gt;最后还要以对人类不友好，对机器友好的方式hash表现出来。&lt;&#x2F;p&gt;
&lt;p&gt;具体细节见 &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;multiformats&#x2F;cid&quot;&gt;cid&lt;&#x2F;a&gt;, &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;multiformats&#x2F;multiformats&quot;&gt;multiformats&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;h2 id=&quot;xun-zhi-lu-you-dnsji-yu-quan-wei-he-dhtji-yu-ge-ren&quot;&gt;寻址路由 DNS基于权威和DHT基于个人&lt;&#x2F;h2&gt;
&lt;p&gt;&lt;img src=&quot;..&#x2F;images&#x2F;ipfs&#x2F;dns-request.png&quot; alt=&quot;DNS&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;h3 id=&quot;dnsde-lu-you-bao-gua&quot;&gt;DNS的路由包括&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;找自己的缓存hosts&lt;&#x2F;li&gt;
&lt;li&gt;找DNS的缓存&lt;&#x2F;li&gt;
&lt;li&gt;找Root DNS&lt;&#x2F;li&gt;
&lt;li&gt;找Top layer DNS&lt;&#x2F;li&gt;
&lt;li&gt;找权威的DNS&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;同法院申诉流程(方便记忆)&lt;&#x2F;p&gt;
&lt;p&gt;具体细节参见&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;EmilHernvall&#x2F;dnsguide&#x2F;blob&#x2F;master&#x2F;chapter1.md&quot;&gt;自己实现一个DNS&lt;&#x2F;a&gt; rust版&lt;&#x2F;p&gt;
&lt;p&gt;DNS还有一种HttpDNS的实现，为了及时更新路由表&lt;&#x2F;p&gt;
&lt;p&gt;DNS中心化后就有了被污染、被钓鱼和缓存中毒的安全问题&lt;&#x2F;p&gt;
&lt;h3 id=&quot;dht-distributed-hash-table-de-lu-you&quot;&gt;DHT(Distributed Hash Table)的路由&lt;&#x2F;h3&gt;
&lt;p&gt;&lt;img src=&quot;..&#x2F;images&#x2F;ipfs&#x2F;dht.png&quot; alt=&quot;DNS&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;结构：DHT的路由表是前缀树组成，基于位置的分组&lt;&#x2F;li&gt;
&lt;li&gt;行为：4种消息来定位和加入网络，PING、STORE、FIND_NODE和FIND_VALUE&lt;&#x2F;li&gt;
&lt;li&gt;启动：本地DHT启动时会建立路由表&amp;lt;peerid,multiaddr&amp;gt;，按距离构造成树结构&lt;&#x2F;li&gt;
&lt;li&gt;更新：此后DHT会通过熟人peers找到更近的peeers更新路由，&lt;&#x2F;li&gt;
&lt;li&gt;提供发现：同时将自己也作为服务公开出去，方便别人能找到，使用MDNS实现&lt;&#x2F;li&gt;
&lt;li&gt;路由：并行从近到远找，基于树的路由,节点k个桶（带有该前缀的节点列表）&lt;&#x2F;li&gt;
&lt;li&gt;内容发现：联系与CID最近的对等点。如果有对象就发送回，如果没有就响应提供者记录。
&lt;ul&gt;
&lt;li&gt;对等点发现：对等点可能不知道提供者记录中对等点的多地址，因此它需要执行一个新的DHT查询来查找对等点的网络地址。&lt;&#x2F;li&gt;
&lt;li&gt;路由表每10分钟刷新一次。这通常决定了是否需要一次新的步行来获得对等人的联系信息。&lt;&#x2F;li&gt;
&lt;li&gt;对等点路由：使用提供者的多地址与它联系&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;参考&lt;a href=&quot;http:&#x2F;&#x2F;bittorrent.org&#x2F;beps&#x2F;bep_0005.html&quot;&gt;协议细节&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;DHT也有另一种实现，Gossip路由，基于热点聚合，路由更快但就不稳定。libp2p可以动态选择这些协议算法。&lt;&#x2F;p&gt;
&lt;p&gt;DHT也有DNS的安全问题，只是多个中心peers后，攻击的成本变大了。&lt;&#x2F;p&gt;
&lt;p&gt;与DNS相比，IPFS不只是找到IP&#x2F;peerID，还要增加找ContentID和同步Content，这些不属于DHT，后面会提到。&lt;&#x2F;p&gt;
&lt;h4 id=&quot;ipfsyu-web2-0jian-de-wang-guan&quot;&gt;IPFS与Web2.0间的网关&lt;&#x2F;h4&gt;
&lt;ul&gt;
&lt;li&gt;_dnslink用来在web2.0下访问web3.0&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;pre data-lang=&quot;sh&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-sh &quot;&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;❯&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; dig +noall +answer TXT &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;\_&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;dnslink.docs.ipfs.tech&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;_dnslink.docs.ipfs.tech.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; 0      IN      CNAME   _dnslink.ipfs-docs.on.fleek.co.&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;_dnslink.ipfs-docs.on.fleek.co.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; 0 IN    TXT     &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;dnslink=&#x2F;ipfs&#x2F;QmTcCaXT7drCnfJhQmt7HAvT9PwT1XMsXVcHL7nyRqgvbc&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ul&gt;
&lt;li&gt;IPNS subdomain&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;pre data-lang=&quot;sh&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-sh &quot;&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt; echo &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;Hello again IPFS&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; hello.txt&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt; ipfs &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;add&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; hello.txt&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt; added &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;QmaVfeg2GM17RLjBs9C4fhpku6uDgrEGUYCTC183VrZaVW&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; hello.txt&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;17 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;B&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; &#x2F; 17 B &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;=====================================================&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; 100.00%&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt; ipfs &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; publish QmaVfeg2GM17RLjBs9C4fhpku6uDgrEGUYCTC183VrZaVW&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt; Published &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;to&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; k51qzi5uqu5dkkciu33khkzbcmxtyhn376i1e83tya8kuy7z9euedzyr5nhoew: &#x2F;ipfs&#x2F;QmaVfeg2GM17RLjBs9C4fhpku6uDgrEGUYCTC183VrZaVW&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt; curl &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;https:&#x2F;&#x2F;gateway.ipfs.io&#x2F;ipns&#x2F;k51qzi5uqu5dkkciu33khkzbcmxtyhn376i1e83tya8kuy7z9euedzyr5nhoew&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt; Hello &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;again&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; IPFS&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;img src=&quot;..&#x2F;images&#x2F;ipfs&#x2F;ipns.png&quot; alt=&quot;ipns&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;h3 id=&quot;nei-rong-lu-you-liu-cheng&quot;&gt;内容路由流程&lt;&#x2F;h3&gt;
&lt;p&gt;IPFS特有的基于内容的路由&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;内容不会被复制到其他peer，这些内容保存在用户的设备上&lt;&#x2F;li&gt;
&lt;li&gt;保存方式：CID作为指针指向其他peer的内容&lt;&#x2F;li&gt;
&lt;li&gt;保存地点：这个指针添加到20个peer保存&lt;&#x2F;li&gt;
&lt;li&gt;保存时间：24小时后过期失效&lt;&#x2F;li&gt;
&lt;li&gt;保存延续：12小时后由提供者重新发布，确保近20个对等者接收到内容，成为临时提供者&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;基于IPLD原理&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;multihash：指向文件的Merkle-DAG&lt;&#x2F;li&gt;
&lt;li&gt;文件分块：文件被分割成块，每个Chunk可独立寻址独立hash。去重，也可减小体积，分段传输&lt;&#x2F;li&gt;
&lt;li&gt;文件连接：每个块都表示为一个节点连接到Merkle DAG，块的哈希是节点的地址，地址都嵌在父节点中，作为链接。merkle-link&lt;&#x2F;li&gt;
&lt;li&gt;文件结构生成：IPLD Graph基于Merkle-DAG构建结构的标准和格式，从根开始并拆分为目录和文件。&lt;&#x2F;li&gt;
&lt;li&gt;抗内容重复：文件被分割成块，每个Chunk可独立寻址独立hash。去重，也可减小体积，分段传输&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;jian-li-lian-jie-tcphe-p2p&quot;&gt;建立连接 TCP和p2p&lt;&#x2F;h2&gt;
&lt;p&gt;相同点：&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;通讯：基于应答确认方式&lt;&#x2F;li&gt;
&lt;li&gt;安全：基于附加加密通道，TLS等&lt;&#x2F;li&gt;
&lt;li&gt;复用：可以复用连接，用完后不关闭，其他CID会话继续使用&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;p2p不同点：&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;组合获取，同时从多个peers服务中获取不同的cid资源组合在一起&lt;&#x2F;li&gt;
&lt;li&gt;NAT穿越，多个内网设备独立与外网设备连接&lt;&#x2F;li&gt;
&lt;li&gt;Pubsub，peer间双工通信&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;libp2p作为独立成熟库，以及为多个应用服务了，功能繁多，有多种语言绑定，先不用细究&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Transport&lt;&#x2F;li&gt;
&lt;li&gt;NAT Traversal&lt;&#x2F;li&gt;
&lt;li&gt;Secure Communication&lt;&#x2F;li&gt;
&lt;li&gt;Circuit Relay&lt;&#x2F;li&gt;
&lt;li&gt;Protocols&lt;&#x2F;li&gt;
&lt;li&gt;Peer Identity&lt;&#x2F;li&gt;
&lt;li&gt;Content Routing&lt;&#x2F;li&gt;
&lt;li&gt;Peer Routing&lt;&#x2F;li&gt;
&lt;li&gt;Addressing&lt;&#x2F;li&gt;
&lt;li&gt;Security Considerations&lt;&#x2F;li&gt;
&lt;li&gt;Publish&#x2F;Subscribe&lt;&#x2F;li&gt;
&lt;li&gt;Stream Multiplexing&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;fa-song-bitswapqing-qiu&quot;&gt;发送bitswap请求&lt;&#x2F;h2&gt;
&lt;p&gt;&lt;img src=&quot;..&#x2F;images&#x2F;ipfs&#x2F;bitswap.png&quot; alt=&quot;bitswap&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;协议&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Requests: WANT-HAVE &#x2F; WANT-BLOCK &#x2F; CANCEL&lt;&#x2F;li&gt;
&lt;li&gt;Responses: HAVE &#x2F; BLOCK &#x2F; DONT_HAVE&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;基于内容的交换，是IPFS特有。
目的是在多个peer间同步内容资源，依赖的还是IPLD结构化&lt;&#x2F;p&gt;
&lt;p&gt;为了找到有文件的节点，运行 Bitswap 协议的节点首先向它连接的所有节点发送一个名为 want-have 的请求。这个需要的请求包含文件根块的 CID（根块位于组成文件的块的 DAG 的顶部）。具有根块的对等方发送有响应并被添加到会话中。没有阻止的对等方发送没有响应。 Bitswap 构建了一个DAG图，显示哪些节点拥有和不拥有每个区块。&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;..&#x2F;images&#x2F;ipfs&#x2F;ipfs-bitswap.png&quot; alt=&quot;ipfs-bitswap&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;基于内容的发现&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;bitswap问数据列表中的所有“邻居”：找积极响应者&lt;&#x2F;li&gt;
&lt;li&gt;迭代DHT找到更接近目标。提供者记录包括提供者的PeerID和MultiAddr&lt;&#x2F;li&gt;
&lt;li&gt;如果提供者记录指向其他提供者的多addrs，请启动一个位交换会话 &lt;&#x2F;li&gt;
&lt;li&gt;DHT再次映射：PeerID-&amp;gt;多Addr。重复：1&lt;&#x2F;li&gt;
&lt;li&gt;缓存内容，发布提供程序记录，在被要求时提供内容&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;graphsyncfang-shi-de-jiao-huan-dui-bi&quot;&gt;Graphsync方式的交换对比&lt;&#x2F;h3&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;功能&lt;&#x2F;th&gt;&lt;th&gt;Bitswap&lt;&#x2F;th&gt;&lt;th&gt;Graphsync&lt;&#x2F;th&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;thead&gt;&lt;tbody&gt;
&lt;tr&gt;&lt;td&gt;Protocol type&lt;&#x2F;td&gt;&lt;td&gt;Message-oriented&lt;&#x2F;td&gt;&lt;td&gt;Request-Response&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;Content exchange&lt;&#x2F;td&gt;&lt;td&gt;Block by block&lt;&#x2F;td&gt;&lt;td&gt;Stream&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;Request patterns&lt;&#x2F;td&gt;&lt;td&gt;CID Path&lt;&#x2F;td&gt;&lt;td&gt;IPLD Selector&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;Multi-path download&lt;&#x2F;td&gt;&lt;td&gt;Yes&lt;&#x2F;td&gt;&lt;td&gt;No, 1:1 exchange&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;Use cases&lt;&#x2F;td&gt;&lt;td&gt;Block exchange,Accelerate content routing&lt;&#x2F;td&gt;&lt;td&gt;Blockchain sync,Large dataset sync&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;
&lt;p&gt;扩展功能&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;压缩&lt;&#x2F;li&gt;
&lt;li&gt;WANT等消息检查&lt;&#x2F;li&gt;
&lt;li&gt;多跳内容发现&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;ipldnei-rong-zu-he&quot;&gt;IPLD内容组合&lt;&#x2F;h2&gt;
&lt;p&gt;&lt;img src=&quot;..&#x2F;images&#x2F;ipfs&#x2F;ipld.png&quot; alt=&quot;IPLD&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;原理借鉴git&lt;&#x2F;p&gt;
&lt;p&gt;动手实验下，一个文件的&lt;a href=&quot;https:&#x2F;&#x2F;dag.ipfs.io&#x2F;&quot;&gt;IPLD DAG化&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;h2 id=&quot;duan-dao-duan-chuan-tou-da-dong&quot;&gt;端到端穿透打洞&lt;&#x2F;h2&gt;
&lt;p&gt;两台不同网络下的电脑互通，可能中间隔了一个或多个NAT，我们常觉得有了对方的ip直接connect就可以了，tcp的syn发过去对方一定能回，结果等来的是超时，原因是电脑不知道对方看到自己的ip不是自己认为的ip，就是因为NAT转换的缘故，NAT可以基于port或ip将内部多个ip转到外部的一个ip。&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;..&#x2F;images&#x2F;ipfs&#x2F;NAT-Common.png&quot; alt=&quot;NAT&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;libp2p中实现端到端穿透NAT的实现在autonat.rs中，有3次不同的尝试&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;先直连检测能否成功&lt;&#x2F;li&gt;
&lt;li&gt;不行就广播外部的电脑朋友告诉自己的外部ip，然后两台电脑打洞，告诉NAT缓存自己和对方的信息，两台NAT之间互通后就能让两台电脑互通&lt;&#x2F;li&gt;
&lt;li&gt;最后一招，用两台电脑都认识的第3方电脑做中继&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;代码里流程&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rs&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-rs &quot;&gt;&lt;code class=&quot;language-rs&quot; data-lang=&quot;rs&quot;&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; client的swarm轮询每台电脑，根据反馈升级行为&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;loop &lt;&#x2F;span&gt;&lt;span&gt;{&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;match&lt;&#x2F;span&gt;&lt;span&gt; swarm.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;select_next_some&lt;&#x2F;span&gt;&lt;span&gt;().await {&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        SwarmEvent::NewListenAddr { address, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;.. &lt;&#x2F;span&gt;&lt;span&gt;} &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&amp;gt; ...&lt;&#x2F;span&gt;&lt;span&gt;,&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        SwarmEvent::Behaviour(event) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&amp;gt; ...&lt;&#x2F;span&gt;&lt;span&gt;,&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    }&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;}&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;Stream.poll_next&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;poll_next_event&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;match&lt;&#x2F;span&gt;&lt;span&gt; this.pool.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;poll&lt;&#x2F;span&gt;&lt;span&gt;(cx) &lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        Behaviour&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;          &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;handle_pool_event&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;              .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;inject_connection_established&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; NetworkBehaviourEventProcess.inject流入到 poll函数的最前面&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;#[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;derive&lt;&#x2F;span&gt;&lt;span&gt;(NetworkBehaviour)]&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;#[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;behaviour&lt;&#x2F;span&gt;&lt;span&gt;(event_process &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; true)]&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;struct &lt;&#x2F;span&gt;&lt;span&gt;MyBehaviour {&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;floodsub&lt;&#x2F;span&gt;&lt;span&gt;: Floodsub,&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;mdns&lt;&#x2F;span&gt;&lt;span&gt;: Mdns,&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;}&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;NetworkBehaviourAction.handle_behaviour_event&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;match &lt;&#x2F;span&gt;&lt;span&gt;{Dial,NotifyHandler,ReportObservedAddr,CloseConnectio}&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;还有一个开源的端到端加密通讯库可参考
&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;build-trust&#x2F;ockam&quot;&gt;ockam&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>CWPP中Audit的升级换代</title>
		<published>2022-05-09T00:00:00+00:00</published>
		<updated>2022-05-09T00:00:00+00:00</updated>
		<link href="https://jimluo.github.io/audit-upgrade/" type="text/html"/>
		<id>https://jimluo.github.io/audit-upgrade/</id>
		<content type="html">&lt;p&gt;技术背景是CWPP(Cloud Workload Protection Platforms)云工作负载保护平台，通常基于代理在计算机中永久运行，收集与安全相关的数据和事件，并将其发送到基于云服务分析后通知用户相应的潜在安全威胁。&lt;&#x2F;p&gt;
&lt;p&gt;其中的一个子系统audit，是一个用于收集记录系统、内核、用户进程发生的行为事件的被动防御的安全审计系统。该系统可以可靠地收集有关上任何与安全相关事件的信息，如记录文件访问、网络访问、用户指令、系统调用和系统安全事件。&lt;&#x2F;p&gt;
&lt;p&gt;随着时间的推移，内核的发展，其存在问题日显突出&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;性能开销大：开启服务的支付卡安全标准，系统吞吐率下降30%，系统调用开销下降50%，上下文切换下降10%，其他下降%2-10%左右&lt;&#x2F;li&gt;
&lt;li&gt;不能灵活调节性能：只是开启服务但不执行，系统吞吐率下降20%，系统调用开销下降35%，其他下降%2-10%左右&lt;&#x2F;li&gt;
&lt;li&gt;对docker容器支持不够，且对docker及其服务的监测达不到安全发现的效果&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;h3 id=&quot;auditxi-tong-zi-xi-tong&quot;&gt;audit系统子系统&lt;&#x2F;h3&gt;
&lt;p&gt;&lt;img src=&quot;..&#x2F;images&#x2F;audit.png&quot; alt=&quot;audit&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;auditd：审计守护程序负责将通过审计内核接口生成并由应用程序和系统活动触发的审计消息写入磁盘。&lt;&#x2F;li&gt;
&lt;li&gt;auditctl：控制审计接口的日志生成参数和内核设置，以及用于确定要跟踪哪些事件的规则集&lt;&#x2F;li&gt;
&lt;li&gt;aureport：创建自定义报告&lt;&#x2F;li&gt;
&lt;li&gt;ausearch：搜索审计日志中的特定的事件&lt;&#x2F;li&gt;
&lt;li&gt;audispd：通知其他应用程序，而不是将其写入磁盘上的审计日志中&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;ke-ti-dai-de-5chong-ji-zhu-bi-jiao&quot;&gt;可替代的5种技术比较&lt;&#x2F;h3&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;发布年份&lt;&#x2F;th&gt;&lt;th&gt;采集框架&lt;&#x2F;th&gt;&lt;th&gt;性能&lt;&#x2F;th&gt;&lt;th&gt;可编程控制&lt;&#x2F;th&gt;&lt;th&gt;稳定性&lt;&#x2F;th&gt;&lt;th&gt;内置于内核&lt;&#x2F;th&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;thead&gt;&lt;tbody&gt;
&lt;tr&gt;&lt;td&gt;2004&lt;&#x2F;td&gt;&lt;td&gt;Linux Audit&lt;&#x2F;td&gt;&lt;td&gt;差&lt;&#x2F;td&gt;&lt;td&gt;否&lt;&#x2F;td&gt;&lt;td&gt;高&lt;&#x2F;td&gt;&lt;td&gt;是&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;2009&lt;&#x2F;td&gt;&lt;td&gt;SystemTap&lt;&#x2F;td&gt;&lt;td&gt;良&lt;&#x2F;td&gt;&lt;td&gt;是&lt;&#x2F;td&gt;&lt;td&gt;低&lt;&#x2F;td&gt;&lt;td&gt;否&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;2006&lt;&#x2F;td&gt;&lt;td&gt;LTTng&lt;&#x2F;td&gt;&lt;td&gt;良&lt;&#x2F;td&gt;&lt;td&gt;否&lt;&#x2F;td&gt;&lt;td&gt;低&lt;&#x2F;td&gt;&lt;td&gt;否&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;2009&lt;&#x2F;td&gt;&lt;td&gt;Perf&#x2F;ftrace&lt;&#x2F;td&gt;&lt;td&gt;优&lt;&#x2F;td&gt;&lt;td&gt;否&lt;&#x2F;td&gt;&lt;td&gt;高&lt;&#x2F;td&gt;&lt;td&gt;是&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;2014&lt;&#x2F;td&gt;&lt;td&gt;BPF&lt;&#x2F;td&gt;&lt;td&gt;优&lt;&#x2F;td&gt;&lt;td&gt;是&lt;&#x2F;td&gt;&lt;td&gt;高&lt;&#x2F;td&gt;&lt;td&gt;是&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;
&lt;h3 id=&quot;xing-neng-di-de-yuan-yin&quot;&gt;性能低的原因&lt;&#x2F;h3&gt;
&lt;p&gt;Audit独立于kprobe、tracepoint之外的数据源，通过syscall和文件操作等内核源码上插入自定义的钩子函数实现监控，于2004年加入内核，相比于其他技术性能差&lt;&#x2F;p&gt;
&lt;h3 id=&quot;bpfji-zhu-de-you-shi&quot;&gt;BPF技术的优势&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;稳定：通过验证器，可防止错误引起的内核崩溃&lt;&#x2F;li&gt;
&lt;li&gt;免安装：无需安装，可动态加载和卸载&lt;&#x2F;li&gt;
&lt;li&gt;可编程控制：支持开发者插入自定义的代码逻辑&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;bpfde-lie-shi&quot;&gt;BPF的劣势&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;需要高版本的Linux内核，V3.x版本功能不全，V2.x无BPF支持。&lt;&#x2F;li&gt;
&lt;li&gt;低版本Linux使用原有audit或perf等实现&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;yong-bpfti-dai-auditde-fang-an&quot;&gt;用BPF替代Audit的方案&lt;&#x2F;h3&gt;
&lt;ol&gt;
&lt;li&gt;使用BPF实现已有linux audit子系统功能。实现细节见下一节&lt;&#x2F;li&gt;
&lt;li&gt;根据系统版本选择安装，老系统使用原有audit或perf，V4.x及以上系统使用BPF&lt;&#x2F;li&gt;
&lt;li&gt;提供自监测系统，监控和配置性能指标，超过指标后，执行对应缓解措施&lt;&#x2F;li&gt;
&lt;li&gt;提供实时通知机制，遇到配置项，通知其他接入系统协同完成对应缓解措施&lt;&#x2F;li&gt;
&lt;li&gt;提供docker内监测和多docker间聚合事件能力，尤其是cgroup和网络等事件，增强docker的审计功能&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;h3 id=&quot;bpfdui-linux-auditzi-xi-tong-shi-xian-xi-jie&quot;&gt;BPF对linux audit子系统实现细节&lt;&#x2F;h3&gt;
&lt;pre style=&quot;background-color:#f9f9f9;color:#111111;&quot;&gt;&lt;code&gt;&lt;span&gt;                   Agent        &lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;策略下发  |  事件聚合 |   通知协同  |  性能监测 &lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;                    BPF        &lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    Ring Buffer ↑    |     ↓ BPF Map    &lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;         System call | syscall 系统调用    挂载点&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;     VFS&#x2F;File system | 文件操作    挂载点&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;                  硬件驱动        &lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ol&gt;
&lt;li&gt;针对audit的监控syscall和文件操作，BPF也增加相同接入监控&lt;&#x2F;li&gt;
&lt;li&gt;Agent通过BPF map设置配置策略到BPF驱动，动态管控监控行为&lt;&#x2F;li&gt;
&lt;li&gt;通过RingBuffer将BPF驱动实时发送事件到监控应用agent&lt;&#x2F;li&gt;
&lt;li&gt;Agent分成4部分策略下发、事件聚合、通知协同、性能监测&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;h3 id=&quot;zhu-ji-shen-ji-xi-tong-liu-cheng&quot;&gt;主机审计系统流程&lt;&#x2F;h3&gt;
&lt;pre style=&quot;background-color:#f9f9f9;color:#111111;&quot;&gt;&lt;code&gt;&lt;span&gt;                  ↓&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;                策略下发&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;在后台服务中，管理员配置设计策略并下发&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;                  ↓&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    主机agent接收策略，写入BPF map&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;                  ↓&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        主机BPF驱动执行策略&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;                  ↓&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;BPF驱动收集系统调用syscal和文件系统操作事件&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;pre style=&quot;background-color:#f9f9f9;color:#111111;&quot;&gt;&lt;code&gt;&lt;span&gt;                事件聚合&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;在后台服务中，聚合分类这些事件&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;                  ↑&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;在后台服务中，收集多台主机上报的审计事件&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;                  ↑&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        由agent上报发送给后台服务&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;                  ↑&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;            事件内容写入Ring Buffer&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;                  ↑&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;由BPF驱动收集系统调用syscal和文件系统操作事件&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;                  ↑&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        主机agent根据下发策略要求&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;pre style=&quot;background-color:#f9f9f9;color:#111111;&quot;&gt;&lt;code&gt;&lt;span&gt;                通知协同&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;将聚合分类安全事件通知其他安全服务，如威胁狩猎分析&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;                  ↓&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        其他安全服务生成对应的安全策略&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;                  ↓&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        将安全策略通知系统审计服务&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;                  ↓&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    优化更新主机审计系统自身的安全策略&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;pre style=&quot;background-color:#f9f9f9;color:#111111;&quot;&gt;&lt;code&gt;&lt;span&gt;                性能监测&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    主机agent采集主机自身性能指标&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;                  ↓&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    根据下发策略扩大或减小监测挂载点&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;                  ↓&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    动态控制审计系统的对系统的负荷&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;sheng-ji-ti-huan-hou-de-you-yi-xiao-guo&quot;&gt;升级替换后的有益效果&lt;&#x2F;h3&gt;
&lt;ol&gt;
&lt;li&gt;高性能的收集安全信息&lt;&#x2F;li&gt;
&lt;li&gt;可动态加载的探针，动态分配系统开销&lt;&#x2F;li&gt;
&lt;li&gt;可兼容新旧系统的技术栈，适应老系统(老系统不支持新的技术)&lt;&#x2F;li&gt;
&lt;li&gt;可实时发现安全威胁，及时上报或紧急处理&lt;&#x2F;li&gt;
&lt;li&gt;可以与系统其他安全服务协同&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>终端资产的全面发现管理</title>
		<published>2022-04-13T00:00:00+00:00</published>
		<updated>2022-04-13T00:00:00+00:00</updated>
		<link href="https://jimluo.github.io/asset-discovery/" type="text/html"/>
		<id>https://jimluo.github.io/asset-discovery/</id>
		<content type="html">&lt;p&gt;终端资产的全面清理发现和管理是精细化管理也是安全办公生产的前提，&lt;&#x2F;p&gt;
&lt;p&gt;困难之处在于设备类型复杂(固定、移动、网络设备、摄像头、打印机等)，&lt;&#x2F;p&gt;
&lt;p&gt;人员角色多变赋予设备自身权限及可见度变化，&lt;&#x2F;p&gt;
&lt;p&gt;最后长时间使用，设备和人员的更替，再时间上追溯困难。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;wen-ti-zhong-dian-biao-xian-zai&quot;&gt;问题重点表现在&lt;&#x2F;h3&gt;
&lt;p&gt;主流资产发现及管理系统，使用的技术，主动扫描和被动流量发现各自都有缺陷&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;主动扫描发现不了未开机和休眠资产设备&lt;&#x2F;li&gt;
&lt;li&gt;被动流量分析发现不了数据未经过核心交换机的设备（因为被动流量分析的服务设备接在核心交换机上，见下图）&lt;&#x2F;li&gt;
&lt;li&gt;被动流量分析发现不了分析前接入的设备&lt;&#x2F;li&gt;
&lt;li&gt;设备资产间的在时间上的关系无法确定，也就不能评估出安全风险&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;常用技术名词概念&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;终端资产：用户单位的电脑。在安全业务上，用于对安全问题的物理定位，及时找到机器和操作人员&lt;&#x2F;li&gt;
&lt;li&gt;ARP地址解析协议：根据IP地址获取物理mac地址的协议&lt;&#x2F;li&gt;
&lt;li&gt;ARP表：交换机中IP与MAC地址对应关系缓存表&lt;&#x2F;li&gt;
&lt;li&gt;SNMP OIDS：交换机和路由器中缓存的设备信息表&lt;&#x2F;li&gt;
&lt;li&gt;NetFlow表：交换机和路由器中缓存的设备外联流量信息&lt;&#x2F;li&gt;
&lt;li&gt;DHCP服务：动态分配IP地址给刚入网的设备，保留了所有入网设备的信息。每台设备使用的IP过期后，再定期续租申请。&lt;&#x2F;li&gt;
&lt;li&gt;DNS服务：将域名解析为可以访问的IP，保留了终端设备的请求网络信息&lt;&#x2F;li&gt;
&lt;li&gt;网络设备：交换机和路由器。其存有ARP表、路由表、SNMP OIDS信息，NetFlow表&lt;&#x2F;li&gt;
&lt;li&gt;服务设备：DHCP服务和DNS服务等，其存有设备的网络和机器信息&lt;&#x2F;li&gt;
&lt;li&gt;终端设备：电脑的设备制造商、操作系厂商、常用软件和使用时间上的规律&lt;&#x2F;li&gt;
&lt;li&gt;主动扫描：轮询全网每一台终端，发起预制的网络请求，根据收到的响应判断终端的设备信息&lt;&#x2F;li&gt;
&lt;li&gt;被动流量分析：镜像连接在核心交换机上，根据网络所有设备的流量信息，分析访问关系和部分设备信息&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;h3 id=&quot;quan-mian-fa-xian-guan-li-de-gong-zuo-liu-cheng&quot;&gt;全面发现管理的工作流程&lt;&#x2F;h3&gt;
&lt;h4 id=&quot;fa-xian&quot;&gt;发现&lt;&#x2F;h4&gt;
&lt;p&gt;基于3种设备(网络设备、服务设备、终端设备)和2种行为(主动、被动)获取设备机器信息和网络连通信息。
尤其是发生的时间和外联关系。持续监控设备的连接断开，获取实时信息而不中断业务。&lt;&#x2F;p&gt;
&lt;p&gt;通过网络设备信息，整合主动与被动发现信息&lt;&#x2F;p&gt;
&lt;p&gt;通过服务信息，整合流量与设备信息&lt;&#x2F;p&gt;
&lt;p&gt;其特点是&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;发现未开机和休眠资产设备&lt;&#x2F;li&gt;
&lt;li&gt;发现网络流量未经过核心交换机的设备&lt;&#x2F;li&gt;
&lt;li&gt;发现分析前接入的设备&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;2种行为\3种设备&lt;&#x2F;th&gt;&lt;th&gt;网络设备&lt;&#x2F;th&gt;&lt;th&gt;服务设备&lt;&#x2F;th&gt;&lt;th&gt;终端设备&lt;&#x2F;th&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;thead&gt;&lt;tbody&gt;
&lt;tr&gt;&lt;td&gt;主动扫描和获取(范围大，信息多)&lt;&#x2F;td&gt;&lt;td&gt;设备外联时间和位置&lt;&#x2F;td&gt;&lt;td&gt;设备的网络和机器信息&lt;&#x2F;td&gt;&lt;td&gt;运行在设备的代理(如杀毒软件）&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;获取全面的机器信息，可选择不使用，不影响用户业务&lt;&#x2F;td&gt;&lt;td&gt;被动监控(实时性高)&lt;&#x2F;td&gt;&lt;td&gt;全网流量信息&lt;&#x2F;td&gt;&lt;td&gt;设备的连接和断开&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;
&lt;h4 id=&quot;fa-xian-yuan-li&quot;&gt;发现原理：&lt;&#x2F;h4&gt;
&lt;ol&gt;
&lt;li&gt;主动获取网络设备和服务设备中存在的IP设备及流量信息，并整合两者信息，全时间段的信息&lt;&#x2F;li&gt;
&lt;li&gt;被动获取全网流量信息，当前时间段的信息&lt;&#x2F;li&gt;
&lt;li&gt;比较找出存在于主动信息#1中而不存在于被动信息#2中的设备&lt;&#x2F;li&gt;
&lt;li&gt;分析这些设备流量的发生时间&lt;&#x2F;li&gt;
&lt;li&gt;判断发生时间暂时的，只是最近没有出现，是未开机和休眠&lt;&#x2F;li&gt;
&lt;li&gt;判断发生时间是曾经有过，现在一直没有出现，是以前接入，现在可能已不存在&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;h4 id=&quot;fen-lei&quot;&gt;分类&lt;&#x2F;h4&gt;
&lt;p&gt;按照设备类型、操作系统、时间分类，并在时间上聚合不同设备间的网络访问关系，丰富上下文&lt;&#x2F;p&gt;
&lt;h4 id=&quot;ping-gu&quot;&gt;评估&lt;&#x2F;h4&gt;
&lt;ul&gt;
&lt;li&gt;识别安全风险，评估合规达标程度&lt;&#x2F;li&gt;
&lt;li&gt;最终获得对网络操作风险的态势感知，使用全面的上下文评估策略遵从性和设备安全姿态&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;zong-jie-qi-te-dian&quot;&gt;总结其特点&lt;&#x2F;h3&gt;
&lt;ol&gt;
&lt;li&gt;更全面地发现资产
&lt;ul&gt;
&lt;li&gt;发现未开机和休眠资产设备&lt;&#x2F;li&gt;
&lt;li&gt;网络流量未经过核心交换机的设备&lt;&#x2F;li&gt;
&lt;li&gt;发现分析前接入的设备&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;更易于分类，基于空间和时间的上下文&lt;&#x2F;li&gt;
&lt;li&gt;更准确地评估合规的达标度，识别安全风险&lt;&#x2F;li&gt;
&lt;li&gt;不中断不影响用户业务&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>基于Rust和BPF技术的网络TCP水印</title>
		<published>2022-03-23T00:00:00+00:00</published>
		<updated>2022-03-23T00:00:00+00:00</updated>
		<link href="https://jimluo.github.io/net-token/" type="text/html"/>
		<id>https://jimluo.github.io/net-token/</id>
		<content type="html">&lt;p&gt;网络水印用于防DDoS攻击和网络流量等安全领域，原理是给报文增加特征信息，基于TCP options的增加字段不会被防火墙等修改去除，本文正是使用BPF和Rust来达到高效的实现的具体描述。&lt;sup class=&quot;footnote-reference&quot;&gt;&lt;a href=&quot;#1&quot;&gt;1&lt;&#x2F;a&gt;&lt;&#x2F;sup&gt; 源码参见[]
&lt;strong&gt;保护知识产权的图片水印不在此列&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;BPF驱动使用c开发&lt;&#x2F;li&gt;
&lt;li&gt;用户态的配置和加载器使用rust和libbpf-rs加速开发&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;yi-lai-feng-zhuang-guan-xi&quot;&gt;依赖封装关系&lt;&#x2F;h2&gt;
&lt;p&gt;&lt;img src=&quot;..&#x2F;images&#x2F;net-token&#x2F;libbpf-rs-dependency.png&quot; alt=&quot;用户态关系图&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;基于libbpf-rs开发, libbpf-rs提供用于开发的API抽象，包括驱动object和其静态程序、通讯、挂载上程序的资源抽象&lt;&#x2F;p&gt;
&lt;p&gt;同时libbpf-sys封装了unsafe的libbpf和libelf、zlib，其中核心是基于内核的一部分libbpf，c开发的静态链接库。细节稠密的api，也加载并解析驱动elf文件使用的动态链接的libelf和zlib&lt;&#x2F;p&gt;
&lt;p&gt;基于libbpf-cargo脚手架生成工程目录，build命令调用gen和make完成&lt;&#x2F;p&gt;
&lt;h2 id=&quot;gong-cheng-mu-lu-jie-gou&quot;&gt;工程目录结构&lt;&#x2F;h2&gt;
&lt;p&gt;由libbpf-cargo自动生成的骨架目录的代码&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;sh&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-sh &quot;&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;netoken\&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;src\&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;bpf&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;\ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;                 &#x2F;&#x2F;驱动&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;.output&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;\ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;           &#x2F;&#x2F;脚手架自动生成&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;netoken.skel.rs&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;  &#x2F;&#x2F;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;libbpf_rs&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;netoken.c&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;              ^&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;vmlinux.h               &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;|&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;main.rs&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;  &#x2F;&#x2F;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;libbpf_rs    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;|&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;build.rs&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;     &#x2F;&#x2F;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;libbpf_cargo-+&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;Cargo.toml&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;libbpf-rs\&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;.git&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;libbpf-rs\&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;libbpf-cargo\&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Cargo.toml中可配置依赖libbpf-xxx的具体位置&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;toml&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-toml &quot;&gt;&lt;code class=&quot;language-toml&quot; data-lang=&quot;toml&quot;&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;dependencies&lt;&#x2F;span&gt;&lt;span&gt;]&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;libbpf-rs &lt;&#x2F;span&gt;&lt;span&gt;= { &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;path &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;..&#x2F;libbpf-rs&#x2F;libbpf-rs&amp;quot; &lt;&#x2F;span&gt;&lt;span&gt;}&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;build-dependencies&lt;&#x2F;span&gt;&lt;span&gt;]&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;libbpf-cargo &lt;&#x2F;span&gt;&lt;span&gt;= { &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;path &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;..&#x2F;libbpf-rs&#x2F;libbpf-cargo&amp;quot; &lt;&#x2F;span&gt;&lt;span&gt;}&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;gu-jia-dai-ma-sheng-cheng-liu-cheng&quot;&gt;骨架代码生成流程&lt;&#x2F;h2&gt;
&lt;ol&gt;
&lt;li&gt;用户工程 build.rs-&amp;gt;libbpf-cargo.rs SkeletonBuilder() &lt;em&gt;.bpf.c =&amp;gt; .output&#x2F;&lt;&#x2F;em&gt;.skel.rs&lt;&#x2F;li&gt;
&lt;li&gt;用户工程生成的*.skel.rs流程: 
&lt;ol&gt;
&lt;li&gt;obj: DATA [u8]&lt;&#x2F;li&gt;
&lt;li&gt;&lt;em&gt;SkelBuilder()-&amp;gt;Open&lt;&#x2F;em&gt;Skel()-&amp;gt;*Skel(), progs&#x2F;maps&#x2F;links&lt;&#x2F;li&gt;
&lt;li&gt;build_skel_config()-&amp;gt;ObjectSkeletonConfigBuilder::new(DATA)&lt;&#x2F;li&gt;
&lt;li&gt;builder.name(&lt;em&gt;&lt;strong&gt;).map(&amp;quot;&amp;quot;).prog(&amp;quot;handle_&lt;&#x2F;strong&gt;&lt;&#x2F;em&gt;&amp;quot;).build()&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;libbpf-rs 提供用户常用工具
&lt;ol&gt;
&lt;li&gt;object&#x2F;skelton&lt;&#x2F;li&gt;
&lt;li&gt;prog&#x2F;map&#x2F;link&lt;&#x2F;li&gt;
&lt;li&gt;iter&#x2F;print&#x2F;query&#x2F;util&lt;&#x2F;li&gt;
&lt;li&gt;perf&#x2F;ringbuf&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;libbpf-cargo 提供cargo build时自动生成skel，gen&#x2F;make&lt;&#x2F;li&gt;
&lt;li&gt;执行*.skel.rs流程
&lt;ol&gt;
&lt;li&gt;TcSkelBuilder.open()-&amp;gt;OpenTcSkel(obj, config)&lt;&#x2F;li&gt;
&lt;li&gt;OpenTcSkel.load() &amp;gt;&amp;gt; bpf_object__load_skeleton(config)&lt;&#x2F;li&gt;
&lt;li&gt;OpenTcSkel.load()-&amp;gt;TcSkel(obj,config, Tclinks())&lt;&#x2F;li&gt;
&lt;li&gt;OpenTcSkel.progs()-&amp;gt;OpenTcProgs(obj)&lt;&#x2F;li&gt;
&lt;li&gt;OpenTcSkel.maps()-&amp;gt;OpenTcMaps()&lt;&#x2F;li&gt;
&lt;li&gt;OpenTcSkel.data()-&amp;gt;ffi::c_void()&lt;&#x2F;li&gt;
&lt;li&gt;TcSkel.attach() &amp;gt;&amp;gt; bpf_object__attach_skeleton(config)&lt;&#x2F;li&gt;
&lt;li&gt;TcSkel.links = TcLinks(handle_tc)&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;libbpf.h typedef struct bpf_object_skeleton bos
&lt;ul&gt;
&lt;li&gt;libbpf将内核bpf_xxx封装到3个struct和4个阶段phase的api，隐藏内核极多的细节&lt;&#x2F;li&gt;
&lt;li&gt;error&#x2F;print&#x2F;open_opts&#x2F;&lt;&#x2F;li&gt;
&lt;li&gt;bpf_object_open_[buffer&#x2F;mem&#x2F;xattr]xxx&lt;&#x2F;li&gt;
&lt;li&gt;bpf_object__load&#x2F;__next&#x2F;__set&#x2F;pin&#x2F;unpin&lt;&#x2F;li&gt;
&lt;li&gt;bpf_[program&#x2F;map&#x2F;link]__set&#x2F;load&#x2F;fd&#x2F;xxx;__attach_xxx&lt;&#x2F;li&gt;
&lt;li&gt;bpf_map__[set&#x2F;get&#x2F;find_map]&lt;&#x2F;li&gt;
&lt;li&gt;bpf_perf&#x2F;kprob&#x2F;uprobe&#x2F;tracepoint&#x2F;link_xdp&#x2F;tc_hook&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;h2 id=&quot;yong-hu-tai-jia-zai-liu-cheng&quot;&gt;用户态加载流程&lt;&#x2F;h2&gt;
&lt;p&gt;&lt;img src=&quot;..&#x2F;images&#x2F;net-token&#x2F;libbpf-rs-usermode.png&quot; alt=&quot;用户态关系图&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;解析命令行参数中的网卡名，并获取其系统中的网卡号&lt;&#x2F;li&gt;
&lt;li&gt;使用生成的skelBuilder逐步获取驱动object的内存文件描述符fd&lt;&#x2F;li&gt;
&lt;li&gt;使用生成的hookBuilder创建并将自己hook在网络出入口egress&#x2F;ingress。本程序只使用了egress&lt;&#x2F;li&gt;
&lt;li&gt;egress加载到内核，开始执行&lt;&#x2F;li&gt;
&lt;li&gt;查询tc的egress上的信息&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span&gt;() -&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;Result&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;()&amp;gt; {&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; 命令行参数解析&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; opts &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;Command::parse();&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; 去掉系统的内存限制&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;bump_memlock_rlimit&lt;&#x2F;span&gt;&lt;span&gt;()&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;?&lt;&#x2F;span&gt;&lt;span&gt;;&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; 从Skel里获取信息，从opts里获取ifindex&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; builder &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;netokenSkelBuilder::default();&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; open &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; builder.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;open&lt;&#x2F;span&gt;&lt;span&gt;()&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;?&lt;&#x2F;span&gt;&lt;span&gt;;&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; skel &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; open.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;load&lt;&#x2F;span&gt;&lt;span&gt;()&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;?&lt;&#x2F;span&gt;&lt;span&gt;;&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; fd &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; skel.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;progs&lt;&#x2F;span&gt;&lt;span&gt;().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;handle_tc&lt;&#x2F;span&gt;&lt;span&gt;().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;fd&lt;&#x2F;span&gt;&lt;span&gt;();&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; ifidx &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;nix::net::if_::if_nametoindex(opts.iface.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;as_str&lt;&#x2F;span&gt;&lt;span&gt;())&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;? as &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;i32&lt;&#x2F;span&gt;&lt;span&gt;;&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;let mut&lt;&#x2F;span&gt;&lt;span&gt; tc_builder &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;TcHookBuilder::new();&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    tc_builder&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;fd&lt;&#x2F;span&gt;&lt;span&gt;(fd)&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;ifindex&lt;&#x2F;span&gt;&lt;span&gt;(ifidx)&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;replace&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;true&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;handle&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;priority&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;);&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; 挂载驱动到TC的egress接口上&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;let mut&lt;&#x2F;span&gt;&lt;span&gt; egress &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; tc_builder.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;hook&lt;&#x2F;span&gt;&lt;span&gt;(TC_EGRESS);&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; 执行attach，驱动开始工作&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span&gt; opts.attach {&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;if let &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;Err&lt;&#x2F;span&gt;&lt;span&gt;(e) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; egress.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;attach&lt;&#x2F;span&gt;&lt;span&gt;() {&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;            bail!(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;failed to attach egress hook {}&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, e);&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        }&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    }&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; 执行destory，销毁驱动&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span&gt; opts.destroy {&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;if let &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;Err&lt;&#x2F;span&gt;&lt;span&gt;(e) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; egress.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;detach&lt;&#x2F;span&gt;&lt;span&gt;() {&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;            println!(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;failed to detach egress hook &lt;&#x2F;span&gt;&lt;span&gt;{}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, e);&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        }&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;if let &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;Err&lt;&#x2F;span&gt;&lt;span&gt;(e) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; egress.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;destroy&lt;&#x2F;span&gt;&lt;span&gt;() {&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;            println!(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;failed to destroy &lt;&#x2F;span&gt;&lt;span&gt;{}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, e);&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        }&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    }&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; 执行query，查询执行驱动的id&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;match&lt;&#x2F;span&gt;&lt;span&gt; egress.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;query&lt;&#x2F;span&gt;&lt;span&gt;() {&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;Err&lt;&#x2F;span&gt;&lt;span&gt;(e) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;println!(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;failed to find egress hook: &lt;&#x2F;span&gt;&lt;span&gt;{}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, e),&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;Ok&lt;&#x2F;span&gt;&lt;span&gt;(prog_id) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;println!(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;found egress hook prog_id: &lt;&#x2F;span&gt;&lt;span&gt;{}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, prog_id),&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    }&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; 执行监听perf，收到数据后进入handle_event，收到错误丢包进入handle_lost_events&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; perf &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;PerfBufferBuilder::new(skel.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;maps_mut&lt;&#x2F;span&gt;&lt;span&gt;().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;events&lt;&#x2F;span&gt;&lt;span&gt;())&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;sample_cb&lt;&#x2F;span&gt;&lt;span&gt;(handle_event)&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;lost_cb&lt;&#x2F;span&gt;&lt;span&gt;(handle_lost_events)&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;build&lt;&#x2F;span&gt;&lt;span&gt;()&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;?&lt;&#x2F;span&gt;&lt;span&gt;;&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; 100ms一次的轮询驱动，有事件后进入上面的event&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;loop &lt;&#x2F;span&gt;&lt;span&gt;{&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        perf.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;poll&lt;&#x2F;span&gt;&lt;span&gt;(Duration::from_millis(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;100&lt;&#x2F;span&gt;&lt;span&gt;))&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;?&lt;&#x2F;span&gt;&lt;span&gt;;&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    }&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;Ok&lt;&#x2F;span&gt;&lt;span&gt;(())&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;}&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;lei-si-yu-ji-yu-tcgong-ju-shi-xian&quot;&gt;类似于基于tc工具实现&lt;&#x2F;h3&gt;
&lt;pre data-lang=&quot;sh&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-sh &quot;&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; tc qdisc add dev xxx &lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; tc filter &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;add|change|replace&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; dev xxx &lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; tc qdisc show dev xxx&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;qu-dong-liu-cheng&quot;&gt;驱动流程&lt;&#x2F;h2&gt;
&lt;p&gt;&lt;img src=&quot;..&#x2F;images&#x2F;net-token&#x2F;libbpf-rs-kernelmode.png&quot; alt=&quot;用户态关系图&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;检查入参struct __sk_buff是否是tcp报文，依次从2层解析判断到4层&lt;&#x2F;li&gt;
&lt;li&gt;检查tcp报文是否是握手syn包。syn包携带options用于连接双方协商功能&lt;&#x2F;li&gt;
&lt;li&gt;读取policy map，获得不同策略下的token&lt;&#x2F;li&gt;
&lt;li&gt;加入token这个option到syn包中&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; 驱动入口，数据已由内核组装为__sk_buff&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;SEC(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;tc&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;handle_tc&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;struct &lt;&#x2F;span&gt;&lt;span&gt;__sk_buff* ctx) {&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    struct pkthdr pkt;&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    RET_IF(pkt_check(ctx, &amp;amp;pkt) != RET_OK);&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    RET_IF(pkt.tcp-&amp;gt;syn != 1 || pkt.tcp-&amp;gt;ack != 0);&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    update_token_by_policy();&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    RET_IF(extend_options_token(ctx, &amp;amp;pkt, epp_token) != RET_OK);&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    return TC_ACT_OK;&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;}&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; 检查是否tcp包&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;BPF_INLNE int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;pkt_check&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;struct &lt;&#x2F;span&gt;&lt;span&gt;__sk_buff* ctx, struct pkthdr* pkt) {&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    pkt-&amp;gt;data = (void*)(long)ctx-&amp;gt;data;&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    pkt-&amp;gt;data_end = (void*)(long)ctx-&amp;gt;data_end;&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    pkt-&amp;gt;eth = pkt-&amp;gt;data;&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    pkt-&amp;gt;ipv4 = pkt-&amp;gt;data + sizeof(struct ethhdr);&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    RET_ERR_IF(pkt-&amp;gt;eth + 1 &amp;gt; (struct ethhdr*)(pkt-&amp;gt;data_end));&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    RET_ERR_IF(pkt-&amp;gt;eth-&amp;gt;h_proto != bpf_constant_htons(ETH_P_IP));&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    RET_ERR_IF(pkt-&amp;gt;ipv4 + 1 &amp;gt; (struct iphdr*)(pkt-&amp;gt;data_end));&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    RET_ERR_IF(pkt-&amp;gt;ipv4-&amp;gt;protocol != IPPROTO_TCP);&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    pkt-&amp;gt;tcp = pkt-&amp;gt;data + sizeof(struct ethhdr) + (pkt-&amp;gt;ipv4-&amp;gt;ihl * 4);&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    RET_ERR_IF(pkt-&amp;gt;tcp + 1 &amp;gt; (struct tcphdr*)(pkt-&amp;gt;data_end));&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    return RET_OK;&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;}&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; 增加tcp的options的token option，对网卡以支持的offload计算checksum的，注释掉加快执行&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;BPF_INLNE int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;extend_options_token&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;struct &lt;&#x2F;span&gt;&lt;span&gt;__sk_buff* ctx, struct pkthdr* pkt, u64 token) {&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    u32 data_end = ctx-&amp;gt;len; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; 非线性包总长&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    u16 sz = sizeof(token);&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    pkt-&amp;gt;ipv4-&amp;gt;tot_len = bpf_htons(pkt-&amp;gt;ipv4-&amp;gt;ihl * 4 + pkt-&amp;gt;tcp-&amp;gt;doff * 4 + sz);&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    pkt-&amp;gt;tcp-&amp;gt;doff = pkt-&amp;gt;tcp-&amp;gt;doff + sz &#x2F; 4;&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    RET_IF(bpf_skb_change_tail(ctx, ctx-&amp;gt;len + sz, 0));&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    RET_IF(bpf_skb_store_bytes(ctx, data_end, &amp;amp;token, sizeof(token), 0));&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    RET_IF(bpf_l3_csum_replace(ctx, IP_CSUM_OFFSET, 0, bpf_constant_htons(sz), 0));&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; RET_IF(bpf_l4_csum_replace(ctx, TCP_CSUM_OFFSET, 0, sz &#x2F; 4, BPF_F_PSEUDO_HDR | sizeof(u8)))&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    u16 csum = bpf_csum_diff(0, 0, (u32*)&amp;amp;token, sizeof(token), 0); &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; 2 tcp pseudo&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; RET_IF(bpf_l4_csum_replace(ctx, TCP_CSUM_OFFSET, 0, csum, 0));&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    update_metrics();&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    return RET_OK;&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;}&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;kuo-zhan-xdp&quot;&gt;扩展xdp&lt;&#x2F;h2&gt;
&lt;p&gt;libbpf-rs只提供了一个attach_xdp接口，其他xdp独立在libbpf项目中实现&lt;&#x2F;p&gt;
&lt;p&gt;需要af_xdp高级功能的可以试试
&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;chenhengqi&#x2F;libxdp-rs&quot;&gt;libxdp-rs&lt;&#x2F;a&gt;
由腾讯员工开发，主要用rust binding的&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;xdp-project&#x2F;xdp-tools&quot;&gt;xdp-tools&lt;&#x2F;a&gt;的功能，其中就有独立开发的libxdp&lt;&#x2F;p&gt;
&lt;h2 id=&quot;ayadeng-qi-ta-rustde-bpfxiang-mu-jian-shu&quot;&gt;aya等其他rust的bpf项目简述&lt;&#x2F;h2&gt;
&lt;p&gt;libpf-rs的复杂度低，开发起点也低，代码中unsafe很少。aya和redbpf就更高维了，能力和野心都很大，难度自然也就大了&lt;&#x2F;p&gt;
&lt;p&gt;首先用rust写驱动，没有std，更多的是unsafe和MaybeUninit，心里上畏惧。&lt;&#x2F;p&gt;
&lt;p&gt;再者成功的开发案例也不多，如果业务复杂度很高，倒是可以考虑。但也别担心，内核5.20加入rust后，可以开始了。&lt;&#x2F;p&gt;
&lt;p&gt;驱动很能体现rust的表现力&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span&gt;#![&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;no_std&lt;&#x2F;span&gt;&lt;span&gt;] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; &lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;#![&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;no_main&lt;&#x2F;span&gt;&lt;span&gt;] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; &lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;use &lt;&#x2F;span&gt;&lt;span&gt;aya_bpf::{ macros::xdp, bindings::xdp_action, programs::XdpContext,&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    maps::{HashMap, PerfEventArray}, };&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;use &lt;&#x2F;span&gt;&lt;span&gt;aya_log_ebpf::info;&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;use &lt;&#x2F;span&gt;&lt;span&gt;myapp_common::PacketLog;&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;#[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;map&lt;&#x2F;span&gt;&lt;span&gt;(name &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;EVENTS&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;)]  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; map macro&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;static mut &lt;&#x2F;span&gt;&lt;span&gt;EVENTS: PerfEventArray&amp;lt;ip_src&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    PerfEventArray::&amp;lt;ip_src&amp;gt;::with_max_entries(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;1024&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;);&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;#[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;xdp&lt;&#x2F;span&gt;&lt;span&gt;(name&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;myapp&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;)] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; hook点用macro实现，很rust&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;pub fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;myapp&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;ctx&lt;&#x2F;span&gt;&lt;span&gt;: XdpContext) -&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;u32 &lt;&#x2F;span&gt;&lt;span&gt;{&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; match匹配xdp_ctx也很直观&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;match unsafe &lt;&#x2F;span&gt;&lt;span&gt;{ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;try_myapp&lt;&#x2F;span&gt;&lt;span&gt;(ctx) } {&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;Ok&lt;&#x2F;span&gt;&lt;span&gt;(ret) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt; ret,&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;Err&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;_&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;xdp_action::XDP_ABORTED,&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    }&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;}&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;unsafe fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;try_myapp&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;ctx&lt;&#x2F;span&gt;&lt;span&gt;: XdpContext) -&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;Result&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;u32&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;u32&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; {&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; 方便的printk宏&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    info!(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span&gt;ctx, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;received a packet&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;);&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;unsafe &lt;&#x2F;span&gt;&lt;span&gt;{&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        EVENTS.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;output&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span&gt;ctx, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span&gt;ip_src, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;); &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; 隐去ip_src的解析过程...&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    }&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;Ok&lt;&#x2F;span&gt;&lt;span&gt;(xdp_action::XDP_PASS)&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;}&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;#[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;panic_handler&lt;&#x2F;span&gt;&lt;span&gt;] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; hook在异常上&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;panic&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;_info&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span&gt;core::panic::PanicInfo) -&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;! &lt;&#x2F;span&gt;&lt;span&gt;{&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;unsafe &lt;&#x2F;span&gt;&lt;span&gt;{ core::hint::unreachable_unchecked() }&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;}&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;yong-hu-tai&quot;&gt;用户态&lt;&#x2F;h3&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span&gt;#[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;tokio&lt;&#x2F;span&gt;&lt;span&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span&gt;]&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;async &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span&gt;() -&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;Result&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;(), anyhow::Error&amp;gt; {&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;let mut&lt;&#x2F;span&gt;&lt;span&gt; bpf &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;Bpf::load(include_bytes_aligned!(&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;..&#x2F;..&#x2F;target&#x2F;bpfel-unknown-none&#x2F;release&#x2F;myapp&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    ))&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;?&lt;&#x2F;span&gt;&lt;span&gt;;&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; program: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;mut&lt;&#x2F;span&gt;&lt;span&gt; Xdp &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; bpf.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;program_mut&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;xdp&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;unwrap&lt;&#x2F;span&gt;&lt;span&gt;().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;try_into&lt;&#x2F;span&gt;&lt;span&gt;()&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;?&lt;&#x2F;span&gt;&lt;span&gt;;&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    program.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;load&lt;&#x2F;span&gt;&lt;span&gt;()&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;?&lt;&#x2F;span&gt;&lt;span&gt;;&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    program.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;attach&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span&gt;opt.iface, XdpFlags::default())&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;context&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;failed to attach the XDP program with default flags&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;?&lt;&#x2F;span&gt;&lt;span&gt;;&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;...&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;let mut&lt;&#x2F;span&gt;&lt;span&gt; perf_array &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;AsyncPerfEventArray::try_from(bpf.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;map_mut&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;EVENTS&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;?&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;?&lt;&#x2F;span&gt;&lt;span&gt;;&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; 下面还可以封装简化下&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;for&lt;&#x2F;span&gt;&lt;span&gt; cpu_id &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;in &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;online_cpus&lt;&#x2F;span&gt;&lt;span&gt;()&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;? &lt;&#x2F;span&gt;&lt;span&gt;{ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; iter vec&amp;lt;u32&amp;gt; cpus&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;let mut&lt;&#x2F;span&gt;&lt;span&gt; buf &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; perf_array.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;open&lt;&#x2F;span&gt;&lt;span&gt;(cpu_id, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;None&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;?&lt;&#x2F;span&gt;&lt;span&gt;;&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        task::spawn(async &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;move &lt;&#x2F;span&gt;&lt;span&gt;{&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;let mut&lt;&#x2F;span&gt;&lt;span&gt; buffers &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;..&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;10&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;                .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;map&lt;&#x2F;span&gt;&lt;span&gt;(|_| BytesMut::with_capacity(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;1024&lt;&#x2F;span&gt;&lt;span&gt;))&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;                .collect::&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;Vec&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;_&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;&amp;gt;();&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;loop &lt;&#x2F;span&gt;&lt;span&gt;{&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; events &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; buf.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;read_events&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;mut&lt;&#x2F;span&gt;&lt;span&gt; buffers).await.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;unwrap&lt;&#x2F;span&gt;&lt;span&gt;();&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;for&lt;&#x2F;span&gt;&lt;span&gt; i &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;in &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;..&lt;&#x2F;span&gt;&lt;span&gt;events.read {&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;                    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; buf &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;mut&lt;&#x2F;span&gt;&lt;span&gt; buffers[i];&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;                    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; ptr &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; buf.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;as_ptr&lt;&#x2F;span&gt;&lt;span&gt;() &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;as &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;*const&lt;&#x2F;span&gt;&lt;span&gt; ip_src;&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;                    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; data &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;unsafe &lt;&#x2F;span&gt;&lt;span&gt;{ ptr.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;read_unaligned&lt;&#x2F;span&gt;&lt;span&gt;() };&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;                    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; src_addr &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;net::Ipv4Addr::from(data.ip_src);&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;                    println!(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;LOG: SRC &lt;&#x2F;span&gt;&lt;span&gt;{}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;, ACTION &lt;&#x2F;span&gt;&lt;span&gt;{}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, src_addr, data.action);&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;                }&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;            }&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        });&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    }&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    signal::ctrl_c().await.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;expect&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;failed to listen for event&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;);&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;Ok&lt;&#x2F;span&gt;&lt;span&gt;::&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;_&lt;&#x2F;span&gt;&lt;span&gt;, anyhow::Error&amp;gt;(())&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;}&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;以上只是一小部分，还有更多的支持&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Probes&lt;&#x2F;li&gt;
&lt;li&gt;Tracepoints&lt;&#x2F;li&gt;
&lt;li&gt;Socket Programs&lt;&#x2F;li&gt;
&lt;li&gt;Classifiers&lt;&#x2F;li&gt;
&lt;li&gt;Cgroups&lt;&#x2F;li&gt;
&lt;li&gt;XDP&lt;&#x2F;li&gt;
&lt;li&gt;LSM&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;hr &#x2F;&gt;
&lt;p&gt;&lt;em&gt;&lt;strong&gt;以下作为API参考&lt;&#x2F;strong&gt;&lt;&#x2F;em&gt;&lt;&#x2F;p&gt;
&lt;h3 id=&quot;libbpf-rsde-api&quot;&gt;libbpf-rs的api&lt;&#x2F;h3&gt;
&lt;pre data-lang=&quot;c&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-c &quot;&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;struct &lt;&#x2F;span&gt;&lt;span&gt;bpf_map_skeleton { &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;name, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;**&lt;&#x2F;span&gt;&lt;span&gt;map }&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;struct &lt;&#x2F;span&gt;&lt;span&gt;bpf_prog_skeleton { &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;name, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;**&lt;&#x2F;span&gt;&lt;span&gt;prog }&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;struct &lt;&#x2F;span&gt;&lt;span&gt;bpf_object_skeleton { &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;**&lt;&#x2F;span&gt;&lt;span&gt;obj, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;maps&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(skel)&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;progs&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(skel) &lt;&#x2F;span&gt;&lt;span&gt;}&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;   &lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;bpf_object__open_skeleton&lt;&#x2F;span&gt;&lt;span&gt;(bos &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;s&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;opts&lt;&#x2F;span&gt;&lt;span&gt;);&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;bpf_object__load_skeleton&lt;&#x2F;span&gt;&lt;span&gt;(bos &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;s&lt;&#x2F;span&gt;&lt;span&gt;);&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;bpf_object__attach_skeleton&lt;&#x2F;span&gt;&lt;span&gt;(bos &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;s&lt;&#x2F;span&gt;&lt;span&gt;);&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;void &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;bpf_object__detach_skeleton&lt;&#x2F;span&gt;&lt;span&gt;(bos &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;s&lt;&#x2F;span&gt;&lt;span&gt;);&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;void &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;bpf_object__destroy_skeleton&lt;&#x2F;span&gt;&lt;span&gt;(bos &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;s&lt;&#x2F;span&gt;&lt;span&gt;);&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;build-rs-zi-dong-sheng-cheng-dai-ma-mo-ban-tc-skel-rs&quot;&gt;build.rs 自动生成代码模板 tc.skel.rs&lt;&#x2F;h3&gt;
&lt;p&gt;最终返给用户TcSkel, 包含progs、maps、data
map中的字段根据bpf.c中map生成
call-&amp;gt;libbpf-cargo::lib.rs::SkeletonBuilder().build_generate(&amp;amp;skel)&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rs&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-rs &quot;&gt;&lt;code class=&quot;language-rs&quot; data-lang=&quot;rs&quot;&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;pub struct &lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    TcSkelBuilder.ObjectBuilder,&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    OpenTcSkel.OpenObject,&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    TcSkel.Object,&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    OpenTcProgs.OpenObject,&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    TcProgs.Object,&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    OpenTcMaps.OpenObject,&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    TcMaps.Object,&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    TcLinks.Option&amp;lt;Link&amp;gt;,&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;TcSkelBuilder.open()-&amp;gt;OpenTcSkel(obj, config)&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;OpenTcSkel.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;load&lt;&#x2F;span&gt;&lt;span&gt;() &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;bpf_object__load_skeleton&lt;&#x2F;span&gt;&lt;span&gt;(config)&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;OpenTcSkel.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;load&lt;&#x2F;span&gt;&lt;span&gt;()-&amp;gt;TcSkel(obj,config, Tclinks())&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    OpenTcSkel.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;progs&lt;&#x2F;span&gt;&lt;span&gt;()-&amp;gt;OpenTcProgs(obj)&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    OpenTcSkel.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;maps&lt;&#x2F;span&gt;&lt;span&gt;()-&amp;gt;OpenTcMaps()&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    OpenTcSkel.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;data&lt;&#x2F;span&gt;&lt;span&gt;()-&amp;gt;ffi::c_void()&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;TcSkel.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;attach&lt;&#x2F;span&gt;&lt;span&gt;() &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;bpf_object__attach_skeleton&lt;&#x2F;span&gt;&lt;span&gt;(config)&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;TcSkel.links &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; TcLinks(handle_tc)&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;TcProgs.handle_tc&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;TcMaps.[ports、data、rodata]&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;bindings-rs-zi-dong-sheng-cheng-by-rust-bindgen&quot;&gt;bindings.rs 自动生成 by rust-bindgen&lt;&#x2F;h3&gt;
&lt;p&gt;从10个头文件，用build.rs规则生成
process::Command::new(&amp;quot;make&amp;quot;)
bpf.h
libbpf.h
btf.h
xsk.h
bpf_helpers.h
bpf_helper_defs.h
bpf_tracing.h
bpf_endian.h
bpf_core_read.h
libbpf_common.h&lt;&#x2F;p&gt;
&lt;h2 id=&quot;libbpf-rs-gong-neng&quot;&gt;libbpf-rs 功能&lt;&#x2F;h2&gt;
&lt;p&gt;提供一系列工具&lt;&#x2F;p&gt;
&lt;h3 id=&quot;tc-rs&quot;&gt;tc.rs&lt;&#x2F;h3&gt;
&lt;pre data-lang=&quot;rs&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-rs &quot;&gt;&lt;code class=&quot;language-rs&quot; data-lang=&quot;rs&quot;&gt;&lt;span&gt;TcHookBuilder-&amp;gt; TcHook&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    tc_builder&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;fd&lt;&#x2F;span&gt;&lt;span&gt;(fd)&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;ifindex&lt;&#x2F;span&gt;&lt;span&gt;(ifidx)&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;replace&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;true&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;handle&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;priority&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;);&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;TcHook&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    tc_hook&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;skeleton-rs&quot;&gt;skeleton.rs&lt;&#x2F;h3&gt;
&lt;p&gt;SkelConfig封装 map和prog, &lt;&#x2F;p&gt;
&lt;p&gt;对libbpf_sys::bpf_object_skeleton 的封装&lt;&#x2F;p&gt;
&lt;p&gt;用于生命周期的obj和内存持有的_data&#x2F;_string_pool&lt;&#x2F;p&gt;
&lt;p&gt;用于内存析构drop的progs&#x2F;maps的layout&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rs&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-rs &quot;&gt;&lt;code class=&quot;language-rs&quot; data-lang=&quot;rs&quot;&gt;&lt;span&gt;ObjectSkeletonConfigBuilder.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;build&lt;&#x2F;span&gt;&lt;span&gt;()-&amp;gt;ObjectSkeletonConfig()&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    libbpf_sys::bpf_object_skeleton()&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;build_maps&lt;&#x2F;span&gt;&lt;span&gt;(s, string_pool)-&amp;gt;maps_layout&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;build_progs&lt;&#x2F;span&gt;&lt;span&gt;(s, string_pool)-&amp;gt;progs_layout&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; libbpf_sys::bpf_object_skeleton  wrap&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F;&#x2F; * ensure lifetimes are valid for dependencies (pointers, data buffer)&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F;&#x2F; * free any allocated memory on drop&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;pub struct &lt;&#x2F;span&gt;&lt;span&gt;ObjectSkeletonConfig&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;&amp;#39;a&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; {&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;inner&lt;&#x2F;span&gt;&lt;span&gt;: bpf_object_skeleton,&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;obj&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;Box&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;*mut&lt;&#x2F;span&gt;&lt;span&gt; bpf_object&amp;gt;,&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;maps&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;Vec&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;MapSkelConfig&amp;gt;,&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;progs&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;Vec&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;ProgSkelConfig&amp;gt;,&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F;&#x2F; Layout necessary to `dealloc` memory&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;maps_layout&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;Option&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;Layout&amp;gt;,&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F;&#x2F; Same as above&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;progs_layout&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;Option&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;Layout&amp;gt;,&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F;&#x2F; Hold this reference so that compiler guarantees buffer lives as long as us&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;_data&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;&amp;#39;a&lt;&#x2F;span&gt;&lt;span&gt; [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;u8&lt;&#x2F;span&gt;&lt;span&gt;],&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F;&#x2F; Hold strings alive so pointers to them stay valid&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;_string_pool&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;Vec&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;CString&amp;gt;,&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;}&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;query-rs&quot;&gt;query.rs&lt;&#x2F;h3&gt;
&lt;pre data-lang=&quot;rs&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-rs &quot;&gt;&lt;code class=&quot;language-rs&quot; data-lang=&quot;rs&quot;&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;for&lt;&#x2F;span&gt;&lt;span&gt; prog &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;in &lt;&#x2F;span&gt;&lt;span&gt;ProgInfoIter::default() {&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;     println!(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;{}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, prog.name);&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;[Program&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span&gt;Map&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span&gt;Btf&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span&gt;Link] Info&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;program-rs&quot;&gt;program.rs&lt;&#x2F;h3&gt;
&lt;pre data-lang=&quot;rs&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-rs &quot;&gt;&lt;code class=&quot;language-rs&quot; data-lang=&quot;rs&quot;&gt;&lt;span&gt;OpenProgram.[set_[map_ifindex&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span&gt;fd&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&#x2F;...&lt;&#x2F;span&gt;&lt;span&gt;]]&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;Program.[name&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span&gt;sectyion&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span&gt;fd&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span&gt;key_size&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span&gt;value_size&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span&gt;lookup&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span&gt;delte&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span&gt;update&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span&gt;pin&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span&gt;unpin]]&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;maps-rs&quot;&gt;maps.rs&lt;&#x2F;h3&gt;
&lt;pre data-lang=&quot;rs&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-rs &quot;&gt;&lt;code class=&quot;language-rs&quot; data-lang=&quot;rs&quot;&gt;&lt;span&gt;OpenMap.[set_[prog_type&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span&gt;attach_type&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span&gt;ifindex&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span&gt;flags]]&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;Map.[name&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span&gt;sectyion&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span&gt;fd&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span&gt;pin&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span&gt;unpin&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span&gt;attach[cgroup&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span&gt;perf&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span&gt;uprobe&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span&gt;trace&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span&gt;xdp]]&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;link-rs-bpfyu-hookde-chou-xiang-ke-yi-guan-li&quot;&gt;link.rs bpf与hook的抽象，可以管理&lt;&#x2F;h3&gt;
&lt;pre data-lang=&quot;rs&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-rs &quot;&gt;&lt;code class=&quot;language-rs&quot; data-lang=&quot;rs&quot;&gt;&lt;span&gt;Link.[open&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span&gt;update_prog&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span&gt;dsconnet&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span&gt;pin&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span&gt;fd&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span&gt;detach]&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;bpf_link_type.[xdp&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span&gt;perf_event&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span&gt;cgroup&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span&gt;raw&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span&gt;trace]&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;object-rs&quot;&gt;object.rs&lt;&#x2F;h3&gt;
&lt;pre data-lang=&quot;rs&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-rs &quot;&gt;&lt;code class=&quot;language-rs&quot; data-lang=&quot;rs&quot;&gt;&lt;span&gt;OpenObject: open but not load [bpf_object&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span&gt;maps&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span&gt;progs&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span&gt;name&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span&gt;map&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span&gt;prog&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span&gt;load] Populate obj.maps&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span&gt;obj.progs&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;Object: open and loaded object&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;ObjectBuilder.[name&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span&gt;debug&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span&gt;opts&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span&gt;open_file&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span&gt;open_mem]-&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;OpenObject::&lt;&#x2F;span&gt;&lt;span&gt;new()&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;ringbuf-rs&quot;&gt;ringbuf.rs&lt;&#x2F;h3&gt;
&lt;pre data-lang=&quot;rs&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-rs &quot;&gt;&lt;code class=&quot;language-rs&quot; data-lang=&quot;rs&quot;&gt;&lt;span&gt;RingBuffer.[ring_buffer&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span&gt;poll&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span&gt;consume]&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;RingBufferBuilder.[RingBufferCallback&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span&gt;add&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span&gt;build]-&amp;gt;RingBuffer()&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;util-rs&quot;&gt;util.rs&lt;&#x2F;h3&gt;
&lt;pre data-lang=&quot;rs&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-rs &quot;&gt;&lt;code class=&quot;language-rs&quot; data-lang=&quot;rs&quot;&gt;&lt;span&gt;str_to_cstring&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span&gt;path_to_cstring&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;c_ptr_to_string&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;roundup&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span&gt;num_possible_cpus&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;parse_ret&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span&gt;parse_ret_i32&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span&gt;parse_ret_usize&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;libbpf-cargo-gong-neng&quot;&gt;libbpf-cargo 功能&lt;&#x2F;h2&gt;
&lt;h3 id=&quot;main-rs&quot;&gt;main.rs&lt;&#x2F;h3&gt;
&lt;p&gt;clap Command:[Build&#x2F;Gen&#x2F;Make]分别对应下3个文件,main只是api&lt;&#x2F;p&gt;
&lt;h3 id=&quot;lib-rs&quot;&gt;lib.rs&lt;&#x2F;h3&gt;
&lt;p&gt;给用户工程build.rs提供自动build和gen&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rs&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-rs &quot;&gt;&lt;code class=&quot;language-rs&quot; data-lang=&quot;rs&quot;&gt;&lt;span&gt;    SkeletonBuilder::new().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;source&lt;&#x2F;span&gt;&lt;span&gt;(SRC).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;build_and_generate&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span&gt;skel)&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;build&lt;&#x2F;span&gt;&lt;span&gt;()-&amp;gt;build::build_single()&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    generate()-&amp;gt;gen::gen_single()&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;make-rs&quot;&gt;make.rs&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;批处理build and gen&lt;&#x2F;li&gt;
&lt;li&gt;build::build()&lt;&#x2F;li&gt;
&lt;li&gt;gen::gen()&lt;&#x2F;li&gt;
&lt;li&gt;最后Command::new(&amp;quot;cargo&amp;quot;).arg(&amp;quot;build&amp;quot;)&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;build-rs&quot;&gt;build.rs&lt;&#x2F;h3&gt;
&lt;p&gt;build_single() 用于用户工程 -&amp;gt;compile_one()-&amp;gt;Command&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#f9f9f9;color:#111111;&quot;&gt;&lt;code&gt;&lt;span&gt;build() 用于cargo -&amp;gt;compile()-&amp;gt;compile_one()&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    extract_libbpf_headers_to_disk()&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    check_progs&#x2F;check_clang()&#x2F;&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;gen-rs&quot;&gt;gen.rs&lt;&#x2F;h3&gt;
&lt;pre style=&quot;background-color:#f9f9f9;color:#111111;&quot;&gt;&lt;code&gt;&lt;span&gt;    gen-&amp;gt;gen_single-&amp;gt;gen_skel(debug, name, obj_file, output, rustfmt_path)-&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    gen_skel_contents()&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        open_bpf_object()&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        gen_skel_c_skel_constructor()-&amp;gt;libbpf_rs::skeleton::**ObjectSkeletonConfigBuilder**::new(DATA); # skeleton.rs&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        map&#x2F;prog&#x2F;datasec&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;            gen_skel_xxx_defs()?; gen_skel_xxx_getter()?; gen_skel_link_getter()&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;            gen_skel_attach()-&amp;gt;libbpf_sys::bpf_object__attach_skeleton(&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;metadata-rs&quot;&gt;metadata.rs&lt;&#x2F;h3&gt;
&lt;pre style=&quot;background-color:#f9f9f9;color:#111111;&quot;&gt;&lt;code&gt;&lt;span&gt;cargo时的 to_compile&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;get()-&amp;gt;target_dir, metadata.target_directory.into_std_path_buf()&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    轮询所有package后，if id == &amp;amp;package.id &lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    get_package() &lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;div class=&quot;footnote-definition&quot; id=&quot;1&quot;&gt;&lt;sup class=&quot;footnote-definition-label&quot;&gt;1&lt;&#x2F;sup&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;jimluo&#x2F;netoken&quot;&gt;netoken&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;div&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>HTTPS下强制认证</title>
		<published>2022-01-10T00:00:00+00:00</published>
		<updated>2022-01-10T00:00:00+00:00</updated>
		<link href="https://jimluo.github.io/https-redirect/" type="text/html"/>
		<id>https://jimluo.github.io/https-redirect/</id>
		<content type="html">&lt;p&gt;网络安全准入对终端设备最开始和直接的就是强制其认证合法性。&lt;&#x2F;p&gt;
&lt;p&gt;原有基于HTTP重定向认证已失效，因为HTTP不安全。且浏览器都强制HSTS技术只能HTTPS。&lt;&#x2F;p&gt;
&lt;p&gt;怎么在HTTPS下还能重定向来认证？&lt;&#x2F;p&gt;
&lt;p&gt;住宿酒店和搭乘飞机时会对我们有所启发。接入提供的免费WIFI后会重定向。&lt;&#x2F;p&gt;
&lt;p&gt;结论就是诱使OS发出HTTP。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;ji-zhu-bei-jing&quot;&gt;技术背景&lt;&#x2F;h3&gt;
&lt;p&gt;网络准入产品可以验证终端设备是否安全，使用强制网络门户认证技术实现此验证&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;强制网络门户认证(captive portal），终端入网后，强制弹出浏览器的认证页面，强制用户认证后使用网络&lt;&#x2F;li&gt;
&lt;li&gt;HSTS(HTTP Strict Transport Security), 防止MiTM中间人攻击，浏览器强制使用HTTPS与服务器创建连接，用户无法发出HTTP请求&lt;&#x2F;li&gt;
&lt;li&gt;Captive Portal实现依赖于阶段性的HTTP劫持，当设备入网后，通过DHCP服务获取本机IP地址和网关地址后，发出的HTTP请求被劫持后返回重定向到指定的HTTP认证页面&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;h3 id=&quot;cun-zai-wen-ti&quot;&gt;存在问题&lt;&#x2F;h3&gt;
&lt;ol&gt;
&lt;li&gt;用户终端入网后先用浏览器手动访问HTTPS网站时，返回给终端浏览器的重定向响应，由于浏览器验证服务器证书不匹配会警告，无法实施强制认证，使此技术方案失效。如图&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;&lt;img src=&quot;..&#x2F;images&#x2F;https-redirect&#x2F;1warning.png&quot; alt=&quot;浏览器警告&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;ol start=&quot;2&quot;&gt;
&lt;li&gt;用户终端网络在线时，由管控服务端实施准入策略，在未认证前断网，直到浏览器发出HTTP后被准入服务重定向后去认证。由于浏览器预制的HSTS域名缓存或服务端支持HSTS技术，HTTP被浏览器强制转换为HTTPS，致使浏览器验证服务器证书不匹配会警告，使此技术方案失效&lt;&#x2F;li&gt;
&lt;li&gt;原有准入系统实施基于浏览器http重定向的认证功能，在https下失效，报错证书不匹配，无法实施强制认证，使此技术方案失效。&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;h3 id=&quot;ke-yi-li-yong-osde-yi-ge-ji-zhi&quot;&gt;可以利用OS的一个机制&lt;&#x2F;h3&gt;
&lt;p&gt;操作系统：Windows&#x2F;Linux&#x2F;MacOS&#x2F;Android&#x2F;iOS下
刚入网时回探测是否需要认证，先探测有强制门户，再做认证&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;终端操作系统入网后探测是否处于认证网关之下，多次尝试连接指定的HTTP的url，最长超时 30 秒&lt;&#x2F;li&gt;
&lt;li&gt;如果指定服务返回了204状态码，即未发现强制门户，不需要验证&lt;&#x2F;li&gt;
&lt;li&gt;如果指定服务返回HTTP重定向认证，即强制门户认证，认证后网络放行&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;&lt;img src=&quot;..&#x2F;images&#x2F;https-redirect&#x2F;2captive-portal.png&quot; alt=&quot;发出探测&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;图1 OS发出探测&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;..&#x2F;images&#x2F;https-redirect&#x2F;3captive-portal-204.png&quot; alt=&quot;收到响应，证明无强制门户&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;图2 OS收到无强制门户的204状态&lt;&#x2F;p&gt;
&lt;p&gt;以下是部分固定的探测强制门户的url&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#f9f9f9;color:#111111;&quot;&gt;&lt;code&gt;&lt;span&gt;Windows :http:&#x2F;&#x2F;www.msftconnecttest.com&#x2F;connecttest.txt&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;Google：http:&#x2F;&#x2F;www.gstatic.com&#x2F;generate_204 &#x2F; ， ...&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;Android:https:&#x2F;&#x2F;www.google.com&#x2F;generate_204，...    &lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;小米： http:&#x2F;&#x2F;connect.rom.miui.com&#x2F;generate_204&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;华为： http:&#x2F;&#x2F;connectivitycheck.platform.hicloud.com&#x2F;generate_204&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;ru-he-li-yong-osde-zhe-ge-ji-zhi&quot;&gt;如何利用OS的这个机制&lt;&#x2F;h3&gt;
&lt;p&gt;在交换机或浏览器上处理，诱发OS发出强制门户认证探测&lt;&#x2F;p&gt;
&lt;p&gt;两种方案各有优劣，也可同时使用&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;交换机方案依赖交换机的控制，普通服务没有控制交换机的权限&lt;&#x2F;li&gt;
&lt;li&gt;浏览器方案依赖用户先打开浏览器&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;&lt;img src=&quot;..&#x2F;images&#x2F;https-redirect&#x2F;4topology.png&quot; alt=&quot;网络拓扑&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;图3 HTTPS重定向的网络拓扑&lt;&#x2F;p&gt;
&lt;h2 id=&quot;ji-yu-jiao-huan-ji-de-ji-zhu-fang-an&quot;&gt;基于交换机的技术方案&lt;&#x2F;h2&gt;
&lt;ol&gt;
&lt;li&gt;准入服务控制交换机对终端断网后再开网&lt;&#x2F;li&gt;
&lt;li&gt;终端重新入网诱发其探测强制门户&lt;&#x2F;li&gt;
&lt;li&gt;Windows尝试强制认证，访问http:&#x2F;&#x2F;www.msftconnecttest.com&#x2F;connecttest.txt&lt;&#x2F;li&gt;
&lt;li&gt;终端桌面上托盘中的网络图标闪烁，提示用户点击图标，会打开浏览器并跳入认证页面&lt;&#x2F;li&gt;
&lt;li&gt;准入服务流量截获HTTP请求并重定向到认证页面&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;pre style=&quot;background-color:#f9f9f9;color:#111111;&quot;&gt;&lt;code&gt;&lt;span&gt;终端               交换机        强制门户          准入服务&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt; |&amp;lt;---断网后再开网----|             |&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt; |                   |             |&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt; |-------------探测强制门户--------&amp;gt;|----捕获HTTP----&amp;gt;|&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt; |                   |             |                 |&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt; |&amp;lt;------------发送模仿强制门户的重定向认证------------|&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;表1 基于交换机的HTTPS重定向&lt;&#x2F;p&gt;
&lt;h3 id=&quot;jiao-huan-ji-shi-shi-kong-zhi-ji-zhu&quot;&gt;交换机实施控制技术&lt;&#x2F;h3&gt;
&lt;ol&gt;
&lt;li&gt;与终端直连的交换机将终端地址通过snmp trap上报准入服务&lt;&#x2F;li&gt;
&lt;li&gt;准入服务给指定终端断网再入网snmpset  [up &#x2F; down]&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;h2 id=&quot;ji-yu-liu-lan-qi-zheng-shu-de-ji-zhu-fang-an&quot;&gt;基于浏览器证书的技术方案&lt;&#x2F;h2&gt;
&lt;p&gt;客户端浏览器	网络通讯	服务器(流量镜像)&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;浏览器发起请求，例如https:&#x2F;&#x2F;www.wechat.cn&lt;&#x2F;li&gt;
&lt;li&gt;准入服务识别HTTPS请求，生成自签名的ssl证书（可缓存证书重复利用），返回给终端浏览器&lt;&#x2F;li&gt;
&lt;li&gt;准入服务判断证书，包含公钥，颁发者	返回证书给终端浏览器&lt;&#x2F;li&gt;
&lt;li&gt;终端浏览器判定证书字段有误，终止后面数据传输的流程。进入门户认证流程，&lt;&#x2F;li&gt;
&lt;li&gt;发起http请求，寻找门户http:&#x2F;&#x2F;www.msftconnecttest.com&#x2F;connecttest.txt&lt;&#x2F;li&gt;
&lt;li&gt;准入服务识别请求，修改门户地址，返回给终端浏览器&lt;&#x2F;li&gt;
&lt;li&gt;终端浏览器打开新tab页跳转到指定网址&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;pre style=&quot;background-color:#f9f9f9;color:#111111;&quot;&gt;&lt;code&gt;&lt;span&gt;终端               交换机        强制门户          准入服务&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt; |-----------HTTPS浏览网页时SSL握手验证证书----------&amp;gt;|&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt; |&amp;lt;----------------发送自签名的ssl证书----------------|&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt; |---------判定证书字段有误，进入门户认证流程---------&amp;gt;|&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt; |                   |             |&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt; |-------------探测强制门户--------&amp;gt;|----捕获HTTP----&amp;gt;|&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt; |                   |             |                |&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt; |&amp;lt;------------发送模仿强制门户的重定向认证------------|&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;表2 基于浏览器证书重定向&lt;&#x2F;p&gt;
&lt;h3 id=&quot;shi-xian-te-dian&quot;&gt;实现特点&lt;&#x2F;h3&gt;
&lt;ol&gt;
&lt;li&gt;解决了现有产品在HTTPS下强制门户认证的失效问题&lt;&#x2F;li&gt;
&lt;li&gt;高性能，同时大并发量下对HTTPS强制门户认证。基于BPF实现&lt;&#x2F;li&gt;
&lt;li&gt;绕过HSTS对HTTPS强制使用，实现HTTPS时也能实施强制门户认证&lt;&#x2F;li&gt;
&lt;li&gt;基于强制门户发出的HTTP探测，还能用于其他安全业务&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;h2 id=&quot;dai-ma-mu-lu-jie-gou&quot;&gt;代码目录结构&lt;sup class=&quot;footnote-reference&quot;&gt;&lt;a href=&quot;#1&quot;&gt;1&lt;&#x2F;a&gt;&lt;&#x2F;sup&gt;&lt;&#x2F;h2&gt;
&lt;pre data-lang=&quot;sh&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-sh &quot;&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;bpf&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; 驱动&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;lib&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; 协议库&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;api.h&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;  公用依赖头&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;eth.h&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;  以太帧处理&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;ipv4.h&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; ip帧处理&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;tcp.h&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;  tcp帧处理&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;http.h&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; http处理&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;dhcp.h&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; dhcp收集终端信息&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;os_filter.h&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;  过滤os&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;metrics.h&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;  系统性能&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;linux&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; 内核类型&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;test&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; 单元测试&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;bpf.c&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; 驱动&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;Makefile&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;   构建&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;main.go&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;    加载入口&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;program.go&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; 加载器&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;maps.go&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;    内核与用户态传参字典&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;npf.go&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;     驱动上报&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;npf_bpfel.go&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;  自动生成加载驱动&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;snmp.go&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;    snmp下启停端口&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;tracer.go&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;  traceroute查找终端机器直连的交换机&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;qu-dong-liu-cheng&quot;&gt;驱动流程&lt;&#x2F;h2&gt;
&lt;p&gt;从2层到5层，eth-&amp;gt;ip4-&amp;gt;tcp-&amp;gt;http&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;网络入口 xdp_npf_prog(struct xdp_md* ctx)&lt;&#x2F;li&gt;
&lt;li&gt;struct pkthdr pkt{data_cursor, data_begin, data_end}数据帧封装&lt;&#x2F;li&gt;
&lt;li&gt;过滤http及重定向
&lt;ol&gt;
&lt;li&gt;config verify 读取配置，交换机ip等&lt;&#x2F;li&gt;
&lt;li&gt;eth parse and verify, 只留IP包&lt;&#x2F;li&gt;
&lt;li&gt;ipv4 parse and verify, host pkt pass&lt;&#x2F;li&gt;
&lt;li&gt;tcp parse and verify
&lt;ol&gt;
&lt;li&gt;tcp options filter, find and save token to hashmap&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;os filter&lt;&#x2F;li&gt;
&lt;li&gt;http parse and filter os&lt;&#x2F;li&gt;
&lt;li&gt;lookup hashmap of token&lt;&#x2F;li&gt;
&lt;li&gt;http parse and verify &lt;&#x2F;li&gt;
&lt;li&gt;redirect http  本机debug时关闭&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;h2 id=&quot;jia-zai-liu-cheng-program-go-npf-bpfel-go&quot;&gt;加载流程   program.go npf_bpfel.go&lt;&#x2F;h2&gt;
&lt;ol&gt;
&lt;li&gt;cfg := LoadConfig(&amp;quot;config&amp;quot;) 加载本地配置&lt;&#x2F;li&gt;
&lt;li&gt;npf := NewNpf(cfg) =&amp;gt; npf.go 驱动加载&lt;&#x2F;li&gt;
&lt;li&gt;loadNpfObjects(&amp;amp;bpf) =&amp;gt; npf_bpfel.go  初始化&lt;&#x2F;li&gt;
&lt;li&gt;LoadProg(bpf.npfPrograms.XdpNpfProg.FD()) =&amp;gt; program.go 加载
&lt;ol&gt;
&lt;li&gt;GetIface(linkname) 获取网卡interface&lt;&#x2F;li&gt;
&lt;li&gt;AttachProg(）将启动挂载到网卡interface&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;perf.NewReader(PKT_INFO_EVENTS_MAP） 挂载事件&lt;&#x2F;li&gt;
&lt;li&gt;npf.SetKernelConfig() 构造配置下传&lt;&#x2F;li&gt;
&lt;li&gt;redirectUrlLinux 重定向地址&lt;&#x2F;li&gt;
&lt;li&gt;ipHost  本机地址&lt;&#x2F;li&gt;
&lt;li&gt;macHost 交换机mac&lt;&#x2F;li&gt;
&lt;li&gt;npf.Listen() 监听事件
&lt;ol&gt;
&lt;li&gt;HandleRecord() 解析打印事件&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;h2 id=&quot;httpszhong-ding-xiang-liu-cheng-snmp-go-tracer-go&quot;&gt;https重定向流程 snmp.go tracer.go&lt;&#x2F;h2&gt;
&lt;ol&gt;
&lt;li&gt;snmpscan() 主入口
&lt;ol&gt;
&lt;li&gt;NewSnmp(p)&lt;&#x2F;li&gt;
&lt;li&gt;Connect()&lt;&#x2F;li&gt;
&lt;li&gt;QueryIfaces() 获取所有端口&lt;&#x2F;li&gt;
&lt;li&gt;DownUpIface 关接口&lt;&#x2F;li&gt;
&lt;li&gt;UpIface 开接口&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;Trace() 主入口
&lt;ol&gt;
&lt;li&gt;DefaultTracer 构建可配置的tracer
&lt;ol&gt;
&lt;li&gt;Trace()
&lt;ol&gt;
&lt;li&gt;ping&lt;&#x2F;li&gt;
&lt;li&gt;Receive&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;touch，记录每一跳&lt;&#x2F;li&gt;
&lt;li&gt;Add，判断符合RTT或srcIP后添加&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;hops，反向过滤所有跳，匹配上过滤&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;div class=&quot;footnote-definition&quot; id=&quot;1&quot;&gt;&lt;sup class=&quot;footnote-definition-label&quot;&gt;1&lt;&#x2F;sup&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;jimluo&#x2F;redirectHTTPS&quot;&gt;RedirectHTTPS&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;div&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>开发minidhcp的感受记录</title>
		<published>2021-12-03T00:00:00+00:00</published>
		<updated>2021-12-03T00:00:00+00:00</updated>
		<link href="https://jimluo.github.io/minidhcp/" type="text/html"/>
		<id>https://jimluo.github.io/minidhcp/</id>
		<content type="html">&lt;h2 id=&quot;kai-fa-minidhcpde-gan-shou-ji-lu&quot;&gt;开发minidhcp的感受记录&lt;&#x2F;h2&gt;
&lt;p&gt;开发此服务目的是为网络流量分析和控制提供一种支持手段。具体方法是增加基于角色分配IP段的dhcp，并记录分配的设备的信息。&lt;&#x2F;p&gt;
&lt;p&gt;为了快速验证，在github上找到了&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;coredhcp&#x2F;coredhcp&quot;&gt;coredhcp&lt;&#x2F;a&gt;，去掉了dhcp6及其繁冗的插件系统，优化重构了网络收发部分代码，重写了option的分配，加入了基于角色分配IP的功能，角色策略通过配置文件生效。&lt;sup class=&quot;footnote-reference&quot;&gt;&lt;a href=&quot;#1&quot;&gt;1&lt;&#x2F;a&gt;&lt;&#x2F;sup&gt;&lt;&#x2F;p&gt;
&lt;h2 id=&quot;dhcpxie-yi-liu-cheng&quot;&gt;dhcp协议流程&lt;&#x2F;h2&gt;
&lt;p&gt;&lt;img src=&quot;..&#x2F;images&#x2F;minidhcp.png&quot; alt=&quot;dhcp协议流程&quot; &#x2F;&gt;&lt;sup class=&quot;footnote-reference&quot;&gt;&lt;a href=&quot;#2&quot;&gt;2&lt;&#x2F;a&gt;&lt;&#x2F;sup&gt;&lt;&#x2F;p&gt;
&lt;h3 id=&quot;dhcp-lease-sheng-ming-zhou-qi&quot;&gt;DHCP lease 生命周期&lt;&#x2F;h3&gt;
&lt;p&gt;流程类似打工人租房，先电线杆子广播需求，收到房源电话后签合约，住到期后再续租。&lt;&#x2F;p&gt;
&lt;p&gt;在DHCP协议里描述的更严谨，用编程语言描述就是会有多个if else。&lt;&#x2F;p&gt;
&lt;p&gt;在计算机网络里会是一来一回的消息请求和确认。&lt;&#x2F;p&gt;
&lt;p&gt;类似盲人摸象，不同的视角说的都不全面。&lt;&#x2F;p&gt;
&lt;p&gt;用语言描述如下：&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;此前没有过IP的客户端全网广播向DHCP服务申请，通过后分配一个IP时间限制的租约&lt;&#x2F;li&gt;
&lt;li&gt;已有过IP的客户端向授予它租约的DHCP服务器联系，以确认为其重新分配租约&lt;&#x2F;li&gt;
&lt;li&gt;租约过期后，客户端将联系最初授予租约的服务器续租&lt;&#x2F;li&gt;
&lt;li&gt;如果续租失败，客户端将尝试重新绑定到任何活跃的DHCP服务器&lt;&#x2F;li&gt;
&lt;li&gt;客户端主动放弃租约下线(goodbye curel world😢)&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;以上5步在DHCP服务认知的世界里，用Allocation、Reallocation、Renewal、Rebinding和Release来描述。&lt;&#x2F;p&gt;
&lt;p&gt;当然在租房客的认知世界里，憧憬未来和负重前行也与房东的5步相对应。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;xian-shuo-xie-yi-de-allocation-da-jia-gong-tong-zun-shou-tong-yang-de-yue-ding&quot;&gt;先说协议的Allocation，大家共同遵守同样的约定&lt;&#x2F;h3&gt;
&lt;ol&gt;
&lt;li&gt;client --DISCOVER(myMac, myID)--&amp;gt; servers&lt;&#x2F;li&gt;
&lt;li&gt;client &amp;lt;--OFFER(yourIP, your[DNS,Router,Mask,...], yourID)-- servers&lt;&#x2F;li&gt;
&lt;li&gt;client &amp;lt;--IP[x]-- [1, n]IP from OFFER list &lt;&#x2F;li&gt;
&lt;li&gt;client --REQUEST(IP[x])--&amp;gt; servers&lt;&#x2F;li&gt;
&lt;li&gt;client &amp;lt;--ACK&#x2F;MAK-- server&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;用语言描述为&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;广播找房&lt;&#x2F;li&gt;
&lt;li&gt;广受青睐，发来房源信息&lt;&#x2F;li&gt;
&lt;li&gt;挑选1个高性价比的房&lt;&#x2F;li&gt;
&lt;li&gt;广播告知自己已是有房之人&lt;&#x2F;li&gt;
&lt;li&gt;房东送来租房合同等你签字&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;色不异空，空不异色，Reallocation、Renewal、Rebinding亦复如是&lt;&#x2F;p&gt;
&lt;h2 id=&quot;serverwang-luo-shou-fa-xi-jie&quot;&gt;server网络收发细节&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;服务端监听在67端口上，收到client请求后解析有icmp的信息，响应给client容错时要处理下，里面有网卡接口可以使用&lt;&#x2F;li&gt;
&lt;li&gt;对普通请求，自构建pcap响应原路返回。其他非正常消息在3层ip上icmp返回错误提醒&lt;&#x2F;li&gt;
&lt;li&gt;具体的发送使用libpacp，发送前要去掉自定义链路层的协议头部&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;optionschong-xi-jie&quot;&gt;options种细节&lt;&#x2F;h2&gt;
&lt;p&gt;DHCP通过自定义增加多种不同的可选项来扩展，服务端返给客户端的option里有[ip, dns, mask, router, serverID...]可自由添加。&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;分配时先根据客户端的mac来识别其角色，再根据配置文件中的range来分配具体的ip等信息&lt;&#x2F;li&gt;
&lt;li&gt;其他扩展在options的HandlerXXX dispatch去即可&lt;&#x2F;li&gt;
&lt;li&gt;需要客户端信息的，再options里可以对其提出，比如Vendor信息等&lt;&#x2F;li&gt;
&lt;li&gt;续租等信息在lease.txt可查可用&lt;&#x2F;li&gt;
&lt;li&gt;分配算法用的coredhcp的bitmap方式降低内存占用&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;div class=&quot;footnote-definition&quot; id=&quot;1&quot;&gt;&lt;sup class=&quot;footnote-definition-label&quot;&gt;1&lt;&#x2F;sup&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;jimluo&#x2F;minidhcp&quot;&gt;源码地址&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;div&gt;
&lt;div class=&quot;footnote-definition&quot; id=&quot;2&quot;&gt;&lt;sup class=&quot;footnote-definition-label&quot;&gt;2&lt;&#x2F;sup&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;support.huawei.com&#x2F;enterprise&#x2F;zh&#x2F;doc&#x2F;EDOC1100156651&#x2F;bb57bdaa&#x2F;how-dhcp-works&quot;&gt;图片来源&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;div&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>BPF技术介绍 - 生态和历史</title>
		<published>2021-11-17T00:00:00+00:00</published>
		<updated>2021-11-17T00:00:00+00:00</updated>
		<link href="https://jimluo.github.io/bpf-vs-dpdk/" type="text/html"/>
		<id>https://jimluo.github.io/bpf-vs-dpdk/</id>
		<content type="html">&lt;h2 id=&quot;bpfji-zhu-jie-shao-sheng-tai-he-li-shi&quot;&gt;BPF技术介绍 - 生态和历史&lt;&#x2F;h2&gt;
&lt;p&gt;本文图片都源于网上公开资料，未注明来源。内容源于对网络检测与响应NDR的开发。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;li-shi-cheng-yin&quot;&gt;历史成因&lt;&#x2F;h3&gt;
&lt;p&gt;&lt;img src=&quot;..&#x2F;images&#x2F;bpf-xdp&#x2F;01history.png&quot; alt=&quot;历史成因&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;图1：Linux内核的代码量增长&lt;&#x2F;p&gt;
&lt;h3 id=&quot;dpdk-pf-ringhe-bpfde-gong-tong-dian&quot;&gt;DPDK、PF_RING和BPF的共同点&lt;&#x2F;h3&gt;
&lt;p&gt;分离出网络的数据平面&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;网络功能扩展的代价是牺牲性能&lt;&#x2F;li&gt;
&lt;li&gt;都在突破内核复杂度的限制 -kernel bypass&lt;&#x2F;li&gt;
&lt;li&gt;从内核中分离出数据平面&lt;&#x2F;li&gt;
&lt;li&gt;向上交给用户态开发 -DPDK、PF_RING和BPF&lt;&#x2F;li&gt;
&lt;li&gt;向下卸载到网卡执行 -BPF的XDP&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;dpdk-pf-ringhe-bpfde-chai-yi-dian-sheng-tai-mu-biao-bu-tong&quot;&gt;DPDK、PF_RING和BPF的差异点：生态目标不同&lt;&#x2F;h3&gt;
&lt;p&gt;&lt;img src=&quot;..&#x2F;images&#x2F;bpf-xdp&#x2F;02canon.png&quot; alt=&quot;DPDK&quot; &#x2F;&gt; DPDK&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;DPDK 独立的平台
&lt;ul&gt;
&lt;li&gt;独占内核网络栈&lt;&#x2F;li&gt;
&lt;li&gt;专用的SDK API&lt;&#x2F;li&gt;
&lt;li&gt;生态面向硬件&lt;&#x2F;li&gt;
&lt;li&gt;应用隔离和安全机制失效&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;PF_RING 独立的厂商
&lt;ul&gt;
&lt;li&gt;独立的意大利公司&lt;&#x2F;li&gt;
&lt;li&gt;高性能版独立收费&lt;&#x2F;li&gt;
&lt;li&gt;独立的生态&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;&lt;img src=&quot;..&#x2F;images&#x2F;bpf-xdp&#x2F;03swiss.png&quot; alt=&quot;BPF&quot; &#x2F;&gt; BPF&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;BPF 融合的生态
&lt;ul&gt;
&lt;li&gt;嫁接在内核中&lt;&#x2F;li&gt;
&lt;li&gt;融合在已有的软硬件中&lt;&#x2F;li&gt;
&lt;li&gt;生态面向软件并发展迅速&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;dpdkyu-bpfji-jin-hui&quot;&gt;DPDK与BPF基金会&lt;&#x2F;h3&gt;
&lt;p&gt;面向基础设施：底层硬件 &#x2F; 上层业务&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;..&#x2F;images&#x2F;bpf-xdp&#x2F;04foundation.png&quot; alt=&quot;基金会&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;图2：两种不同利益的基金会&lt;&#x2F;p&gt;
&lt;h3 id=&quot;dpdknian-du-shi-jian-he-ji-zhu-biao-zhun&quot;&gt;DPDK年度事件和技术标准&lt;&#x2F;h3&gt;
&lt;p&gt;年度事件&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;2010，Intel，Xeon 1代的DPDK&lt;&#x2F;li&gt;
&lt;li&gt;2013，6WIND，DPDK.org社区&lt;&#x2F;li&gt;
&lt;li&gt;2014，OvS，OvS-DPDK分布式虚拟交换机&lt;&#x2F;li&gt;
&lt;li&gt;2015，ARM版本&lt;&#x2F;li&gt;
&lt;li&gt;2017，加入 Linux 基金会&lt;&#x2F;li&gt;
&lt;li&gt;2018，VMware，数据中心内软件定义基础结构&lt;&#x2F;li&gt;
&lt;li&gt;2019，金融应用(高频交易)&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;技术标准&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;PCI passthrough，绕过Hyper-V模拟，虚拟机直通PCI&lt;&#x2F;li&gt;
&lt;li&gt;SR-IOV，绕过 Hyper-V堆栈，单网卡虚拟成多张直通网卡&lt;&#x2F;li&gt;
&lt;li&gt;FD.io&#x2F;VPP，矢量加速数据IO，减少I-cache抖动和读延时&lt;&#x2F;li&gt;
&lt;li&gt;vDPA， virtio 数据路径加速，控制面软件模拟，数据面硬件实现&lt;&#x2F;li&gt;
&lt;li&gt;Switchdev，卸载内核的交换功能到硬件&lt;&#x2F;li&gt;
&lt;li&gt;代码贡献占比 (V21.11)&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;bpfxun-su-fa-zhan-de-sheng-tai&quot;&gt;BPF迅速发展的生态&lt;&#x2F;h2&gt;
&lt;p&gt;年度技术&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;1992 论文，BSD Packet Filter&lt;&#x2F;li&gt;
&lt;li&gt;1994 cBPF，tcpdump中libpcap的实现&lt;&#x2F;li&gt;
&lt;li&gt;2014 eBPF，通用虚拟机&lt;&#x2F;li&gt;
&lt;li&gt;2015 BCC，开发工具和库&lt;&#x2F;li&gt;
&lt;li&gt;2016 XDP，网络内核旁路模块&lt;&#x2F;li&gt;
&lt;li&gt;2017 libbpf，脱离内核独立发展&lt;&#x2F;li&gt;
&lt;li&gt;2017 ARM&#x2F;MIPS，多平台BPF&lt;&#x2F;li&gt;
&lt;li&gt;2018 BTF，跨内核版本类型格式&lt;&#x2F;li&gt;
&lt;li&gt;2019 尾调用和热更新&lt;&#x2F;li&gt;
&lt;li&gt;2020 LSM和TCP拥塞控制&lt;&#x2F;li&gt;
&lt;li&gt;2021 eBPF基金会&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;产品生态&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;2017 Facebook，生产环境中的负载均衡Katran&lt;&#x2F;li&gt;
&lt;li&gt;2018 Cloudflare，生产环境中的DDoS&#x2F;防火墙等&lt;&#x2F;li&gt;
&lt;li&gt;2018 Android 9，流量监控，包括DHCPClient&lt;&#x2F;li&gt;
&lt;li&gt;2018 Netronome，Agilio智能网卡支持XDP&lt;&#x2F;li&gt;
&lt;li&gt;2018 DPDK，支持BPF(不包括MAP和尾调用)&lt;&#x2F;li&gt;
&lt;li&gt;2019 Google，KRSI 内核运行时安全助手(Kernel V5.7)&lt;&#x2F;li&gt;
&lt;li&gt;2019 Sysdig，Falco捐赠为k8s安全基础&lt;&#x2F;li&gt;
&lt;li&gt;2020 Nvidia，Mellanox智能网卡支持XDP(￥3千~9千)&lt;&#x2F;li&gt;
&lt;li&gt;2020 微软，Linux版Sysmon，eBPF for Windows&lt;&#x2F;li&gt;
&lt;li&gt;2020 字节，高性能网络 ACL&lt;&#x2F;li&gt;
&lt;li&gt;2020 阿里云，基于Cilium加速和扩展&lt;&#x2F;li&gt;
&lt;li&gt;2021 Cilium，Service mesh (无Sidecar)&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;dpdkyu-bpfsheng-tai&quot;&gt;DPDK与BPF生态&lt;&#x2F;h3&gt;
&lt;p&gt;面向生态和开发者不同&lt;&#x2F;p&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;产品分类&lt;&#x2F;th&gt;&lt;th&gt;DPDK&lt;&#x2F;th&gt;&lt;th&gt;BPF&lt;&#x2F;th&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;thead&gt;&lt;tbody&gt;
&lt;tr&gt;&lt;td&gt;安全&lt;&#x2F;td&gt;&lt;td&gt;&lt;&#x2F;td&gt;&lt;td&gt;Falco&#x2F;Cilium&#x2F;L4drop&#x2F;...&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;可观测性&lt;&#x2F;td&gt;&lt;td&gt;&lt;&#x2F;td&gt;&lt;td&gt;Hubble&#x2F;L3AF&#x2F;Tracee&#x2F;...&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;网络&lt;&#x2F;td&gt;&lt;td&gt;DPVS&#x2F;OVS&#x2F;FD.IO&#x2F;VPP&lt;&#x2F;td&gt;&lt;td&gt;Katran&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;SDKs&lt;&#x2F;td&gt;&lt;td&gt;C++&#x2F;GO&lt;&#x2F;td&gt;&lt;td&gt;C++&#x2F;Rust&#x2F;GO&#x2F;Python&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;内核&lt;&#x2F;td&gt;&lt;td&gt;TCP栈 F-Stack&#x2F;mTCP&lt;&#x2F;td&gt;&lt;td&gt;helper-API&#x2F;Maps&#x2F;Verfier&amp;amp;JIT&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;市场生态&lt;&#x2F;td&gt;&lt;td&gt;关注硬件能力的虚拟化和共享，硬件厂商推动，是虚拟化技术vt-x&#x2F;ept等在网络IO上的演进&lt;&#x2F;td&gt;&lt;td&gt;关注内核能力的分离和复用云厂商推动，是云原生技术演进对本地生态的融合&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;
&lt;p&gt;表1：两种不同利益的基金会&lt;&#x2F;p&gt;
&lt;h2 id=&quot;bpfji-zhu-jie-shao-xing-neng-fen-xi&quot;&gt;BPF技术介绍 性能分析&lt;&#x2F;h2&gt;
&lt;h3 id=&quot;dpdkyu-pf-ringji-zhu-yi-tong-ji-zhu-xiang-jin&quot;&gt;DPDK与PF_RING技术异同  - 技术相近&lt;&#x2F;h3&gt;
&lt;p&gt;&lt;img src=&quot;..&#x2F;images&#x2F;bpf-xdp&#x2F;05pf_ring.png&quot; alt=&quot;PF_RING&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;图3：PF_RING原理&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;..&#x2F;images&#x2F;bpf-xdp&#x2F;06dpdk.png&quot; alt=&quot;DPDK&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;图4：DPDK模块结构&lt;&#x2F;p&gt;
&lt;p&gt;相同&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;UIO+PMD主动轮询 减少中断和CPU上下文切换&lt;&#x2F;li&gt;
&lt;li&gt;UIO+mmap 实现零拷贝&lt;&#x2F;li&gt;
&lt;li&gt;HugePages 减少TLB 失效&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;差异&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;PF_RING 分普通版和ZC(zero copy)高性能版本&lt;&#x2F;li&gt;
&lt;li&gt;ZC许可证收费，DPDK 免费&lt;&#x2F;li&gt;
&lt;li&gt;ZC与DPDK的性能基本持平&lt;&#x2F;li&gt;
&lt;li&gt;ZC应用层API易于使用，开发难度远小于DPDK&lt;&#x2F;li&gt;
&lt;li&gt;ZC是意大利ntop公司下的一款产品，生态小&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;bpfde-wang-luo-ji-zhu-te-dian&quot;&gt;BPF的网络技术特点&lt;&#x2F;h3&gt;
&lt;p&gt;&lt;img src=&quot;..&#x2F;images&#x2F;bpf-xdp&#x2F;08BPF-hook.png&quot; alt=&quot;BPF模块结构&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;图5：BPF模块结构&lt;&#x2F;p&gt;
&lt;p&gt;BPF的7种挂载点，覆盖全生命周期流程&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;uprobe&lt;&#x2F;li&gt;
&lt;li&gt;syscall&lt;&#x2F;li&gt;
&lt;li&gt;sockmap&#x2F;sockops&lt;&#x2F;li&gt;
&lt;li&gt;kprobe&lt;&#x2F;li&gt;
&lt;li&gt;cgroups&lt;&#x2F;li&gt;
&lt;li&gt;tc&lt;&#x2F;li&gt;
&lt;li&gt;xdp&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;&lt;img src=&quot;..&#x2F;images&#x2F;bpf-xdp&#x2F;07xdp-pkt.png&quot; alt=&quot;XDP程序的4种包处理方式&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;图6：BPF的XDP程序的4种包处理方式&lt;&#x2F;p&gt;
&lt;p&gt;XDP的4种包处理方式&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;PASS 放行到kernel &lt;&#x2F;li&gt;
&lt;li&gt;DROP 丢弃，不到kernel&lt;&#x2F;li&gt;
&lt;li&gt;REDIRECT 转发其他处理&lt;&#x2F;li&gt;
&lt;li&gt;TX 原路返回(用于阻断和重定向)&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;h3 id=&quot;xdpde-xie-zai-wang-qia-xing-neng&quot;&gt;XDP的卸载网卡性能&lt;&#x2F;h3&gt;
&lt;p&gt;Netronome智能网卡数据&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;XDP 3个hook点(网卡Offload&#x2F;内核前Native&#x2F;内核中Generic)&lt;&#x2F;li&gt;
&lt;li&gt;Offload 1 core比Native 8 core快近似1&#x2F;3倍&lt;&#x2F;li&gt;
&lt;li&gt;Native下比DPDK稍慢，性能相差不多 Stackoverflow  Redhat&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;&lt;img src=&quot;..&#x2F;images&#x2F;bpf-xdp&#x2F;09netonome-lb.png&quot; alt=&quot;XDP的3种挂载模式的性能&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;图7：XDP的3种挂载模式的性能&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;..&#x2F;images&#x2F;bpf-xdp&#x2F;10netonome-layers.png&quot; alt=&quot;XDP在网络协议栈的位置&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;图8：XDP在网络协议栈的位置&lt;&#x2F;p&gt;
&lt;h3 id=&quot;nacya-ce-ji-lu&quot;&gt;NAC压测记录&lt;&#x2F;h3&gt;
&lt;p&gt;3种类型的吞吐率,NAC WSL2虚拟机&lt;&#x2F;p&gt;
&lt;p&gt;XDP_DROP 直接丢弃&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;sh&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-sh &quot;&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;❯&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; tcpreplay&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt; -t -i&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; lo t.pcap&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;Actual:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; 56320 packets (46419288 bytes&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;sent&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; in 1.10 seconds&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;Rated:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; 42062496.6 Bps, 336.49 Mbps, 51033.95 pps&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;Flows:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; 1091 flows, 988.60 fps, 56290 flow packets, 30 non-flow&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;XDP_TX 阻断、重定向&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;sh&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-sh &quot;&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;Actual:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; 56320 packets (46419288 bytes&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;sent&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; in 1.30 seconds&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;Rated:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; 35446666.1 Bps, 283.57 Mbps, 43007.04 pps&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;Flows:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; 1091 flows, 833.10 fps, 56290 flow packets, 30 non-flow&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;XDP_TX + map_perf 阻断并上报应用&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;sh&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-sh &quot;&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;Actual:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; 56320 packets (46419288 bytes&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;sent&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; in 1.49 seconds&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;Rated:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; 31016641.1 Bps, 248.13 Mbps, 37632.14 pps&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;Flows:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; 1091 flows, 728.98 fps, 56290 flow packets, 30 non-flow&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;竞品 10个千兆电口,每秒事务数1000TPS，最大吞吐量500Mbps，最大并发连接数:1000(条)&lt;&#x2F;p&gt;
&lt;h3 id=&quot;bpfji-zhu-jie-shao-an-li-fen-xi&quot;&gt;BPF技术介绍 - 案例分析&lt;&#x2F;h3&gt;
&lt;p&gt;实际案例 cloudflare DDOS 
Mirai僵尸网络的3次攻击&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;..&#x2F;images&#x2F;bpf-xdp&#x2F;11ddos-miral.png&quot; alt=&quot;DDOS时网络承载的流量&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;图9：DDOS时网络承载的流量&lt;&#x2F;p&gt;
&lt;p&gt;2020.07， 654Gbps， SYN 洪水和UDP 洪水 
2021.08 ，1.2Tbps， SYN 洪水和UDP 洪水，最大HTTP请求2500万次&#x2F;s , 3 秒内被阻止
2021.11， 2Tbps， 1分钟的DNS 放大攻击和 UDP 洪水，1.5 万个僵尸 （下图）
近2Tbps&lt;&#x2F;p&gt;
&lt;p&gt;DDOS缓解流程 
生态链：全BPF系列产品集成&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;..&#x2F;images&#x2F;bpf-xdp&#x2F;12ddos-xdp.png&quot; alt=&quot;缓解DDOS时使用XDP的工具链&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;图10：缓解DDOS时使用XDP的工具链&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;接收样本分析到攻击时自动推送缓解策略&lt;&#x2F;li&gt;
&lt;li&gt;再在每台服务器上执行本地缓解策略,&lt;&#x2F;li&gt;
&lt;li&gt;DDos的L4Drop (XDP)&lt;&#x2F;li&gt;
&lt;li&gt;LB的Unimog     (XDP) &lt;&#x2F;li&gt;
&lt;li&gt;防火墙的Magic firewall (BPF xt_btf)&lt;&#x2F;li&gt;
&lt;li&gt;分发和监视&lt;&#x2F;li&gt;
&lt;li&gt;UDP限速 (BPF SO_ATTACH_BPF)&lt;&#x2F;li&gt;
&lt;li&gt;上报指标的ebpf_exporter&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;&lt;img src=&quot;..&#x2F;images&#x2F;bpf-xdp&#x2F;13ddos-bpf.png&quot; alt=&quot;缓解DDOS时使用XDP的协议找技术&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;图11：缓解DDOS时使用XDP的协议找技术&lt;&#x2F;p&gt;
&lt;h3 id=&quot;p0fzhi-wen-ku-shuo-ming-tcp-headerte-zheng&quot;&gt;p0f指纹库说明 TCP header特征&lt;&#x2F;h3&gt;
&lt;p&gt;DDOS流量指纹识别 &lt;&#x2F;p&gt;
&lt;p&gt;指纹类型&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#f9f9f9;color:#111111;&quot;&gt;&lt;code&gt;&lt;span&gt;Windows XP: 4:120+8:0:1452:65535,0   :mss,nop,nop,sok   :df,id+:0&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;Windows 7:  4:128:0:*     :8192,8    :mss,nop,ws,nop,sok:df,id+:0&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;Windows 11: 4:128+0:0:1460:mss*44,8  :mss,nop,ws,nop,sok:df,id+:0&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;ubuntu 14:  4:64   :0     :*:mss*10,6:mss,sok,ts,nop,ws :df,id+:0&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;TCP指纹 判断依据，Linux的TTL为64，Win是128，flags的数量和位置，Linux与Win不同&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#f9f9f9;color:#111111;&quot;&gt;&lt;code&gt;&lt;span&gt;4: IP version &lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  64: TTL   &lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;     0: IP options length&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;       *: MSS maximum segment size&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;         mss*10,6: TCP window size and scale&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;                  mss,sok,ts,nop,ws: TCP Options(sok:selective ACK permitted)&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;                                 df,id+: quirks(df: don&amp;#39;t fragment)&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;                                        0 TCP Payload Length&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;fu-zai-jun-heng-zhong-de-liu-liang-biao-shi&quot;&gt;负载均衡中的流量标识&lt;&#x2F;h3&gt;
&lt;p&gt;Facebook katran TCP option添加自定义ID&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;..&#x2F;images&#x2F;bpf-xdp&#x2F;14katran.png&quot; alt=&quot;负载均衡时XDP在L4层与其他服务间的关系&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;图12：负载均衡时XDP在L4层与其他服务间的关系&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;通过将server_id加在TCP头中实现无状态路由机制&lt;&#x2F;li&gt;
&lt;li&gt;处理TCP头额外开销(CPU&#x2F;memory)非常小&lt;&#x2F;li&gt;
&lt;li&gt;根据server_id使用Maglev Hash变种选择后端&lt;&#x2F;li&gt;
&lt;li&gt;只适用于无防火墙的内网&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;拦截事件点读写server_id&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;..&#x2F;images&#x2F;bpf-xdp&#x2F;15katran-serverid.png&quot; alt=&quot;XDP在L4层负载均衡时用到的事件&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;图13：XDP在L4层负载均衡时用到的事件&lt;&#x2F;p&gt;
&lt;h3 id=&quot;ke-guan-ce-xing-diao-shi&quot;&gt;可观测性 调试&lt;&#x2F;h3&gt;
&lt;p&gt;cilium pwru (packet, where are you?)&lt;&#x2F;p&gt;
&lt;p&gt;跟踪内核中的网络包的API调用&lt;&#x2F;p&gt;
&lt;h3 id=&quot;bpfji-zhu-jie-shao-ji-zhu-fen-xi&quot;&gt;BPF技术介绍 - 技术分析&lt;&#x2F;h3&gt;
&lt;p&gt;BPF开发运行机制&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;..&#x2F;images&#x2F;bpf-xdp&#x2F;16bpf-flow.png&quot; alt=&quot;BPF生命周期流程&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;图14：BPF生命周期流程(网络的XDP和TC)&lt;&#x2F;p&gt;
&lt;p&gt;1.编写、编译
2.校验
3.BPF字节码到机器码
4.挂载执行
6.与系统通信
5.XDP的DROP&#x2F;PASS&#x2F;TX&#x2F;REDIRECT&lt;&#x2F;p&gt;
&lt;h3 id=&quot;cbpfxu-ni-ji-yuan-li&quot;&gt;cBPF虚拟机原理&lt;&#x2F;h3&gt;
&lt;p&gt;&lt;img src=&quot;..&#x2F;images&#x2F;bpf-xdp&#x2F;17bpf-model1.png&quot; alt=&quot;代码在编译器的分解&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;图15：代码在编译器的分解&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;..&#x2F;images&#x2F;bpf-xdp&#x2F;18bpf-model2.png&quot; alt=&quot;BPF转换成DAG&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;图16：BPF转换成DAG&lt;&#x2F;p&gt;
&lt;p&gt;BPF 基于寄存器虚拟机，程序最终转换成一个DAG，并由内核来执行
过滤器表达式在两种模式下的编译分解，见下图
模型1: 制约性能最大的问题，有重复计算
模型2: 等价于模型1，只需6次布尔运算，遍历完整棵树
模型2 eBPF
模型1 cBPF&lt;&#x2F;p&gt;
&lt;h3 id=&quot;cbpfxu-ni-ji-zhi-xing-liu-cheng&quot;&gt;cBPF虚拟机执行流程&lt;&#x2F;h3&gt;
&lt;p&gt;&lt;img src=&quot;..&#x2F;images&#x2F;bpf-xdp&#x2F;19bpf-asm1.png&quot; alt=&quot;BPF内部执行流程&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;图17：BPF内部执行流程&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;..&#x2F;images&#x2F;bpf-xdp&#x2F;20bpf-asm2.png&quot; alt=&quot;BPF指令码解释&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;图18：BPF指令码解释&lt;&#x2F;p&gt;
&lt;p&gt;$ tcpdump tcp port 443 -d&lt;&#x2F;p&gt;
&lt;h3 id=&quot;bpfxian-you-wen-ti&quot;&gt;BPF现有问题&lt;&#x2F;h3&gt;
&lt;p&gt;内核版本和安全&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;内核版本支持 Linux &amp;gt; V4.18&lt;&#x2F;li&gt;
&lt;li&gt;XDP及其MAP的支持&lt;&#x2F;li&gt;
&lt;li&gt;BTF跨不同版本内核运行&lt;&#x2F;li&gt;
&lt;li&gt;安全 提权漏洞 Linux V5.7~V5.8&lt;&#x2F;li&gt;
&lt;li&gt;CVE-2020-27194：Verify时越界读写造成&lt;&#x2F;li&gt;
&lt;li&gt;CVE-2020-8835：Verify时常数变量取值范围的逻辑错误&lt;&#x2F;li&gt;
&lt;li&gt;CVE-2020-27194：Verify时寄存器边界跟踪&lt;&#x2F;li&gt;
&lt;li&gt;容器逃逸: 编写Rootkit，修改用户空间，hook网络数据&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</content>
	</entry>
</feed>
